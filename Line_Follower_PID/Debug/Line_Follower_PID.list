
Line_Follower_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800a490  0800a490  0001a490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa1c  0800aa1c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa24  0800aa24  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800aa2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001f0  0800ac1c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800ac1c  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001176c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d4e  00000000  00000000  00031984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000346d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ddc  00000000  00000000  000362d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013207  00000000  00000000  0004d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cba  00000000  00000000  000602b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4f6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004364  00000000  00000000  000e4fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a474 	.word	0x0800a474

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	0800a474 	.word	0x0800a474

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 f827 	bl	80014a4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 ff77 	bl	8001354 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f819 	bl	80014a4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f80f 	bl	80014a4 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff9f 	bl	80013d8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ff95 	bl	80013d8 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f834 	bl	8000558 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46ce      	mov	lr, r9
 8000500:	4647      	mov	r7, r8
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	4699      	mov	r9, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	469c      	mov	ip, r3
 800050c:	0413      	lsls	r3, r2, #16
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	001d      	movs	r5, r3
 8000512:	000e      	movs	r6, r1
 8000514:	4661      	mov	r1, ip
 8000516:	0400      	lsls	r0, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c00      	lsrs	r0, r0, #16
 800051c:	4345      	muls	r5, r0
 800051e:	434b      	muls	r3, r1
 8000520:	4360      	muls	r0, r4
 8000522:	4361      	muls	r1, r4
 8000524:	18c0      	adds	r0, r0, r3
 8000526:	0c2c      	lsrs	r4, r5, #16
 8000528:	1820      	adds	r0, r4, r0
 800052a:	468c      	mov	ip, r1
 800052c:	4283      	cmp	r3, r0
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x3c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	4649      	mov	r1, r9
 800053a:	4379      	muls	r1, r7
 800053c:	4372      	muls	r2, r6
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	4463      	add	r3, ip
 8000542:	042d      	lsls	r5, r5, #16
 8000544:	0c2d      	lsrs	r5, r5, #16
 8000546:	18c9      	adds	r1, r1, r3
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	1940      	adds	r0, r0, r5
 800054c:	1889      	adds	r1, r1, r2
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__udivmoddi4>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	b5e0      	push	{r5, r6, r7, lr}
 8000564:	0004      	movs	r4, r0
 8000566:	000d      	movs	r5, r1
 8000568:	4692      	mov	sl, r2
 800056a:	4699      	mov	r9, r3
 800056c:	b083      	sub	sp, #12
 800056e:	428b      	cmp	r3, r1
 8000570:	d830      	bhi.n	80005d4 <__udivmoddi4+0x7c>
 8000572:	d02d      	beq.n	80005d0 <__udivmoddi4+0x78>
 8000574:	4649      	mov	r1, r9
 8000576:	4650      	mov	r0, sl
 8000578:	f001 febe 	bl	80022f8 <__clzdi2>
 800057c:	0029      	movs	r1, r5
 800057e:	0006      	movs	r6, r0
 8000580:	0020      	movs	r0, r4
 8000582:	f001 feb9 	bl	80022f8 <__clzdi2>
 8000586:	1a33      	subs	r3, r6, r0
 8000588:	4698      	mov	r8, r3
 800058a:	3b20      	subs	r3, #32
 800058c:	469b      	mov	fp, r3
 800058e:	d433      	bmi.n	80005f8 <__udivmoddi4+0xa0>
 8000590:	465a      	mov	r2, fp
 8000592:	4653      	mov	r3, sl
 8000594:	4093      	lsls	r3, r2
 8000596:	4642      	mov	r2, r8
 8000598:	001f      	movs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d83a      	bhi.n	800061a <__udivmoddi4+0xc2>
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d100      	bne.n	80005aa <__udivmoddi4+0x52>
 80005a8:	e078      	b.n	800069c <__udivmoddi4+0x144>
 80005aa:	465b      	mov	r3, fp
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5e>
 80005b4:	e075      	b.n	80006a2 <__udivmoddi4+0x14a>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e028      	b.n	8000622 <__udivmoddi4+0xca>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9cf      	bls.n	8000574 <__udivmoddi4+0x1c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8e>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b003      	add	sp, #12
 80005ec:	bcf0      	pop	{r4, r5, r6, r7}
 80005ee:	46bb      	mov	fp, r7
 80005f0:	46b2      	mov	sl, r6
 80005f2:	46a9      	mov	r9, r5
 80005f4:	46a0      	mov	r8, r4
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	4652      	mov	r2, sl
 8000600:	40da      	lsrs	r2, r3
 8000602:	4641      	mov	r1, r8
 8000604:	0013      	movs	r3, r2
 8000606:	464a      	mov	r2, r9
 8000608:	408a      	lsls	r2, r1
 800060a:	0017      	movs	r7, r2
 800060c:	4642      	mov	r2, r8
 800060e:	431f      	orrs	r7, r3
 8000610:	4653      	mov	r3, sl
 8000612:	4093      	lsls	r3, r2
 8000614:	001e      	movs	r6, r3
 8000616:	42af      	cmp	r7, r5
 8000618:	d9c4      	bls.n	80005a4 <__udivmoddi4+0x4c>
 800061a:	2200      	movs	r2, #0
 800061c:	2300      	movs	r3, #0
 800061e:	9200      	str	r2, [sp, #0]
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	4643      	mov	r3, r8
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0d9      	beq.n	80005dc <__udivmoddi4+0x84>
 8000628:	07fb      	lsls	r3, r7, #31
 800062a:	0872      	lsrs	r2, r6, #1
 800062c:	431a      	orrs	r2, r3
 800062e:	4646      	mov	r6, r8
 8000630:	087b      	lsrs	r3, r7, #1
 8000632:	e00e      	b.n	8000652 <__udivmoddi4+0xfa>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d101      	bne.n	800063c <__udivmoddi4+0xe4>
 8000638:	42a2      	cmp	r2, r4
 800063a:	d80c      	bhi.n	8000656 <__udivmoddi4+0xfe>
 800063c:	1aa4      	subs	r4, r4, r2
 800063e:	419d      	sbcs	r5, r3
 8000640:	2001      	movs	r0, #1
 8000642:	1924      	adds	r4, r4, r4
 8000644:	416d      	adcs	r5, r5
 8000646:	2100      	movs	r1, #0
 8000648:	3e01      	subs	r6, #1
 800064a:	1824      	adds	r4, r4, r0
 800064c:	414d      	adcs	r5, r1
 800064e:	2e00      	cmp	r6, #0
 8000650:	d006      	beq.n	8000660 <__udivmoddi4+0x108>
 8000652:	42ab      	cmp	r3, r5
 8000654:	d9ee      	bls.n	8000634 <__udivmoddi4+0xdc>
 8000656:	3e01      	subs	r6, #1
 8000658:	1924      	adds	r4, r4, r4
 800065a:	416d      	adcs	r5, r5
 800065c:	2e00      	cmp	r6, #0
 800065e:	d1f8      	bne.n	8000652 <__udivmoddi4+0xfa>
 8000660:	9800      	ldr	r0, [sp, #0]
 8000662:	9901      	ldr	r1, [sp, #4]
 8000664:	465b      	mov	r3, fp
 8000666:	1900      	adds	r0, r0, r4
 8000668:	4169      	adcs	r1, r5
 800066a:	2b00      	cmp	r3, #0
 800066c:	db24      	blt.n	80006b8 <__udivmoddi4+0x160>
 800066e:	002b      	movs	r3, r5
 8000670:	465a      	mov	r2, fp
 8000672:	4644      	mov	r4, r8
 8000674:	40d3      	lsrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	40e2      	lsrs	r2, r4
 800067a:	001c      	movs	r4, r3
 800067c:	465b      	mov	r3, fp
 800067e:	0015      	movs	r5, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	db2a      	blt.n	80006da <__udivmoddi4+0x182>
 8000684:	0026      	movs	r6, r4
 8000686:	409e      	lsls	r6, r3
 8000688:	0033      	movs	r3, r6
 800068a:	0026      	movs	r6, r4
 800068c:	4647      	mov	r7, r8
 800068e:	40be      	lsls	r6, r7
 8000690:	0032      	movs	r2, r6
 8000692:	1a80      	subs	r0, r0, r2
 8000694:	4199      	sbcs	r1, r3
 8000696:	9000      	str	r0, [sp, #0]
 8000698:	9101      	str	r1, [sp, #4]
 800069a:	e79f      	b.n	80005dc <__udivmoddi4+0x84>
 800069c:	42a3      	cmp	r3, r4
 800069e:	d8bc      	bhi.n	800061a <__udivmoddi4+0xc2>
 80006a0:	e783      	b.n	80005aa <__udivmoddi4+0x52>
 80006a2:	4642      	mov	r2, r8
 80006a4:	2320      	movs	r3, #32
 80006a6:	2100      	movs	r1, #0
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	9100      	str	r1, [sp, #0]
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	2201      	movs	r2, #1
 80006b2:	40da      	lsrs	r2, r3
 80006b4:	9201      	str	r2, [sp, #4]
 80006b6:	e786      	b.n	80005c6 <__udivmoddi4+0x6e>
 80006b8:	4642      	mov	r2, r8
 80006ba:	2320      	movs	r3, #32
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	002a      	movs	r2, r5
 80006c0:	4646      	mov	r6, r8
 80006c2:	409a      	lsls	r2, r3
 80006c4:	0023      	movs	r3, r4
 80006c6:	40f3      	lsrs	r3, r6
 80006c8:	4644      	mov	r4, r8
 80006ca:	4313      	orrs	r3, r2
 80006cc:	002a      	movs	r2, r5
 80006ce:	40e2      	lsrs	r2, r4
 80006d0:	001c      	movs	r4, r3
 80006d2:	465b      	mov	r3, fp
 80006d4:	0015      	movs	r5, r2
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	dad4      	bge.n	8000684 <__udivmoddi4+0x12c>
 80006da:	4642      	mov	r2, r8
 80006dc:	002f      	movs	r7, r5
 80006de:	2320      	movs	r3, #32
 80006e0:	0026      	movs	r6, r4
 80006e2:	4097      	lsls	r7, r2
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	40de      	lsrs	r6, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	4333      	orrs	r3, r6
 80006ec:	e7cd      	b.n	800068a <__udivmoddi4+0x132>
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <__aeabi_dadd>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	464f      	mov	r7, r9
 80006f4:	4646      	mov	r6, r8
 80006f6:	46d6      	mov	lr, sl
 80006f8:	000d      	movs	r5, r1
 80006fa:	0004      	movs	r4, r0
 80006fc:	b5c0      	push	{r6, r7, lr}
 80006fe:	001f      	movs	r7, r3
 8000700:	0011      	movs	r1, r2
 8000702:	0328      	lsls	r0, r5, #12
 8000704:	0f62      	lsrs	r2, r4, #29
 8000706:	0a40      	lsrs	r0, r0, #9
 8000708:	4310      	orrs	r0, r2
 800070a:	007a      	lsls	r2, r7, #1
 800070c:	0d52      	lsrs	r2, r2, #21
 800070e:	00e3      	lsls	r3, r4, #3
 8000710:	033c      	lsls	r4, r7, #12
 8000712:	4691      	mov	r9, r2
 8000714:	0a64      	lsrs	r4, r4, #9
 8000716:	0ffa      	lsrs	r2, r7, #31
 8000718:	0f4f      	lsrs	r7, r1, #29
 800071a:	006e      	lsls	r6, r5, #1
 800071c:	4327      	orrs	r7, r4
 800071e:	4692      	mov	sl, r2
 8000720:	46b8      	mov	r8, r7
 8000722:	0d76      	lsrs	r6, r6, #21
 8000724:	0fed      	lsrs	r5, r5, #31
 8000726:	00c9      	lsls	r1, r1, #3
 8000728:	4295      	cmp	r5, r2
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x3e>
 800072c:	e099      	b.n	8000862 <__aeabi_dadd+0x172>
 800072e:	464c      	mov	r4, r9
 8000730:	1b34      	subs	r4, r6, r4
 8000732:	46a4      	mov	ip, r4
 8000734:	2c00      	cmp	r4, #0
 8000736:	dc00      	bgt.n	800073a <__aeabi_dadd+0x4a>
 8000738:	e07c      	b.n	8000834 <__aeabi_dadd+0x144>
 800073a:	464a      	mov	r2, r9
 800073c:	2a00      	cmp	r2, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_dadd+0x52>
 8000740:	e0b8      	b.n	80008b4 <__aeabi_dadd+0x1c4>
 8000742:	4ac5      	ldr	r2, [pc, #788]	; (8000a58 <__aeabi_dadd+0x368>)
 8000744:	4296      	cmp	r6, r2
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x5a>
 8000748:	e11c      	b.n	8000984 <__aeabi_dadd+0x294>
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	003c      	movs	r4, r7
 800074e:	0412      	lsls	r2, r2, #16
 8000750:	4314      	orrs	r4, r2
 8000752:	46a0      	mov	r8, r4
 8000754:	4662      	mov	r2, ip
 8000756:	2a38      	cmp	r2, #56	; 0x38
 8000758:	dd00      	ble.n	800075c <__aeabi_dadd+0x6c>
 800075a:	e161      	b.n	8000a20 <__aeabi_dadd+0x330>
 800075c:	2a1f      	cmp	r2, #31
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0x72>
 8000760:	e1cc      	b.n	8000afc <__aeabi_dadd+0x40c>
 8000762:	4664      	mov	r4, ip
 8000764:	2220      	movs	r2, #32
 8000766:	1b12      	subs	r2, r2, r4
 8000768:	4644      	mov	r4, r8
 800076a:	4094      	lsls	r4, r2
 800076c:	000f      	movs	r7, r1
 800076e:	46a1      	mov	r9, r4
 8000770:	4664      	mov	r4, ip
 8000772:	4091      	lsls	r1, r2
 8000774:	40e7      	lsrs	r7, r4
 8000776:	464c      	mov	r4, r9
 8000778:	1e4a      	subs	r2, r1, #1
 800077a:	4191      	sbcs	r1, r2
 800077c:	433c      	orrs	r4, r7
 800077e:	4642      	mov	r2, r8
 8000780:	4321      	orrs	r1, r4
 8000782:	4664      	mov	r4, ip
 8000784:	40e2      	lsrs	r2, r4
 8000786:	1a80      	subs	r0, r0, r2
 8000788:	1a5c      	subs	r4, r3, r1
 800078a:	42a3      	cmp	r3, r4
 800078c:	419b      	sbcs	r3, r3
 800078e:	425f      	negs	r7, r3
 8000790:	1bc7      	subs	r7, r0, r7
 8000792:	023b      	lsls	r3, r7, #8
 8000794:	d400      	bmi.n	8000798 <__aeabi_dadd+0xa8>
 8000796:	e0d0      	b.n	800093a <__aeabi_dadd+0x24a>
 8000798:	027f      	lsls	r7, r7, #9
 800079a:	0a7f      	lsrs	r7, r7, #9
 800079c:	2f00      	cmp	r7, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0xb2>
 80007a0:	e0ff      	b.n	80009a2 <__aeabi_dadd+0x2b2>
 80007a2:	0038      	movs	r0, r7
 80007a4:	f001 fd8a 	bl	80022bc <__clzsi2>
 80007a8:	0001      	movs	r1, r0
 80007aa:	3908      	subs	r1, #8
 80007ac:	2320      	movs	r3, #32
 80007ae:	0022      	movs	r2, r4
 80007b0:	1a5b      	subs	r3, r3, r1
 80007b2:	408f      	lsls	r7, r1
 80007b4:	40da      	lsrs	r2, r3
 80007b6:	408c      	lsls	r4, r1
 80007b8:	4317      	orrs	r7, r2
 80007ba:	42b1      	cmp	r1, r6
 80007bc:	da00      	bge.n	80007c0 <__aeabi_dadd+0xd0>
 80007be:	e0ff      	b.n	80009c0 <__aeabi_dadd+0x2d0>
 80007c0:	1b89      	subs	r1, r1, r6
 80007c2:	1c4b      	adds	r3, r1, #1
 80007c4:	2b1f      	cmp	r3, #31
 80007c6:	dd00      	ble.n	80007ca <__aeabi_dadd+0xda>
 80007c8:	e0a8      	b.n	800091c <__aeabi_dadd+0x22c>
 80007ca:	2220      	movs	r2, #32
 80007cc:	0039      	movs	r1, r7
 80007ce:	1ad2      	subs	r2, r2, r3
 80007d0:	0020      	movs	r0, r4
 80007d2:	4094      	lsls	r4, r2
 80007d4:	4091      	lsls	r1, r2
 80007d6:	40d8      	lsrs	r0, r3
 80007d8:	1e62      	subs	r2, r4, #1
 80007da:	4194      	sbcs	r4, r2
 80007dc:	40df      	lsrs	r7, r3
 80007de:	2600      	movs	r6, #0
 80007e0:	4301      	orrs	r1, r0
 80007e2:	430c      	orrs	r4, r1
 80007e4:	0763      	lsls	r3, r4, #29
 80007e6:	d009      	beq.n	80007fc <__aeabi_dadd+0x10c>
 80007e8:	230f      	movs	r3, #15
 80007ea:	4023      	ands	r3, r4
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d005      	beq.n	80007fc <__aeabi_dadd+0x10c>
 80007f0:	1d23      	adds	r3, r4, #4
 80007f2:	42a3      	cmp	r3, r4
 80007f4:	41a4      	sbcs	r4, r4
 80007f6:	4264      	negs	r4, r4
 80007f8:	193f      	adds	r7, r7, r4
 80007fa:	001c      	movs	r4, r3
 80007fc:	023b      	lsls	r3, r7, #8
 80007fe:	d400      	bmi.n	8000802 <__aeabi_dadd+0x112>
 8000800:	e09e      	b.n	8000940 <__aeabi_dadd+0x250>
 8000802:	4b95      	ldr	r3, [pc, #596]	; (8000a58 <__aeabi_dadd+0x368>)
 8000804:	3601      	adds	r6, #1
 8000806:	429e      	cmp	r6, r3
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x11c>
 800080a:	e0b7      	b.n	800097c <__aeabi_dadd+0x28c>
 800080c:	4a93      	ldr	r2, [pc, #588]	; (8000a5c <__aeabi_dadd+0x36c>)
 800080e:	08e4      	lsrs	r4, r4, #3
 8000810:	4017      	ands	r7, r2
 8000812:	077b      	lsls	r3, r7, #29
 8000814:	0571      	lsls	r1, r6, #21
 8000816:	027f      	lsls	r7, r7, #9
 8000818:	4323      	orrs	r3, r4
 800081a:	0b3f      	lsrs	r7, r7, #12
 800081c:	0d4a      	lsrs	r2, r1, #21
 800081e:	0512      	lsls	r2, r2, #20
 8000820:	433a      	orrs	r2, r7
 8000822:	07ed      	lsls	r5, r5, #31
 8000824:	432a      	orrs	r2, r5
 8000826:	0018      	movs	r0, r3
 8000828:	0011      	movs	r1, r2
 800082a:	bce0      	pop	{r5, r6, r7}
 800082c:	46ba      	mov	sl, r7
 800082e:	46b1      	mov	r9, r6
 8000830:	46a8      	mov	r8, r5
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000834:	2c00      	cmp	r4, #0
 8000836:	d04b      	beq.n	80008d0 <__aeabi_dadd+0x1e0>
 8000838:	464c      	mov	r4, r9
 800083a:	1ba4      	subs	r4, r4, r6
 800083c:	46a4      	mov	ip, r4
 800083e:	2e00      	cmp	r6, #0
 8000840:	d000      	beq.n	8000844 <__aeabi_dadd+0x154>
 8000842:	e123      	b.n	8000a8c <__aeabi_dadd+0x39c>
 8000844:	0004      	movs	r4, r0
 8000846:	431c      	orrs	r4, r3
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x15c>
 800084a:	e1af      	b.n	8000bac <__aeabi_dadd+0x4bc>
 800084c:	4662      	mov	r2, ip
 800084e:	1e54      	subs	r4, r2, #1
 8000850:	2a01      	cmp	r2, #1
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x166>
 8000854:	e215      	b.n	8000c82 <__aeabi_dadd+0x592>
 8000856:	4d80      	ldr	r5, [pc, #512]	; (8000a58 <__aeabi_dadd+0x368>)
 8000858:	45ac      	cmp	ip, r5
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x16e>
 800085c:	e1c8      	b.n	8000bf0 <__aeabi_dadd+0x500>
 800085e:	46a4      	mov	ip, r4
 8000860:	e11b      	b.n	8000a9a <__aeabi_dadd+0x3aa>
 8000862:	464a      	mov	r2, r9
 8000864:	1ab2      	subs	r2, r6, r2
 8000866:	4694      	mov	ip, r2
 8000868:	2a00      	cmp	r2, #0
 800086a:	dc00      	bgt.n	800086e <__aeabi_dadd+0x17e>
 800086c:	e0ac      	b.n	80009c8 <__aeabi_dadd+0x2d8>
 800086e:	464a      	mov	r2, r9
 8000870:	2a00      	cmp	r2, #0
 8000872:	d043      	beq.n	80008fc <__aeabi_dadd+0x20c>
 8000874:	4a78      	ldr	r2, [pc, #480]	; (8000a58 <__aeabi_dadd+0x368>)
 8000876:	4296      	cmp	r6, r2
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x18c>
 800087a:	e1af      	b.n	8000bdc <__aeabi_dadd+0x4ec>
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	003c      	movs	r4, r7
 8000880:	0412      	lsls	r2, r2, #16
 8000882:	4314      	orrs	r4, r2
 8000884:	46a0      	mov	r8, r4
 8000886:	4662      	mov	r2, ip
 8000888:	2a38      	cmp	r2, #56	; 0x38
 800088a:	dc67      	bgt.n	800095c <__aeabi_dadd+0x26c>
 800088c:	2a1f      	cmp	r2, #31
 800088e:	dc00      	bgt.n	8000892 <__aeabi_dadd+0x1a2>
 8000890:	e15f      	b.n	8000b52 <__aeabi_dadd+0x462>
 8000892:	4647      	mov	r7, r8
 8000894:	3a20      	subs	r2, #32
 8000896:	40d7      	lsrs	r7, r2
 8000898:	4662      	mov	r2, ip
 800089a:	2a20      	cmp	r2, #32
 800089c:	d005      	beq.n	80008aa <__aeabi_dadd+0x1ba>
 800089e:	4664      	mov	r4, ip
 80008a0:	2240      	movs	r2, #64	; 0x40
 80008a2:	1b12      	subs	r2, r2, r4
 80008a4:	4644      	mov	r4, r8
 80008a6:	4094      	lsls	r4, r2
 80008a8:	4321      	orrs	r1, r4
 80008aa:	1e4a      	subs	r2, r1, #1
 80008ac:	4191      	sbcs	r1, r2
 80008ae:	000c      	movs	r4, r1
 80008b0:	433c      	orrs	r4, r7
 80008b2:	e057      	b.n	8000964 <__aeabi_dadd+0x274>
 80008b4:	003a      	movs	r2, r7
 80008b6:	430a      	orrs	r2, r1
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x1cc>
 80008ba:	e105      	b.n	8000ac8 <__aeabi_dadd+0x3d8>
 80008bc:	0022      	movs	r2, r4
 80008be:	3a01      	subs	r2, #1
 80008c0:	2c01      	cmp	r4, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x1d6>
 80008c4:	e182      	b.n	8000bcc <__aeabi_dadd+0x4dc>
 80008c6:	4c64      	ldr	r4, [pc, #400]	; (8000a58 <__aeabi_dadd+0x368>)
 80008c8:	45a4      	cmp	ip, r4
 80008ca:	d05b      	beq.n	8000984 <__aeabi_dadd+0x294>
 80008cc:	4694      	mov	ip, r2
 80008ce:	e741      	b.n	8000754 <__aeabi_dadd+0x64>
 80008d0:	4c63      	ldr	r4, [pc, #396]	; (8000a60 <__aeabi_dadd+0x370>)
 80008d2:	1c77      	adds	r7, r6, #1
 80008d4:	4227      	tst	r7, r4
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x1ea>
 80008d8:	e0c4      	b.n	8000a64 <__aeabi_dadd+0x374>
 80008da:	0004      	movs	r4, r0
 80008dc:	431c      	orrs	r4, r3
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d000      	beq.n	80008e4 <__aeabi_dadd+0x1f4>
 80008e2:	e169      	b.n	8000bb8 <__aeabi_dadd+0x4c8>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x1fa>
 80008e8:	e1bf      	b.n	8000c6a <__aeabi_dadd+0x57a>
 80008ea:	4644      	mov	r4, r8
 80008ec:	430c      	orrs	r4, r1
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x202>
 80008f0:	e1d0      	b.n	8000c94 <__aeabi_dadd+0x5a4>
 80008f2:	0742      	lsls	r2, r0, #29
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	4313      	orrs	r3, r2
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	e029      	b.n	8000950 <__aeabi_dadd+0x260>
 80008fc:	003a      	movs	r2, r7
 80008fe:	430a      	orrs	r2, r1
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x214>
 8000902:	e170      	b.n	8000be6 <__aeabi_dadd+0x4f6>
 8000904:	4662      	mov	r2, ip
 8000906:	4664      	mov	r4, ip
 8000908:	3a01      	subs	r2, #1
 800090a:	2c01      	cmp	r4, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x220>
 800090e:	e0e0      	b.n	8000ad2 <__aeabi_dadd+0x3e2>
 8000910:	4c51      	ldr	r4, [pc, #324]	; (8000a58 <__aeabi_dadd+0x368>)
 8000912:	45a4      	cmp	ip, r4
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x228>
 8000916:	e161      	b.n	8000bdc <__aeabi_dadd+0x4ec>
 8000918:	4694      	mov	ip, r2
 800091a:	e7b4      	b.n	8000886 <__aeabi_dadd+0x196>
 800091c:	003a      	movs	r2, r7
 800091e:	391f      	subs	r1, #31
 8000920:	40ca      	lsrs	r2, r1
 8000922:	0011      	movs	r1, r2
 8000924:	2b20      	cmp	r3, #32
 8000926:	d003      	beq.n	8000930 <__aeabi_dadd+0x240>
 8000928:	2240      	movs	r2, #64	; 0x40
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	409f      	lsls	r7, r3
 800092e:	433c      	orrs	r4, r7
 8000930:	1e63      	subs	r3, r4, #1
 8000932:	419c      	sbcs	r4, r3
 8000934:	2700      	movs	r7, #0
 8000936:	2600      	movs	r6, #0
 8000938:	430c      	orrs	r4, r1
 800093a:	0763      	lsls	r3, r4, #29
 800093c:	d000      	beq.n	8000940 <__aeabi_dadd+0x250>
 800093e:	e753      	b.n	80007e8 <__aeabi_dadd+0xf8>
 8000940:	46b4      	mov	ip, r6
 8000942:	08e4      	lsrs	r4, r4, #3
 8000944:	077b      	lsls	r3, r7, #29
 8000946:	4323      	orrs	r3, r4
 8000948:	08f8      	lsrs	r0, r7, #3
 800094a:	4a43      	ldr	r2, [pc, #268]	; (8000a58 <__aeabi_dadd+0x368>)
 800094c:	4594      	cmp	ip, r2
 800094e:	d01d      	beq.n	800098c <__aeabi_dadd+0x29c>
 8000950:	4662      	mov	r2, ip
 8000952:	0307      	lsls	r7, r0, #12
 8000954:	0552      	lsls	r2, r2, #21
 8000956:	0b3f      	lsrs	r7, r7, #12
 8000958:	0d52      	lsrs	r2, r2, #21
 800095a:	e760      	b.n	800081e <__aeabi_dadd+0x12e>
 800095c:	4644      	mov	r4, r8
 800095e:	430c      	orrs	r4, r1
 8000960:	1e62      	subs	r2, r4, #1
 8000962:	4194      	sbcs	r4, r2
 8000964:	18e4      	adds	r4, r4, r3
 8000966:	429c      	cmp	r4, r3
 8000968:	419b      	sbcs	r3, r3
 800096a:	425f      	negs	r7, r3
 800096c:	183f      	adds	r7, r7, r0
 800096e:	023b      	lsls	r3, r7, #8
 8000970:	d5e3      	bpl.n	800093a <__aeabi_dadd+0x24a>
 8000972:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <__aeabi_dadd+0x368>)
 8000974:	3601      	adds	r6, #1
 8000976:	429e      	cmp	r6, r3
 8000978:	d000      	beq.n	800097c <__aeabi_dadd+0x28c>
 800097a:	e0b5      	b.n	8000ae8 <__aeabi_dadd+0x3f8>
 800097c:	0032      	movs	r2, r6
 800097e:	2700      	movs	r7, #0
 8000980:	2300      	movs	r3, #0
 8000982:	e74c      	b.n	800081e <__aeabi_dadd+0x12e>
 8000984:	0742      	lsls	r2, r0, #29
 8000986:	08db      	lsrs	r3, r3, #3
 8000988:	4313      	orrs	r3, r2
 800098a:	08c0      	lsrs	r0, r0, #3
 800098c:	001a      	movs	r2, r3
 800098e:	4302      	orrs	r2, r0
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x2a4>
 8000992:	e1e1      	b.n	8000d58 <__aeabi_dadd+0x668>
 8000994:	2780      	movs	r7, #128	; 0x80
 8000996:	033f      	lsls	r7, r7, #12
 8000998:	4307      	orrs	r7, r0
 800099a:	033f      	lsls	r7, r7, #12
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <__aeabi_dadd+0x368>)
 800099e:	0b3f      	lsrs	r7, r7, #12
 80009a0:	e73d      	b.n	800081e <__aeabi_dadd+0x12e>
 80009a2:	0020      	movs	r0, r4
 80009a4:	f001 fc8a 	bl	80022bc <__clzsi2>
 80009a8:	0001      	movs	r1, r0
 80009aa:	3118      	adds	r1, #24
 80009ac:	291f      	cmp	r1, #31
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_dadd+0x2c2>
 80009b0:	e6fc      	b.n	80007ac <__aeabi_dadd+0xbc>
 80009b2:	3808      	subs	r0, #8
 80009b4:	4084      	lsls	r4, r0
 80009b6:	0027      	movs	r7, r4
 80009b8:	2400      	movs	r4, #0
 80009ba:	42b1      	cmp	r1, r6
 80009bc:	db00      	blt.n	80009c0 <__aeabi_dadd+0x2d0>
 80009be:	e6ff      	b.n	80007c0 <__aeabi_dadd+0xd0>
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <__aeabi_dadd+0x36c>)
 80009c2:	1a76      	subs	r6, r6, r1
 80009c4:	4017      	ands	r7, r2
 80009c6:	e70d      	b.n	80007e4 <__aeabi_dadd+0xf4>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02f      	beq.n	8000a2c <__aeabi_dadd+0x33c>
 80009cc:	464a      	mov	r2, r9
 80009ce:	1b92      	subs	r2, r2, r6
 80009d0:	4694      	mov	ip, r2
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x2e8>
 80009d6:	e0ad      	b.n	8000b34 <__aeabi_dadd+0x444>
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <__aeabi_dadd+0x368>)
 80009da:	4591      	cmp	r9, r2
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x2f0>
 80009de:	e10f      	b.n	8000c00 <__aeabi_dadd+0x510>
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	0412      	lsls	r2, r2, #16
 80009e4:	4310      	orrs	r0, r2
 80009e6:	4662      	mov	r2, ip
 80009e8:	2a38      	cmp	r2, #56	; 0x38
 80009ea:	dd00      	ble.n	80009ee <__aeabi_dadd+0x2fe>
 80009ec:	e10f      	b.n	8000c0e <__aeabi_dadd+0x51e>
 80009ee:	2a1f      	cmp	r2, #31
 80009f0:	dd00      	ble.n	80009f4 <__aeabi_dadd+0x304>
 80009f2:	e180      	b.n	8000cf6 <__aeabi_dadd+0x606>
 80009f4:	4664      	mov	r4, ip
 80009f6:	2220      	movs	r2, #32
 80009f8:	001e      	movs	r6, r3
 80009fa:	1b12      	subs	r2, r2, r4
 80009fc:	4667      	mov	r7, ip
 80009fe:	0004      	movs	r4, r0
 8000a00:	4093      	lsls	r3, r2
 8000a02:	4094      	lsls	r4, r2
 8000a04:	40fe      	lsrs	r6, r7
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	4193      	sbcs	r3, r2
 8000a0a:	40f8      	lsrs	r0, r7
 8000a0c:	4334      	orrs	r4, r6
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	4480      	add	r8, r0
 8000a12:	1864      	adds	r4, r4, r1
 8000a14:	428c      	cmp	r4, r1
 8000a16:	41bf      	sbcs	r7, r7
 8000a18:	427f      	negs	r7, r7
 8000a1a:	464e      	mov	r6, r9
 8000a1c:	4447      	add	r7, r8
 8000a1e:	e7a6      	b.n	800096e <__aeabi_dadd+0x27e>
 8000a20:	4642      	mov	r2, r8
 8000a22:	430a      	orrs	r2, r1
 8000a24:	0011      	movs	r1, r2
 8000a26:	1e4a      	subs	r2, r1, #1
 8000a28:	4191      	sbcs	r1, r2
 8000a2a:	e6ad      	b.n	8000788 <__aeabi_dadd+0x98>
 8000a2c:	4c0c      	ldr	r4, [pc, #48]	; (8000a60 <__aeabi_dadd+0x370>)
 8000a2e:	1c72      	adds	r2, r6, #1
 8000a30:	4222      	tst	r2, r4
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x346>
 8000a34:	e0a1      	b.n	8000b7a <__aeabi_dadd+0x48a>
 8000a36:	0002      	movs	r2, r0
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_dadd+0x350>
 8000a3e:	e0fa      	b.n	8000c36 <__aeabi_dadd+0x546>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x356>
 8000a44:	e145      	b.n	8000cd2 <__aeabi_dadd+0x5e2>
 8000a46:	003a      	movs	r2, r7
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x35e>
 8000a4c:	e146      	b.n	8000cdc <__aeabi_dadd+0x5ec>
 8000a4e:	0742      	lsls	r2, r0, #29
 8000a50:	08db      	lsrs	r3, r3, #3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	e77b      	b.n	8000950 <__aeabi_dadd+0x260>
 8000a58:	000007ff 	.word	0x000007ff
 8000a5c:	ff7fffff 	.word	0xff7fffff
 8000a60:	000007fe 	.word	0x000007fe
 8000a64:	4647      	mov	r7, r8
 8000a66:	1a5c      	subs	r4, r3, r1
 8000a68:	1bc2      	subs	r2, r0, r7
 8000a6a:	42a3      	cmp	r3, r4
 8000a6c:	41bf      	sbcs	r7, r7
 8000a6e:	427f      	negs	r7, r7
 8000a70:	46b9      	mov	r9, r7
 8000a72:	0017      	movs	r7, r2
 8000a74:	464a      	mov	r2, r9
 8000a76:	1abf      	subs	r7, r7, r2
 8000a78:	023a      	lsls	r2, r7, #8
 8000a7a:	d500      	bpl.n	8000a7e <__aeabi_dadd+0x38e>
 8000a7c:	e08d      	b.n	8000b9a <__aeabi_dadd+0x4aa>
 8000a7e:	0023      	movs	r3, r4
 8000a80:	433b      	orrs	r3, r7
 8000a82:	d000      	beq.n	8000a86 <__aeabi_dadd+0x396>
 8000a84:	e68a      	b.n	800079c <__aeabi_dadd+0xac>
 8000a86:	2000      	movs	r0, #0
 8000a88:	2500      	movs	r5, #0
 8000a8a:	e761      	b.n	8000950 <__aeabi_dadd+0x260>
 8000a8c:	4cb4      	ldr	r4, [pc, #720]	; (8000d60 <__aeabi_dadd+0x670>)
 8000a8e:	45a1      	cmp	r9, r4
 8000a90:	d100      	bne.n	8000a94 <__aeabi_dadd+0x3a4>
 8000a92:	e0ad      	b.n	8000bf0 <__aeabi_dadd+0x500>
 8000a94:	2480      	movs	r4, #128	; 0x80
 8000a96:	0424      	lsls	r4, r4, #16
 8000a98:	4320      	orrs	r0, r4
 8000a9a:	4664      	mov	r4, ip
 8000a9c:	2c38      	cmp	r4, #56	; 0x38
 8000a9e:	dc3d      	bgt.n	8000b1c <__aeabi_dadd+0x42c>
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	2c1f      	cmp	r4, #31
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0x3b8>
 8000aa6:	e0b7      	b.n	8000c18 <__aeabi_dadd+0x528>
 8000aa8:	2520      	movs	r5, #32
 8000aaa:	001e      	movs	r6, r3
 8000aac:	1b2d      	subs	r5, r5, r4
 8000aae:	0004      	movs	r4, r0
 8000ab0:	40ab      	lsls	r3, r5
 8000ab2:	40ac      	lsls	r4, r5
 8000ab4:	40d6      	lsrs	r6, r2
 8000ab6:	40d0      	lsrs	r0, r2
 8000ab8:	4642      	mov	r2, r8
 8000aba:	1e5d      	subs	r5, r3, #1
 8000abc:	41ab      	sbcs	r3, r5
 8000abe:	4334      	orrs	r4, r6
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	4690      	mov	r8, r2
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	e02c      	b.n	8000b22 <__aeabi_dadd+0x432>
 8000ac8:	0742      	lsls	r2, r0, #29
 8000aca:	08db      	lsrs	r3, r3, #3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	08c0      	lsrs	r0, r0, #3
 8000ad0:	e73b      	b.n	800094a <__aeabi_dadd+0x25a>
 8000ad2:	185c      	adds	r4, r3, r1
 8000ad4:	429c      	cmp	r4, r3
 8000ad6:	419b      	sbcs	r3, r3
 8000ad8:	4440      	add	r0, r8
 8000ada:	425b      	negs	r3, r3
 8000adc:	18c7      	adds	r7, r0, r3
 8000ade:	2601      	movs	r6, #1
 8000ae0:	023b      	lsls	r3, r7, #8
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_dadd+0x3f6>
 8000ae4:	e729      	b.n	800093a <__aeabi_dadd+0x24a>
 8000ae6:	2602      	movs	r6, #2
 8000ae8:	4a9e      	ldr	r2, [pc, #632]	; (8000d64 <__aeabi_dadd+0x674>)
 8000aea:	0863      	lsrs	r3, r4, #1
 8000aec:	4017      	ands	r7, r2
 8000aee:	2201      	movs	r2, #1
 8000af0:	4014      	ands	r4, r2
 8000af2:	431c      	orrs	r4, r3
 8000af4:	07fb      	lsls	r3, r7, #31
 8000af6:	431c      	orrs	r4, r3
 8000af8:	087f      	lsrs	r7, r7, #1
 8000afa:	e673      	b.n	80007e4 <__aeabi_dadd+0xf4>
 8000afc:	4644      	mov	r4, r8
 8000afe:	3a20      	subs	r2, #32
 8000b00:	40d4      	lsrs	r4, r2
 8000b02:	4662      	mov	r2, ip
 8000b04:	2a20      	cmp	r2, #32
 8000b06:	d005      	beq.n	8000b14 <__aeabi_dadd+0x424>
 8000b08:	4667      	mov	r7, ip
 8000b0a:	2240      	movs	r2, #64	; 0x40
 8000b0c:	1bd2      	subs	r2, r2, r7
 8000b0e:	4647      	mov	r7, r8
 8000b10:	4097      	lsls	r7, r2
 8000b12:	4339      	orrs	r1, r7
 8000b14:	1e4a      	subs	r2, r1, #1
 8000b16:	4191      	sbcs	r1, r2
 8000b18:	4321      	orrs	r1, r4
 8000b1a:	e635      	b.n	8000788 <__aeabi_dadd+0x98>
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	1e58      	subs	r0, r3, #1
 8000b20:	4183      	sbcs	r3, r0
 8000b22:	1acc      	subs	r4, r1, r3
 8000b24:	42a1      	cmp	r1, r4
 8000b26:	41bf      	sbcs	r7, r7
 8000b28:	4643      	mov	r3, r8
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	4655      	mov	r5, sl
 8000b2e:	464e      	mov	r6, r9
 8000b30:	1bdf      	subs	r7, r3, r7
 8000b32:	e62e      	b.n	8000792 <__aeabi_dadd+0xa2>
 8000b34:	0002      	movs	r2, r0
 8000b36:	431a      	orrs	r2, r3
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x44c>
 8000b3a:	e0bd      	b.n	8000cb8 <__aeabi_dadd+0x5c8>
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	4664      	mov	r4, ip
 8000b40:	3a01      	subs	r2, #1
 8000b42:	2c01      	cmp	r4, #1
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x458>
 8000b46:	e0e5      	b.n	8000d14 <__aeabi_dadd+0x624>
 8000b48:	4c85      	ldr	r4, [pc, #532]	; (8000d60 <__aeabi_dadd+0x670>)
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d058      	beq.n	8000c00 <__aeabi_dadd+0x510>
 8000b4e:	4694      	mov	ip, r2
 8000b50:	e749      	b.n	80009e6 <__aeabi_dadd+0x2f6>
 8000b52:	4664      	mov	r4, ip
 8000b54:	2220      	movs	r2, #32
 8000b56:	1b12      	subs	r2, r2, r4
 8000b58:	4644      	mov	r4, r8
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	000f      	movs	r7, r1
 8000b5e:	46a1      	mov	r9, r4
 8000b60:	4664      	mov	r4, ip
 8000b62:	4091      	lsls	r1, r2
 8000b64:	40e7      	lsrs	r7, r4
 8000b66:	464c      	mov	r4, r9
 8000b68:	1e4a      	subs	r2, r1, #1
 8000b6a:	4191      	sbcs	r1, r2
 8000b6c:	433c      	orrs	r4, r7
 8000b6e:	4642      	mov	r2, r8
 8000b70:	430c      	orrs	r4, r1
 8000b72:	4661      	mov	r1, ip
 8000b74:	40ca      	lsrs	r2, r1
 8000b76:	1880      	adds	r0, r0, r2
 8000b78:	e6f4      	b.n	8000964 <__aeabi_dadd+0x274>
 8000b7a:	4c79      	ldr	r4, [pc, #484]	; (8000d60 <__aeabi_dadd+0x670>)
 8000b7c:	42a2      	cmp	r2, r4
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x492>
 8000b80:	e6fd      	b.n	800097e <__aeabi_dadd+0x28e>
 8000b82:	1859      	adds	r1, r3, r1
 8000b84:	4299      	cmp	r1, r3
 8000b86:	419b      	sbcs	r3, r3
 8000b88:	4440      	add	r0, r8
 8000b8a:	425f      	negs	r7, r3
 8000b8c:	19c7      	adds	r7, r0, r7
 8000b8e:	07fc      	lsls	r4, r7, #31
 8000b90:	0849      	lsrs	r1, r1, #1
 8000b92:	0016      	movs	r6, r2
 8000b94:	430c      	orrs	r4, r1
 8000b96:	087f      	lsrs	r7, r7, #1
 8000b98:	e6cf      	b.n	800093a <__aeabi_dadd+0x24a>
 8000b9a:	1acc      	subs	r4, r1, r3
 8000b9c:	42a1      	cmp	r1, r4
 8000b9e:	41bf      	sbcs	r7, r7
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	427f      	negs	r7, r7
 8000ba4:	1a18      	subs	r0, r3, r0
 8000ba6:	4655      	mov	r5, sl
 8000ba8:	1bc7      	subs	r7, r0, r7
 8000baa:	e5f7      	b.n	800079c <__aeabi_dadd+0xac>
 8000bac:	08c9      	lsrs	r1, r1, #3
 8000bae:	077b      	lsls	r3, r7, #29
 8000bb0:	4655      	mov	r5, sl
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	08f8      	lsrs	r0, r7, #3
 8000bb6:	e6c8      	b.n	800094a <__aeabi_dadd+0x25a>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d000      	beq.n	8000bbe <__aeabi_dadd+0x4ce>
 8000bbc:	e081      	b.n	8000cc2 <__aeabi_dadd+0x5d2>
 8000bbe:	4643      	mov	r3, r8
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	d115      	bne.n	8000bf0 <__aeabi_dadd+0x500>
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	0300      	lsls	r0, r0, #12
 8000bca:	e6e3      	b.n	8000994 <__aeabi_dadd+0x2a4>
 8000bcc:	1a5c      	subs	r4, r3, r1
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	419b      	sbcs	r3, r3
 8000bd2:	1bc7      	subs	r7, r0, r7
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	2601      	movs	r6, #1
 8000bd8:	1aff      	subs	r7, r7, r3
 8000bda:	e5da      	b.n	8000792 <__aeabi_dadd+0xa2>
 8000bdc:	0742      	lsls	r2, r0, #29
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	08c0      	lsrs	r0, r0, #3
 8000be4:	e6d2      	b.n	800098c <__aeabi_dadd+0x29c>
 8000be6:	0742      	lsls	r2, r0, #29
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	e6ac      	b.n	800094a <__aeabi_dadd+0x25a>
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	08c9      	lsrs	r1, r1, #3
 8000bf6:	075b      	lsls	r3, r3, #29
 8000bf8:	4655      	mov	r5, sl
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	08d0      	lsrs	r0, r2, #3
 8000bfe:	e6c5      	b.n	800098c <__aeabi_dadd+0x29c>
 8000c00:	4643      	mov	r3, r8
 8000c02:	4642      	mov	r2, r8
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	08c9      	lsrs	r1, r1, #3
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	08d0      	lsrs	r0, r2, #3
 8000c0c:	e6be      	b.n	800098c <__aeabi_dadd+0x29c>
 8000c0e:	4303      	orrs	r3, r0
 8000c10:	001c      	movs	r4, r3
 8000c12:	1e63      	subs	r3, r4, #1
 8000c14:	419c      	sbcs	r4, r3
 8000c16:	e6fc      	b.n	8000a12 <__aeabi_dadd+0x322>
 8000c18:	0002      	movs	r2, r0
 8000c1a:	3c20      	subs	r4, #32
 8000c1c:	40e2      	lsrs	r2, r4
 8000c1e:	0014      	movs	r4, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	2a20      	cmp	r2, #32
 8000c24:	d003      	beq.n	8000c2e <__aeabi_dadd+0x53e>
 8000c26:	2540      	movs	r5, #64	; 0x40
 8000c28:	1aad      	subs	r5, r5, r2
 8000c2a:	40a8      	lsls	r0, r5
 8000c2c:	4303      	orrs	r3, r0
 8000c2e:	1e58      	subs	r0, r3, #1
 8000c30:	4183      	sbcs	r3, r0
 8000c32:	4323      	orrs	r3, r4
 8000c34:	e775      	b.n	8000b22 <__aeabi_dadd+0x432>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d0e2      	beq.n	8000c00 <__aeabi_dadd+0x510>
 8000c3a:	003a      	movs	r2, r7
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	d0cd      	beq.n	8000bdc <__aeabi_dadd+0x4ec>
 8000c40:	0742      	lsls	r2, r0, #29
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	08c0      	lsrs	r0, r0, #3
 8000c4a:	0312      	lsls	r2, r2, #12
 8000c4c:	4210      	tst	r0, r2
 8000c4e:	d006      	beq.n	8000c5e <__aeabi_dadd+0x56e>
 8000c50:	08fc      	lsrs	r4, r7, #3
 8000c52:	4214      	tst	r4, r2
 8000c54:	d103      	bne.n	8000c5e <__aeabi_dadd+0x56e>
 8000c56:	0020      	movs	r0, r4
 8000c58:	08cb      	lsrs	r3, r1, #3
 8000c5a:	077a      	lsls	r2, r7, #29
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	0f5a      	lsrs	r2, r3, #29
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	0752      	lsls	r2, r2, #29
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	e690      	b.n	800098c <__aeabi_dadd+0x29c>
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x582>
 8000c70:	e709      	b.n	8000a86 <__aeabi_dadd+0x396>
 8000c72:	4643      	mov	r3, r8
 8000c74:	4642      	mov	r2, r8
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	075b      	lsls	r3, r3, #29
 8000c7a:	4655      	mov	r5, sl
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	08d0      	lsrs	r0, r2, #3
 8000c80:	e666      	b.n	8000950 <__aeabi_dadd+0x260>
 8000c82:	1acc      	subs	r4, r1, r3
 8000c84:	42a1      	cmp	r1, r4
 8000c86:	4189      	sbcs	r1, r1
 8000c88:	1a3f      	subs	r7, r7, r0
 8000c8a:	4249      	negs	r1, r1
 8000c8c:	4655      	mov	r5, sl
 8000c8e:	2601      	movs	r6, #1
 8000c90:	1a7f      	subs	r7, r7, r1
 8000c92:	e57e      	b.n	8000792 <__aeabi_dadd+0xa2>
 8000c94:	4642      	mov	r2, r8
 8000c96:	1a5c      	subs	r4, r3, r1
 8000c98:	1a87      	subs	r7, r0, r2
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	4192      	sbcs	r2, r2
 8000c9e:	4252      	negs	r2, r2
 8000ca0:	1abf      	subs	r7, r7, r2
 8000ca2:	023a      	lsls	r2, r7, #8
 8000ca4:	d53d      	bpl.n	8000d22 <__aeabi_dadd+0x632>
 8000ca6:	1acc      	subs	r4, r1, r3
 8000ca8:	42a1      	cmp	r1, r4
 8000caa:	4189      	sbcs	r1, r1
 8000cac:	4643      	mov	r3, r8
 8000cae:	4249      	negs	r1, r1
 8000cb0:	1a1f      	subs	r7, r3, r0
 8000cb2:	4655      	mov	r5, sl
 8000cb4:	1a7f      	subs	r7, r7, r1
 8000cb6:	e595      	b.n	80007e4 <__aeabi_dadd+0xf4>
 8000cb8:	077b      	lsls	r3, r7, #29
 8000cba:	08c9      	lsrs	r1, r1, #3
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	08f8      	lsrs	r0, r7, #3
 8000cc0:	e643      	b.n	800094a <__aeabi_dadd+0x25a>
 8000cc2:	4644      	mov	r4, r8
 8000cc4:	08db      	lsrs	r3, r3, #3
 8000cc6:	430c      	orrs	r4, r1
 8000cc8:	d130      	bne.n	8000d2c <__aeabi_dadd+0x63c>
 8000cca:	0742      	lsls	r2, r0, #29
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	e65c      	b.n	800098c <__aeabi_dadd+0x29c>
 8000cd2:	077b      	lsls	r3, r7, #29
 8000cd4:	08c9      	lsrs	r1, r1, #3
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	08f8      	lsrs	r0, r7, #3
 8000cda:	e639      	b.n	8000950 <__aeabi_dadd+0x260>
 8000cdc:	185c      	adds	r4, r3, r1
 8000cde:	429c      	cmp	r4, r3
 8000ce0:	419b      	sbcs	r3, r3
 8000ce2:	4440      	add	r0, r8
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	18c7      	adds	r7, r0, r3
 8000ce8:	023b      	lsls	r3, r7, #8
 8000cea:	d400      	bmi.n	8000cee <__aeabi_dadd+0x5fe>
 8000cec:	e625      	b.n	800093a <__aeabi_dadd+0x24a>
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <__aeabi_dadd+0x674>)
 8000cf0:	2601      	movs	r6, #1
 8000cf2:	401f      	ands	r7, r3
 8000cf4:	e621      	b.n	800093a <__aeabi_dadd+0x24a>
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	3a20      	subs	r2, #32
 8000cfa:	40d4      	lsrs	r4, r2
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	2a20      	cmp	r2, #32
 8000d00:	d004      	beq.n	8000d0c <__aeabi_dadd+0x61c>
 8000d02:	2240      	movs	r2, #64	; 0x40
 8000d04:	4666      	mov	r6, ip
 8000d06:	1b92      	subs	r2, r2, r6
 8000d08:	4090      	lsls	r0, r2
 8000d0a:	4303      	orrs	r3, r0
 8000d0c:	1e5a      	subs	r2, r3, #1
 8000d0e:	4193      	sbcs	r3, r2
 8000d10:	431c      	orrs	r4, r3
 8000d12:	e67e      	b.n	8000a12 <__aeabi_dadd+0x322>
 8000d14:	185c      	adds	r4, r3, r1
 8000d16:	428c      	cmp	r4, r1
 8000d18:	4189      	sbcs	r1, r1
 8000d1a:	4440      	add	r0, r8
 8000d1c:	4249      	negs	r1, r1
 8000d1e:	1847      	adds	r7, r0, r1
 8000d20:	e6dd      	b.n	8000ade <__aeabi_dadd+0x3ee>
 8000d22:	0023      	movs	r3, r4
 8000d24:	433b      	orrs	r3, r7
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x63a>
 8000d28:	e6ad      	b.n	8000a86 <__aeabi_dadd+0x396>
 8000d2a:	e606      	b.n	800093a <__aeabi_dadd+0x24a>
 8000d2c:	0744      	lsls	r4, r0, #29
 8000d2e:	4323      	orrs	r3, r4
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	08c0      	lsrs	r0, r0, #3
 8000d34:	0324      	lsls	r4, r4, #12
 8000d36:	4220      	tst	r0, r4
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x65c>
 8000d3a:	4642      	mov	r2, r8
 8000d3c:	08d6      	lsrs	r6, r2, #3
 8000d3e:	4226      	tst	r6, r4
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x65c>
 8000d42:	4655      	mov	r5, sl
 8000d44:	0030      	movs	r0, r6
 8000d46:	08cb      	lsrs	r3, r1, #3
 8000d48:	0751      	lsls	r1, r2, #29
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	0752      	lsls	r2, r2, #29
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e619      	b.n	800098c <__aeabi_dadd+0x29c>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4a01      	ldr	r2, [pc, #4]	; (8000d60 <__aeabi_dadd+0x670>)
 8000d5c:	001f      	movs	r7, r3
 8000d5e:	e55e      	b.n	800081e <__aeabi_dadd+0x12e>
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff

08000d68 <__aeabi_ddiv>:
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	4657      	mov	r7, sl
 8000d6c:	464e      	mov	r6, r9
 8000d6e:	4645      	mov	r5, r8
 8000d70:	46de      	mov	lr, fp
 8000d72:	b5e0      	push	{r5, r6, r7, lr}
 8000d74:	4681      	mov	r9, r0
 8000d76:	0005      	movs	r5, r0
 8000d78:	030c      	lsls	r4, r1, #12
 8000d7a:	0048      	lsls	r0, r1, #1
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	001f      	movs	r7, r3
 8000d80:	b085      	sub	sp, #20
 8000d82:	0b24      	lsrs	r4, r4, #12
 8000d84:	0d40      	lsrs	r0, r0, #21
 8000d86:	0fce      	lsrs	r6, r1, #31
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_ddiv+0x26>
 8000d8c:	e156      	b.n	800103c <__aeabi_ddiv+0x2d4>
 8000d8e:	4bd4      	ldr	r3, [pc, #848]	; (80010e0 <__aeabi_ddiv+0x378>)
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0x2e>
 8000d94:	e172      	b.n	800107c <__aeabi_ddiv+0x314>
 8000d96:	0f6b      	lsrs	r3, r5, #29
 8000d98:	00e4      	lsls	r4, r4, #3
 8000d9a:	431c      	orrs	r4, r3
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	4698      	mov	r8, r3
 8000da4:	4bcf      	ldr	r3, [pc, #828]	; (80010e4 <__aeabi_ddiv+0x37c>)
 8000da6:	00ed      	lsls	r5, r5, #3
 8000da8:	469b      	mov	fp, r3
 8000daa:	2300      	movs	r3, #0
 8000dac:	4699      	mov	r9, r3
 8000dae:	4483      	add	fp, r0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	033c      	lsls	r4, r7, #12
 8000db4:	007b      	lsls	r3, r7, #1
 8000db6:	4650      	mov	r0, sl
 8000db8:	0b24      	lsrs	r4, r4, #12
 8000dba:	0d5b      	lsrs	r3, r3, #21
 8000dbc:	0fff      	lsrs	r7, r7, #31
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x5c>
 8000dc2:	e11f      	b.n	8001004 <__aeabi_ddiv+0x29c>
 8000dc4:	4ac6      	ldr	r2, [pc, #792]	; (80010e0 <__aeabi_ddiv+0x378>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x64>
 8000dca:	e162      	b.n	8001092 <__aeabi_ddiv+0x32a>
 8000dcc:	49c5      	ldr	r1, [pc, #788]	; (80010e4 <__aeabi_ddiv+0x37c>)
 8000dce:	0f42      	lsrs	r2, r0, #29
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	00e4      	lsls	r4, r4, #3
 8000dd4:	4659      	mov	r1, fp
 8000dd6:	4314      	orrs	r4, r2
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	4463      	add	r3, ip
 8000ddc:	0412      	lsls	r2, r2, #16
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	4314      	orrs	r4, r2
 8000de2:	469b      	mov	fp, r3
 8000de4:	00c2      	lsls	r2, r0, #3
 8000de6:	2000      	movs	r0, #0
 8000de8:	0033      	movs	r3, r6
 8000dea:	407b      	eors	r3, r7
 8000dec:	469a      	mov	sl, r3
 8000dee:	464b      	mov	r3, r9
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d827      	bhi.n	8000e44 <__aeabi_ddiv+0xdc>
 8000df4:	49bc      	ldr	r1, [pc, #752]	; (80010e8 <__aeabi_ddiv+0x380>)
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	58cb      	ldr	r3, [r1, r3]
 8000dfa:	469f      	mov	pc, r3
 8000dfc:	46b2      	mov	sl, r6
 8000dfe:	9b00      	ldr	r3, [sp, #0]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d016      	beq.n	8000e32 <__aeabi_ddiv+0xca>
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0xa2>
 8000e08:	e28e      	b.n	8001328 <__aeabi_ddiv+0x5c0>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_ddiv+0xa8>
 8000e0e:	e0d9      	b.n	8000fc4 <__aeabi_ddiv+0x25c>
 8000e10:	2300      	movs	r3, #0
 8000e12:	2400      	movs	r4, #0
 8000e14:	2500      	movs	r5, #0
 8000e16:	4652      	mov	r2, sl
 8000e18:	051b      	lsls	r3, r3, #20
 8000e1a:	4323      	orrs	r3, r4
 8000e1c:	07d2      	lsls	r2, r2, #31
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	0028      	movs	r0, r5
 8000e22:	0019      	movs	r1, r3
 8000e24:	b005      	add	sp, #20
 8000e26:	bcf0      	pop	{r4, r5, r6, r7}
 8000e28:	46bb      	mov	fp, r7
 8000e2a:	46b2      	mov	sl, r6
 8000e2c:	46a9      	mov	r9, r5
 8000e2e:	46a0      	mov	r8, r4
 8000e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e32:	2400      	movs	r4, #0
 8000e34:	2500      	movs	r5, #0
 8000e36:	4baa      	ldr	r3, [pc, #680]	; (80010e0 <__aeabi_ddiv+0x378>)
 8000e38:	e7ed      	b.n	8000e16 <__aeabi_ddiv+0xae>
 8000e3a:	46ba      	mov	sl, r7
 8000e3c:	46a0      	mov	r8, r4
 8000e3e:	0015      	movs	r5, r2
 8000e40:	9000      	str	r0, [sp, #0]
 8000e42:	e7dc      	b.n	8000dfe <__aeabi_ddiv+0x96>
 8000e44:	4544      	cmp	r4, r8
 8000e46:	d200      	bcs.n	8000e4a <__aeabi_ddiv+0xe2>
 8000e48:	e1c7      	b.n	80011da <__aeabi_ddiv+0x472>
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_ddiv+0xe6>
 8000e4c:	e1c2      	b.n	80011d4 <__aeabi_ddiv+0x46c>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	425b      	negs	r3, r3
 8000e52:	469c      	mov	ip, r3
 8000e54:	002e      	movs	r6, r5
 8000e56:	4640      	mov	r0, r8
 8000e58:	2500      	movs	r5, #0
 8000e5a:	44e3      	add	fp, ip
 8000e5c:	0223      	lsls	r3, r4, #8
 8000e5e:	0e14      	lsrs	r4, r2, #24
 8000e60:	431c      	orrs	r4, r3
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	4699      	mov	r9, r3
 8000e66:	0423      	lsls	r3, r4, #16
 8000e68:	0c1f      	lsrs	r7, r3, #16
 8000e6a:	0212      	lsls	r2, r2, #8
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	9701      	str	r7, [sp, #4]
 8000e72:	f7ff f9f5 	bl	8000260 <__aeabi_uidivmod>
 8000e76:	0002      	movs	r2, r0
 8000e78:	437a      	muls	r2, r7
 8000e7a:	040b      	lsls	r3, r1, #16
 8000e7c:	0c31      	lsrs	r1, r6, #16
 8000e7e:	4680      	mov	r8, r0
 8000e80:	4319      	orrs	r1, r3
 8000e82:	428a      	cmp	r2, r1
 8000e84:	d907      	bls.n	8000e96 <__aeabi_ddiv+0x12e>
 8000e86:	2301      	movs	r3, #1
 8000e88:	425b      	negs	r3, r3
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	1909      	adds	r1, r1, r4
 8000e8e:	44e0      	add	r8, ip
 8000e90:	428c      	cmp	r4, r1
 8000e92:	d800      	bhi.n	8000e96 <__aeabi_ddiv+0x12e>
 8000e94:	e207      	b.n	80012a6 <__aeabi_ddiv+0x53e>
 8000e96:	1a88      	subs	r0, r1, r2
 8000e98:	4649      	mov	r1, r9
 8000e9a:	f7ff f9e1 	bl	8000260 <__aeabi_uidivmod>
 8000e9e:	0409      	lsls	r1, r1, #16
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	0431      	lsls	r1, r6, #16
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	9a01      	ldr	r2, [sp, #4]
 8000ea8:	0c09      	lsrs	r1, r1, #16
 8000eaa:	4342      	muls	r2, r0
 8000eac:	0003      	movs	r3, r0
 8000eae:	4331      	orrs	r1, r6
 8000eb0:	428a      	cmp	r2, r1
 8000eb2:	d904      	bls.n	8000ebe <__aeabi_ddiv+0x156>
 8000eb4:	1909      	adds	r1, r1, r4
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	428c      	cmp	r4, r1
 8000eba:	d800      	bhi.n	8000ebe <__aeabi_ddiv+0x156>
 8000ebc:	e1ed      	b.n	800129a <__aeabi_ddiv+0x532>
 8000ebe:	1a88      	subs	r0, r1, r2
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	4690      	mov	r8, r2
 8000ec8:	4641      	mov	r1, r8
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	040e      	lsls	r6, r1, #16
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	001f      	movs	r7, r3
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	9b00      	ldr	r3, [sp, #0]
 8000ed6:	0c36      	lsrs	r6, r6, #16
 8000ed8:	041b      	lsls	r3, r3, #16
 8000eda:	0c19      	lsrs	r1, r3, #16
 8000edc:	000b      	movs	r3, r1
 8000ede:	4373      	muls	r3, r6
 8000ee0:	0c12      	lsrs	r2, r2, #16
 8000ee2:	437e      	muls	r6, r7
 8000ee4:	9103      	str	r1, [sp, #12]
 8000ee6:	4351      	muls	r1, r2
 8000ee8:	437a      	muls	r2, r7
 8000eea:	0c1f      	lsrs	r7, r3, #16
 8000eec:	46bc      	mov	ip, r7
 8000eee:	1876      	adds	r6, r6, r1
 8000ef0:	4466      	add	r6, ip
 8000ef2:	42b1      	cmp	r1, r6
 8000ef4:	d903      	bls.n	8000efe <__aeabi_ddiv+0x196>
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0249      	lsls	r1, r1, #9
 8000efa:	468c      	mov	ip, r1
 8000efc:	4462      	add	r2, ip
 8000efe:	0c31      	lsrs	r1, r6, #16
 8000f00:	188a      	adds	r2, r1, r2
 8000f02:	0431      	lsls	r1, r6, #16
 8000f04:	041e      	lsls	r6, r3, #16
 8000f06:	0c36      	lsrs	r6, r6, #16
 8000f08:	198e      	adds	r6, r1, r6
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	d302      	bcc.n	8000f14 <__aeabi_ddiv+0x1ac>
 8000f0e:	d112      	bne.n	8000f36 <__aeabi_ddiv+0x1ce>
 8000f10:	42b5      	cmp	r5, r6
 8000f12:	d210      	bcs.n	8000f36 <__aeabi_ddiv+0x1ce>
 8000f14:	4643      	mov	r3, r8
 8000f16:	1e59      	subs	r1, r3, #1
 8000f18:	9b00      	ldr	r3, [sp, #0]
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	4465      	add	r5, ip
 8000f1e:	001f      	movs	r7, r3
 8000f20:	429d      	cmp	r5, r3
 8000f22:	419b      	sbcs	r3, r3
 8000f24:	425b      	negs	r3, r3
 8000f26:	191b      	adds	r3, r3, r4
 8000f28:	18c0      	adds	r0, r0, r3
 8000f2a:	4284      	cmp	r4, r0
 8000f2c:	d200      	bcs.n	8000f30 <__aeabi_ddiv+0x1c8>
 8000f2e:	e1a0      	b.n	8001272 <__aeabi_ddiv+0x50a>
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1cc>
 8000f32:	e19b      	b.n	800126c <__aeabi_ddiv+0x504>
 8000f34:	4688      	mov	r8, r1
 8000f36:	1bae      	subs	r6, r5, r6
 8000f38:	42b5      	cmp	r5, r6
 8000f3a:	41ad      	sbcs	r5, r5
 8000f3c:	1a80      	subs	r0, r0, r2
 8000f3e:	426d      	negs	r5, r5
 8000f40:	1b40      	subs	r0, r0, r5
 8000f42:	4284      	cmp	r4, r0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x1e0>
 8000f46:	e1d5      	b.n	80012f4 <__aeabi_ddiv+0x58c>
 8000f48:	4649      	mov	r1, r9
 8000f4a:	f7ff f989 	bl	8000260 <__aeabi_uidivmod>
 8000f4e:	9a01      	ldr	r2, [sp, #4]
 8000f50:	040b      	lsls	r3, r1, #16
 8000f52:	4342      	muls	r2, r0
 8000f54:	0c31      	lsrs	r1, r6, #16
 8000f56:	0005      	movs	r5, r0
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	428a      	cmp	r2, r1
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x1f8>
 8000f5e:	e16c      	b.n	800123a <__aeabi_ddiv+0x4d2>
 8000f60:	1a88      	subs	r0, r1, r2
 8000f62:	4649      	mov	r1, r9
 8000f64:	f7ff f97c 	bl	8000260 <__aeabi_uidivmod>
 8000f68:	9a01      	ldr	r2, [sp, #4]
 8000f6a:	0436      	lsls	r6, r6, #16
 8000f6c:	4342      	muls	r2, r0
 8000f6e:	0409      	lsls	r1, r1, #16
 8000f70:	0c36      	lsrs	r6, r6, #16
 8000f72:	0003      	movs	r3, r0
 8000f74:	430e      	orrs	r6, r1
 8000f76:	42b2      	cmp	r2, r6
 8000f78:	d900      	bls.n	8000f7c <__aeabi_ddiv+0x214>
 8000f7a:	e153      	b.n	8001224 <__aeabi_ddiv+0x4bc>
 8000f7c:	9803      	ldr	r0, [sp, #12]
 8000f7e:	1ab6      	subs	r6, r6, r2
 8000f80:	0002      	movs	r2, r0
 8000f82:	042d      	lsls	r5, r5, #16
 8000f84:	431d      	orrs	r5, r3
 8000f86:	9f02      	ldr	r7, [sp, #8]
 8000f88:	042b      	lsls	r3, r5, #16
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	437b      	muls	r3, r7
 8000f90:	469c      	mov	ip, r3
 8000f92:	0c29      	lsrs	r1, r5, #16
 8000f94:	4348      	muls	r0, r1
 8000f96:	0c13      	lsrs	r3, r2, #16
 8000f98:	4484      	add	ip, r0
 8000f9a:	4463      	add	r3, ip
 8000f9c:	4379      	muls	r1, r7
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x242>
 8000fa2:	2080      	movs	r0, #128	; 0x80
 8000fa4:	0240      	lsls	r0, r0, #9
 8000fa6:	4684      	mov	ip, r0
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c18      	lsrs	r0, r3, #16
 8000fac:	0412      	lsls	r2, r2, #16
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	0c12      	lsrs	r2, r2, #16
 8000fb2:	1841      	adds	r1, r0, r1
 8000fb4:	189b      	adds	r3, r3, r2
 8000fb6:	428e      	cmp	r6, r1
 8000fb8:	d200      	bcs.n	8000fbc <__aeabi_ddiv+0x254>
 8000fba:	e0ff      	b.n	80011bc <__aeabi_ddiv+0x454>
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_ddiv+0x258>
 8000fbe:	e0fa      	b.n	80011b6 <__aeabi_ddiv+0x44e>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	431d      	orrs	r5, r3
 8000fc4:	4a49      	ldr	r2, [pc, #292]	; (80010ec <__aeabi_ddiv+0x384>)
 8000fc6:	445a      	add	r2, fp
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	dc00      	bgt.n	8000fce <__aeabi_ddiv+0x266>
 8000fcc:	e0aa      	b.n	8001124 <__aeabi_ddiv+0x3bc>
 8000fce:	076b      	lsls	r3, r5, #29
 8000fd0:	d000      	beq.n	8000fd4 <__aeabi_ddiv+0x26c>
 8000fd2:	e13d      	b.n	8001250 <__aeabi_ddiv+0x4e8>
 8000fd4:	08ed      	lsrs	r5, r5, #3
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	01db      	lsls	r3, r3, #7
 8000fda:	d506      	bpl.n	8000fea <__aeabi_ddiv+0x282>
 8000fdc:	4642      	mov	r2, r8
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <__aeabi_ddiv+0x388>)
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	4690      	mov	r8, r2
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	00d2      	lsls	r2, r2, #3
 8000fe8:	445a      	add	r2, fp
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <__aeabi_ddiv+0x38c>)
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dd00      	ble.n	8000ff2 <__aeabi_ddiv+0x28a>
 8000ff0:	e71f      	b.n	8000e32 <__aeabi_ddiv+0xca>
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	075b      	lsls	r3, r3, #29
 8000ff6:	431d      	orrs	r5, r3
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	0552      	lsls	r2, r2, #21
 8000ffc:	025c      	lsls	r4, r3, #9
 8000ffe:	0b24      	lsrs	r4, r4, #12
 8001000:	0d53      	lsrs	r3, r2, #21
 8001002:	e708      	b.n	8000e16 <__aeabi_ddiv+0xae>
 8001004:	4652      	mov	r2, sl
 8001006:	4322      	orrs	r2, r4
 8001008:	d100      	bne.n	800100c <__aeabi_ddiv+0x2a4>
 800100a:	e07b      	b.n	8001104 <__aeabi_ddiv+0x39c>
 800100c:	2c00      	cmp	r4, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x2aa>
 8001010:	e0fa      	b.n	8001208 <__aeabi_ddiv+0x4a0>
 8001012:	0020      	movs	r0, r4
 8001014:	f001 f952 	bl	80022bc <__clzsi2>
 8001018:	0002      	movs	r2, r0
 800101a:	3a0b      	subs	r2, #11
 800101c:	231d      	movs	r3, #29
 800101e:	0001      	movs	r1, r0
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	4652      	mov	r2, sl
 8001024:	3908      	subs	r1, #8
 8001026:	40da      	lsrs	r2, r3
 8001028:	408c      	lsls	r4, r1
 800102a:	4314      	orrs	r4, r2
 800102c:	4652      	mov	r2, sl
 800102e:	408a      	lsls	r2, r1
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <__aeabi_ddiv+0x390>)
 8001032:	4458      	add	r0, fp
 8001034:	469b      	mov	fp, r3
 8001036:	4483      	add	fp, r0
 8001038:	2000      	movs	r0, #0
 800103a:	e6d5      	b.n	8000de8 <__aeabi_ddiv+0x80>
 800103c:	464b      	mov	r3, r9
 800103e:	4323      	orrs	r3, r4
 8001040:	4698      	mov	r8, r3
 8001042:	d044      	beq.n	80010ce <__aeabi_ddiv+0x366>
 8001044:	2c00      	cmp	r4, #0
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x2e2>
 8001048:	e0ce      	b.n	80011e8 <__aeabi_ddiv+0x480>
 800104a:	0020      	movs	r0, r4
 800104c:	f001 f936 	bl	80022bc <__clzsi2>
 8001050:	0001      	movs	r1, r0
 8001052:	0002      	movs	r2, r0
 8001054:	390b      	subs	r1, #11
 8001056:	231d      	movs	r3, #29
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	4649      	mov	r1, r9
 800105c:	0010      	movs	r0, r2
 800105e:	40d9      	lsrs	r1, r3
 8001060:	3808      	subs	r0, #8
 8001062:	4084      	lsls	r4, r0
 8001064:	000b      	movs	r3, r1
 8001066:	464d      	mov	r5, r9
 8001068:	4323      	orrs	r3, r4
 800106a:	4698      	mov	r8, r3
 800106c:	4085      	lsls	r5, r0
 800106e:	4823      	ldr	r0, [pc, #140]	; (80010fc <__aeabi_ddiv+0x394>)
 8001070:	1a83      	subs	r3, r0, r2
 8001072:	469b      	mov	fp, r3
 8001074:	2300      	movs	r3, #0
 8001076:	4699      	mov	r9, r3
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	e69a      	b.n	8000db2 <__aeabi_ddiv+0x4a>
 800107c:	464b      	mov	r3, r9
 800107e:	4323      	orrs	r3, r4
 8001080:	4698      	mov	r8, r3
 8001082:	d11d      	bne.n	80010c0 <__aeabi_ddiv+0x358>
 8001084:	2308      	movs	r3, #8
 8001086:	4699      	mov	r9, r3
 8001088:	3b06      	subs	r3, #6
 800108a:	2500      	movs	r5, #0
 800108c:	4683      	mov	fp, r0
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	e68f      	b.n	8000db2 <__aeabi_ddiv+0x4a>
 8001092:	4652      	mov	r2, sl
 8001094:	4322      	orrs	r2, r4
 8001096:	d109      	bne.n	80010ac <__aeabi_ddiv+0x344>
 8001098:	2302      	movs	r3, #2
 800109a:	4649      	mov	r1, r9
 800109c:	4319      	orrs	r1, r3
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <__aeabi_ddiv+0x398>)
 80010a0:	4689      	mov	r9, r1
 80010a2:	469c      	mov	ip, r3
 80010a4:	2400      	movs	r4, #0
 80010a6:	2002      	movs	r0, #2
 80010a8:	44e3      	add	fp, ip
 80010aa:	e69d      	b.n	8000de8 <__aeabi_ddiv+0x80>
 80010ac:	2303      	movs	r3, #3
 80010ae:	464a      	mov	r2, r9
 80010b0:	431a      	orrs	r2, r3
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <__aeabi_ddiv+0x398>)
 80010b4:	4691      	mov	r9, r2
 80010b6:	469c      	mov	ip, r3
 80010b8:	4652      	mov	r2, sl
 80010ba:	2003      	movs	r0, #3
 80010bc:	44e3      	add	fp, ip
 80010be:	e693      	b.n	8000de8 <__aeabi_ddiv+0x80>
 80010c0:	230c      	movs	r3, #12
 80010c2:	4699      	mov	r9, r3
 80010c4:	3b09      	subs	r3, #9
 80010c6:	46a0      	mov	r8, r4
 80010c8:	4683      	mov	fp, r0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	e671      	b.n	8000db2 <__aeabi_ddiv+0x4a>
 80010ce:	2304      	movs	r3, #4
 80010d0:	4699      	mov	r9, r3
 80010d2:	2300      	movs	r3, #0
 80010d4:	469b      	mov	fp, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	2500      	movs	r5, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	e669      	b.n	8000db2 <__aeabi_ddiv+0x4a>
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	000007ff 	.word	0x000007ff
 80010e4:	fffffc01 	.word	0xfffffc01
 80010e8:	0800a554 	.word	0x0800a554
 80010ec:	000003ff 	.word	0x000003ff
 80010f0:	feffffff 	.word	0xfeffffff
 80010f4:	000007fe 	.word	0x000007fe
 80010f8:	000003f3 	.word	0x000003f3
 80010fc:	fffffc0d 	.word	0xfffffc0d
 8001100:	fffff801 	.word	0xfffff801
 8001104:	4649      	mov	r1, r9
 8001106:	2301      	movs	r3, #1
 8001108:	4319      	orrs	r1, r3
 800110a:	4689      	mov	r9, r1
 800110c:	2400      	movs	r4, #0
 800110e:	2001      	movs	r0, #1
 8001110:	e66a      	b.n	8000de8 <__aeabi_ddiv+0x80>
 8001112:	2300      	movs	r3, #0
 8001114:	2480      	movs	r4, #128	; 0x80
 8001116:	469a      	mov	sl, r3
 8001118:	2500      	movs	r5, #0
 800111a:	4b8a      	ldr	r3, [pc, #552]	; (8001344 <__aeabi_ddiv+0x5dc>)
 800111c:	0324      	lsls	r4, r4, #12
 800111e:	e67a      	b.n	8000e16 <__aeabi_ddiv+0xae>
 8001120:	2501      	movs	r5, #1
 8001122:	426d      	negs	r5, r5
 8001124:	2301      	movs	r3, #1
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	2b38      	cmp	r3, #56	; 0x38
 800112a:	dd00      	ble.n	800112e <__aeabi_ddiv+0x3c6>
 800112c:	e670      	b.n	8000e10 <__aeabi_ddiv+0xa8>
 800112e:	2b1f      	cmp	r3, #31
 8001130:	dc00      	bgt.n	8001134 <__aeabi_ddiv+0x3cc>
 8001132:	e0bf      	b.n	80012b4 <__aeabi_ddiv+0x54c>
 8001134:	211f      	movs	r1, #31
 8001136:	4249      	negs	r1, r1
 8001138:	1a8a      	subs	r2, r1, r2
 800113a:	4641      	mov	r1, r8
 800113c:	40d1      	lsrs	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	2b20      	cmp	r3, #32
 8001142:	d004      	beq.n	800114e <__aeabi_ddiv+0x3e6>
 8001144:	4641      	mov	r1, r8
 8001146:	4b80      	ldr	r3, [pc, #512]	; (8001348 <__aeabi_ddiv+0x5e0>)
 8001148:	445b      	add	r3, fp
 800114a:	4099      	lsls	r1, r3
 800114c:	430d      	orrs	r5, r1
 800114e:	1e6b      	subs	r3, r5, #1
 8001150:	419d      	sbcs	r5, r3
 8001152:	2307      	movs	r3, #7
 8001154:	432a      	orrs	r2, r5
 8001156:	001d      	movs	r5, r3
 8001158:	2400      	movs	r4, #0
 800115a:	4015      	ands	r5, r2
 800115c:	4213      	tst	r3, r2
 800115e:	d100      	bne.n	8001162 <__aeabi_ddiv+0x3fa>
 8001160:	e0d4      	b.n	800130c <__aeabi_ddiv+0x5a4>
 8001162:	210f      	movs	r1, #15
 8001164:	2300      	movs	r3, #0
 8001166:	4011      	ands	r1, r2
 8001168:	2904      	cmp	r1, #4
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x406>
 800116c:	e0cb      	b.n	8001306 <__aeabi_ddiv+0x59e>
 800116e:	1d11      	adds	r1, r2, #4
 8001170:	4291      	cmp	r1, r2
 8001172:	4192      	sbcs	r2, r2
 8001174:	4252      	negs	r2, r2
 8001176:	189b      	adds	r3, r3, r2
 8001178:	000a      	movs	r2, r1
 800117a:	0219      	lsls	r1, r3, #8
 800117c:	d400      	bmi.n	8001180 <__aeabi_ddiv+0x418>
 800117e:	e0c2      	b.n	8001306 <__aeabi_ddiv+0x59e>
 8001180:	2301      	movs	r3, #1
 8001182:	2400      	movs	r4, #0
 8001184:	2500      	movs	r5, #0
 8001186:	e646      	b.n	8000e16 <__aeabi_ddiv+0xae>
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	4641      	mov	r1, r8
 800118c:	031b      	lsls	r3, r3, #12
 800118e:	4219      	tst	r1, r3
 8001190:	d008      	beq.n	80011a4 <__aeabi_ddiv+0x43c>
 8001192:	421c      	tst	r4, r3
 8001194:	d106      	bne.n	80011a4 <__aeabi_ddiv+0x43c>
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46ba      	mov	sl, r7
 800119c:	0015      	movs	r5, r2
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <__aeabi_ddiv+0x5dc>)
 80011a0:	0b24      	lsrs	r4, r4, #12
 80011a2:	e638      	b.n	8000e16 <__aeabi_ddiv+0xae>
 80011a4:	2480      	movs	r4, #128	; 0x80
 80011a6:	4643      	mov	r3, r8
 80011a8:	0324      	lsls	r4, r4, #12
 80011aa:	431c      	orrs	r4, r3
 80011ac:	0324      	lsls	r4, r4, #12
 80011ae:	46b2      	mov	sl, r6
 80011b0:	4b64      	ldr	r3, [pc, #400]	; (8001344 <__aeabi_ddiv+0x5dc>)
 80011b2:	0b24      	lsrs	r4, r4, #12
 80011b4:	e62f      	b.n	8000e16 <__aeabi_ddiv+0xae>
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x454>
 80011ba:	e703      	b.n	8000fc4 <__aeabi_ddiv+0x25c>
 80011bc:	19a6      	adds	r6, r4, r6
 80011be:	1e68      	subs	r0, r5, #1
 80011c0:	42a6      	cmp	r6, r4
 80011c2:	d200      	bcs.n	80011c6 <__aeabi_ddiv+0x45e>
 80011c4:	e08d      	b.n	80012e2 <__aeabi_ddiv+0x57a>
 80011c6:	428e      	cmp	r6, r1
 80011c8:	d200      	bcs.n	80011cc <__aeabi_ddiv+0x464>
 80011ca:	e0a3      	b.n	8001314 <__aeabi_ddiv+0x5ac>
 80011cc:	d100      	bne.n	80011d0 <__aeabi_ddiv+0x468>
 80011ce:	e0b3      	b.n	8001338 <__aeabi_ddiv+0x5d0>
 80011d0:	0005      	movs	r5, r0
 80011d2:	e6f5      	b.n	8000fc0 <__aeabi_ddiv+0x258>
 80011d4:	42aa      	cmp	r2, r5
 80011d6:	d900      	bls.n	80011da <__aeabi_ddiv+0x472>
 80011d8:	e639      	b.n	8000e4e <__aeabi_ddiv+0xe6>
 80011da:	4643      	mov	r3, r8
 80011dc:	07de      	lsls	r6, r3, #31
 80011de:	0858      	lsrs	r0, r3, #1
 80011e0:	086b      	lsrs	r3, r5, #1
 80011e2:	431e      	orrs	r6, r3
 80011e4:	07ed      	lsls	r5, r5, #31
 80011e6:	e639      	b.n	8000e5c <__aeabi_ddiv+0xf4>
 80011e8:	4648      	mov	r0, r9
 80011ea:	f001 f867 	bl	80022bc <__clzsi2>
 80011ee:	0001      	movs	r1, r0
 80011f0:	0002      	movs	r2, r0
 80011f2:	3115      	adds	r1, #21
 80011f4:	3220      	adds	r2, #32
 80011f6:	291c      	cmp	r1, #28
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_ddiv+0x494>
 80011fa:	e72c      	b.n	8001056 <__aeabi_ddiv+0x2ee>
 80011fc:	464b      	mov	r3, r9
 80011fe:	3808      	subs	r0, #8
 8001200:	4083      	lsls	r3, r0
 8001202:	2500      	movs	r5, #0
 8001204:	4698      	mov	r8, r3
 8001206:	e732      	b.n	800106e <__aeabi_ddiv+0x306>
 8001208:	f001 f858 	bl	80022bc <__clzsi2>
 800120c:	0003      	movs	r3, r0
 800120e:	001a      	movs	r2, r3
 8001210:	3215      	adds	r2, #21
 8001212:	3020      	adds	r0, #32
 8001214:	2a1c      	cmp	r2, #28
 8001216:	dc00      	bgt.n	800121a <__aeabi_ddiv+0x4b2>
 8001218:	e700      	b.n	800101c <__aeabi_ddiv+0x2b4>
 800121a:	4654      	mov	r4, sl
 800121c:	3b08      	subs	r3, #8
 800121e:	2200      	movs	r2, #0
 8001220:	409c      	lsls	r4, r3
 8001222:	e705      	b.n	8001030 <__aeabi_ddiv+0x2c8>
 8001224:	1936      	adds	r6, r6, r4
 8001226:	3b01      	subs	r3, #1
 8001228:	42b4      	cmp	r4, r6
 800122a:	d900      	bls.n	800122e <__aeabi_ddiv+0x4c6>
 800122c:	e6a6      	b.n	8000f7c <__aeabi_ddiv+0x214>
 800122e:	42b2      	cmp	r2, r6
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x4cc>
 8001232:	e6a3      	b.n	8000f7c <__aeabi_ddiv+0x214>
 8001234:	1e83      	subs	r3, r0, #2
 8001236:	1936      	adds	r6, r6, r4
 8001238:	e6a0      	b.n	8000f7c <__aeabi_ddiv+0x214>
 800123a:	1909      	adds	r1, r1, r4
 800123c:	3d01      	subs	r5, #1
 800123e:	428c      	cmp	r4, r1
 8001240:	d900      	bls.n	8001244 <__aeabi_ddiv+0x4dc>
 8001242:	e68d      	b.n	8000f60 <__aeabi_ddiv+0x1f8>
 8001244:	428a      	cmp	r2, r1
 8001246:	d800      	bhi.n	800124a <__aeabi_ddiv+0x4e2>
 8001248:	e68a      	b.n	8000f60 <__aeabi_ddiv+0x1f8>
 800124a:	1e85      	subs	r5, r0, #2
 800124c:	1909      	adds	r1, r1, r4
 800124e:	e687      	b.n	8000f60 <__aeabi_ddiv+0x1f8>
 8001250:	230f      	movs	r3, #15
 8001252:	402b      	ands	r3, r5
 8001254:	2b04      	cmp	r3, #4
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x4f2>
 8001258:	e6bc      	b.n	8000fd4 <__aeabi_ddiv+0x26c>
 800125a:	2305      	movs	r3, #5
 800125c:	425b      	negs	r3, r3
 800125e:	42ab      	cmp	r3, r5
 8001260:	419b      	sbcs	r3, r3
 8001262:	3504      	adds	r5, #4
 8001264:	425b      	negs	r3, r3
 8001266:	08ed      	lsrs	r5, r5, #3
 8001268:	4498      	add	r8, r3
 800126a:	e6b4      	b.n	8000fd6 <__aeabi_ddiv+0x26e>
 800126c:	42af      	cmp	r7, r5
 800126e:	d900      	bls.n	8001272 <__aeabi_ddiv+0x50a>
 8001270:	e660      	b.n	8000f34 <__aeabi_ddiv+0x1cc>
 8001272:	4282      	cmp	r2, r0
 8001274:	d804      	bhi.n	8001280 <__aeabi_ddiv+0x518>
 8001276:	d000      	beq.n	800127a <__aeabi_ddiv+0x512>
 8001278:	e65c      	b.n	8000f34 <__aeabi_ddiv+0x1cc>
 800127a:	42ae      	cmp	r6, r5
 800127c:	d800      	bhi.n	8001280 <__aeabi_ddiv+0x518>
 800127e:	e659      	b.n	8000f34 <__aeabi_ddiv+0x1cc>
 8001280:	2302      	movs	r3, #2
 8001282:	425b      	negs	r3, r3
 8001284:	469c      	mov	ip, r3
 8001286:	9b00      	ldr	r3, [sp, #0]
 8001288:	44e0      	add	r8, ip
 800128a:	469c      	mov	ip, r3
 800128c:	4465      	add	r5, ip
 800128e:	429d      	cmp	r5, r3
 8001290:	419b      	sbcs	r3, r3
 8001292:	425b      	negs	r3, r3
 8001294:	191b      	adds	r3, r3, r4
 8001296:	18c0      	adds	r0, r0, r3
 8001298:	e64d      	b.n	8000f36 <__aeabi_ddiv+0x1ce>
 800129a:	428a      	cmp	r2, r1
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x538>
 800129e:	e60e      	b.n	8000ebe <__aeabi_ddiv+0x156>
 80012a0:	1e83      	subs	r3, r0, #2
 80012a2:	1909      	adds	r1, r1, r4
 80012a4:	e60b      	b.n	8000ebe <__aeabi_ddiv+0x156>
 80012a6:	428a      	cmp	r2, r1
 80012a8:	d800      	bhi.n	80012ac <__aeabi_ddiv+0x544>
 80012aa:	e5f4      	b.n	8000e96 <__aeabi_ddiv+0x12e>
 80012ac:	1e83      	subs	r3, r0, #2
 80012ae:	4698      	mov	r8, r3
 80012b0:	1909      	adds	r1, r1, r4
 80012b2:	e5f0      	b.n	8000e96 <__aeabi_ddiv+0x12e>
 80012b4:	4925      	ldr	r1, [pc, #148]	; (800134c <__aeabi_ddiv+0x5e4>)
 80012b6:	0028      	movs	r0, r5
 80012b8:	4459      	add	r1, fp
 80012ba:	408d      	lsls	r5, r1
 80012bc:	4642      	mov	r2, r8
 80012be:	408a      	lsls	r2, r1
 80012c0:	1e69      	subs	r1, r5, #1
 80012c2:	418d      	sbcs	r5, r1
 80012c4:	4641      	mov	r1, r8
 80012c6:	40d8      	lsrs	r0, r3
 80012c8:	40d9      	lsrs	r1, r3
 80012ca:	4302      	orrs	r2, r0
 80012cc:	432a      	orrs	r2, r5
 80012ce:	000b      	movs	r3, r1
 80012d0:	0751      	lsls	r1, r2, #29
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0x56e>
 80012d4:	e751      	b.n	800117a <__aeabi_ddiv+0x412>
 80012d6:	210f      	movs	r1, #15
 80012d8:	4011      	ands	r1, r2
 80012da:	2904      	cmp	r1, #4
 80012dc:	d000      	beq.n	80012e0 <__aeabi_ddiv+0x578>
 80012de:	e746      	b.n	800116e <__aeabi_ddiv+0x406>
 80012e0:	e74b      	b.n	800117a <__aeabi_ddiv+0x412>
 80012e2:	0005      	movs	r5, r0
 80012e4:	428e      	cmp	r6, r1
 80012e6:	d000      	beq.n	80012ea <__aeabi_ddiv+0x582>
 80012e8:	e66a      	b.n	8000fc0 <__aeabi_ddiv+0x258>
 80012ea:	9a00      	ldr	r2, [sp, #0]
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d000      	beq.n	80012f2 <__aeabi_ddiv+0x58a>
 80012f0:	e666      	b.n	8000fc0 <__aeabi_ddiv+0x258>
 80012f2:	e667      	b.n	8000fc4 <__aeabi_ddiv+0x25c>
 80012f4:	4a16      	ldr	r2, [pc, #88]	; (8001350 <__aeabi_ddiv+0x5e8>)
 80012f6:	445a      	add	r2, fp
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_ddiv+0x596>
 80012fc:	e710      	b.n	8001120 <__aeabi_ddiv+0x3b8>
 80012fe:	2301      	movs	r3, #1
 8001300:	2500      	movs	r5, #0
 8001302:	4498      	add	r8, r3
 8001304:	e667      	b.n	8000fd6 <__aeabi_ddiv+0x26e>
 8001306:	075d      	lsls	r5, r3, #29
 8001308:	025b      	lsls	r3, r3, #9
 800130a:	0b1c      	lsrs	r4, r3, #12
 800130c:	08d2      	lsrs	r2, r2, #3
 800130e:	2300      	movs	r3, #0
 8001310:	4315      	orrs	r5, r2
 8001312:	e580      	b.n	8000e16 <__aeabi_ddiv+0xae>
 8001314:	9800      	ldr	r0, [sp, #0]
 8001316:	3d02      	subs	r5, #2
 8001318:	0042      	lsls	r2, r0, #1
 800131a:	4282      	cmp	r2, r0
 800131c:	41bf      	sbcs	r7, r7
 800131e:	427f      	negs	r7, r7
 8001320:	193c      	adds	r4, r7, r4
 8001322:	1936      	adds	r6, r6, r4
 8001324:	9200      	str	r2, [sp, #0]
 8001326:	e7dd      	b.n	80012e4 <__aeabi_ddiv+0x57c>
 8001328:	2480      	movs	r4, #128	; 0x80
 800132a:	4643      	mov	r3, r8
 800132c:	0324      	lsls	r4, r4, #12
 800132e:	431c      	orrs	r4, r3
 8001330:	0324      	lsls	r4, r4, #12
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__aeabi_ddiv+0x5dc>)
 8001334:	0b24      	lsrs	r4, r4, #12
 8001336:	e56e      	b.n	8000e16 <__aeabi_ddiv+0xae>
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3ea      	bcc.n	8001314 <__aeabi_ddiv+0x5ac>
 800133e:	0005      	movs	r5, r0
 8001340:	e7d3      	b.n	80012ea <__aeabi_ddiv+0x582>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	000007ff 	.word	0x000007ff
 8001348:	0000043e 	.word	0x0000043e
 800134c:	0000041e 	.word	0x0000041e
 8001350:	000003ff 	.word	0x000003ff

08001354 <__eqdf2>:
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	464e      	mov	r6, r9
 8001358:	4645      	mov	r5, r8
 800135a:	46de      	mov	lr, fp
 800135c:	4657      	mov	r7, sl
 800135e:	4690      	mov	r8, r2
 8001360:	b5e0      	push	{r5, r6, r7, lr}
 8001362:	0017      	movs	r7, r2
 8001364:	031a      	lsls	r2, r3, #12
 8001366:	0b12      	lsrs	r2, r2, #12
 8001368:	0005      	movs	r5, r0
 800136a:	4684      	mov	ip, r0
 800136c:	4819      	ldr	r0, [pc, #100]	; (80013d4 <__eqdf2+0x80>)
 800136e:	030e      	lsls	r6, r1, #12
 8001370:	004c      	lsls	r4, r1, #1
 8001372:	4691      	mov	r9, r2
 8001374:	005a      	lsls	r2, r3, #1
 8001376:	0fdb      	lsrs	r3, r3, #31
 8001378:	469b      	mov	fp, r3
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d64      	lsrs	r4, r4, #21
 800137e:	0fc9      	lsrs	r1, r1, #31
 8001380:	0d52      	lsrs	r2, r2, #21
 8001382:	4284      	cmp	r4, r0
 8001384:	d019      	beq.n	80013ba <__eqdf2+0x66>
 8001386:	4282      	cmp	r2, r0
 8001388:	d010      	beq.n	80013ac <__eqdf2+0x58>
 800138a:	2001      	movs	r0, #1
 800138c:	4294      	cmp	r4, r2
 800138e:	d10e      	bne.n	80013ae <__eqdf2+0x5a>
 8001390:	454e      	cmp	r6, r9
 8001392:	d10c      	bne.n	80013ae <__eqdf2+0x5a>
 8001394:	2001      	movs	r0, #1
 8001396:	45c4      	cmp	ip, r8
 8001398:	d109      	bne.n	80013ae <__eqdf2+0x5a>
 800139a:	4559      	cmp	r1, fp
 800139c:	d017      	beq.n	80013ce <__eqdf2+0x7a>
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d105      	bne.n	80013ae <__eqdf2+0x5a>
 80013a2:	0030      	movs	r0, r6
 80013a4:	4328      	orrs	r0, r5
 80013a6:	1e43      	subs	r3, r0, #1
 80013a8:	4198      	sbcs	r0, r3
 80013aa:	e000      	b.n	80013ae <__eqdf2+0x5a>
 80013ac:	2001      	movs	r0, #1
 80013ae:	bcf0      	pop	{r4, r5, r6, r7}
 80013b0:	46bb      	mov	fp, r7
 80013b2:	46b2      	mov	sl, r6
 80013b4:	46a9      	mov	r9, r5
 80013b6:	46a0      	mov	r8, r4
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ba:	0033      	movs	r3, r6
 80013bc:	2001      	movs	r0, #1
 80013be:	432b      	orrs	r3, r5
 80013c0:	d1f5      	bne.n	80013ae <__eqdf2+0x5a>
 80013c2:	42a2      	cmp	r2, r4
 80013c4:	d1f3      	bne.n	80013ae <__eqdf2+0x5a>
 80013c6:	464b      	mov	r3, r9
 80013c8:	433b      	orrs	r3, r7
 80013ca:	d1f0      	bne.n	80013ae <__eqdf2+0x5a>
 80013cc:	e7e2      	b.n	8001394 <__eqdf2+0x40>
 80013ce:	2000      	movs	r0, #0
 80013d0:	e7ed      	b.n	80013ae <__eqdf2+0x5a>
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	000007ff 	.word	0x000007ff

080013d8 <__gedf2>:
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	4647      	mov	r7, r8
 80013dc:	46ce      	mov	lr, r9
 80013de:	0004      	movs	r4, r0
 80013e0:	0018      	movs	r0, r3
 80013e2:	0016      	movs	r6, r2
 80013e4:	031b      	lsls	r3, r3, #12
 80013e6:	0b1b      	lsrs	r3, r3, #12
 80013e8:	4d2d      	ldr	r5, [pc, #180]	; (80014a0 <__gedf2+0xc8>)
 80013ea:	004a      	lsls	r2, r1, #1
 80013ec:	4699      	mov	r9, r3
 80013ee:	b580      	push	{r7, lr}
 80013f0:	0043      	lsls	r3, r0, #1
 80013f2:	030f      	lsls	r7, r1, #12
 80013f4:	46a4      	mov	ip, r4
 80013f6:	46b0      	mov	r8, r6
 80013f8:	0b3f      	lsrs	r7, r7, #12
 80013fa:	0d52      	lsrs	r2, r2, #21
 80013fc:	0fc9      	lsrs	r1, r1, #31
 80013fe:	0d5b      	lsrs	r3, r3, #21
 8001400:	0fc0      	lsrs	r0, r0, #31
 8001402:	42aa      	cmp	r2, r5
 8001404:	d021      	beq.n	800144a <__gedf2+0x72>
 8001406:	42ab      	cmp	r3, r5
 8001408:	d013      	beq.n	8001432 <__gedf2+0x5a>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d122      	bne.n	8001454 <__gedf2+0x7c>
 800140e:	433c      	orrs	r4, r7
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <__gedf2+0x42>
 8001414:	464d      	mov	r5, r9
 8001416:	432e      	orrs	r6, r5
 8001418:	d022      	beq.n	8001460 <__gedf2+0x88>
 800141a:	2c00      	cmp	r4, #0
 800141c:	d010      	beq.n	8001440 <__gedf2+0x68>
 800141e:	4281      	cmp	r1, r0
 8001420:	d022      	beq.n	8001468 <__gedf2+0x90>
 8001422:	2002      	movs	r0, #2
 8001424:	3901      	subs	r1, #1
 8001426:	4008      	ands	r0, r1
 8001428:	3801      	subs	r0, #1
 800142a:	bcc0      	pop	{r6, r7}
 800142c:	46b9      	mov	r9, r7
 800142e:	46b0      	mov	r8, r6
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001432:	464d      	mov	r5, r9
 8001434:	432e      	orrs	r6, r5
 8001436:	d129      	bne.n	800148c <__gedf2+0xb4>
 8001438:	2a00      	cmp	r2, #0
 800143a:	d1f0      	bne.n	800141e <__gedf2+0x46>
 800143c:	433c      	orrs	r4, r7
 800143e:	d1ee      	bne.n	800141e <__gedf2+0x46>
 8001440:	2800      	cmp	r0, #0
 8001442:	d1f2      	bne.n	800142a <__gedf2+0x52>
 8001444:	2001      	movs	r0, #1
 8001446:	4240      	negs	r0, r0
 8001448:	e7ef      	b.n	800142a <__gedf2+0x52>
 800144a:	003d      	movs	r5, r7
 800144c:	4325      	orrs	r5, r4
 800144e:	d11d      	bne.n	800148c <__gedf2+0xb4>
 8001450:	4293      	cmp	r3, r2
 8001452:	d0ee      	beq.n	8001432 <__gedf2+0x5a>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e2      	bne.n	800141e <__gedf2+0x46>
 8001458:	464c      	mov	r4, r9
 800145a:	4326      	orrs	r6, r4
 800145c:	d1df      	bne.n	800141e <__gedf2+0x46>
 800145e:	e7e0      	b.n	8001422 <__gedf2+0x4a>
 8001460:	2000      	movs	r0, #0
 8001462:	2c00      	cmp	r4, #0
 8001464:	d0e1      	beq.n	800142a <__gedf2+0x52>
 8001466:	e7dc      	b.n	8001422 <__gedf2+0x4a>
 8001468:	429a      	cmp	r2, r3
 800146a:	dc0a      	bgt.n	8001482 <__gedf2+0xaa>
 800146c:	dbe8      	blt.n	8001440 <__gedf2+0x68>
 800146e:	454f      	cmp	r7, r9
 8001470:	d8d7      	bhi.n	8001422 <__gedf2+0x4a>
 8001472:	d00e      	beq.n	8001492 <__gedf2+0xba>
 8001474:	2000      	movs	r0, #0
 8001476:	454f      	cmp	r7, r9
 8001478:	d2d7      	bcs.n	800142a <__gedf2+0x52>
 800147a:	2900      	cmp	r1, #0
 800147c:	d0e2      	beq.n	8001444 <__gedf2+0x6c>
 800147e:	0008      	movs	r0, r1
 8001480:	e7d3      	b.n	800142a <__gedf2+0x52>
 8001482:	4243      	negs	r3, r0
 8001484:	4158      	adcs	r0, r3
 8001486:	0040      	lsls	r0, r0, #1
 8001488:	3801      	subs	r0, #1
 800148a:	e7ce      	b.n	800142a <__gedf2+0x52>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7cb      	b.n	800142a <__gedf2+0x52>
 8001492:	45c4      	cmp	ip, r8
 8001494:	d8c5      	bhi.n	8001422 <__gedf2+0x4a>
 8001496:	2000      	movs	r0, #0
 8001498:	45c4      	cmp	ip, r8
 800149a:	d2c6      	bcs.n	800142a <__gedf2+0x52>
 800149c:	e7ed      	b.n	800147a <__gedf2+0xa2>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	000007ff 	.word	0x000007ff

080014a4 <__ledf2>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	4647      	mov	r7, r8
 80014a8:	46ce      	mov	lr, r9
 80014aa:	0004      	movs	r4, r0
 80014ac:	0018      	movs	r0, r3
 80014ae:	0016      	movs	r6, r2
 80014b0:	031b      	lsls	r3, r3, #12
 80014b2:	0b1b      	lsrs	r3, r3, #12
 80014b4:	4d2c      	ldr	r5, [pc, #176]	; (8001568 <__ledf2+0xc4>)
 80014b6:	004a      	lsls	r2, r1, #1
 80014b8:	4699      	mov	r9, r3
 80014ba:	b580      	push	{r7, lr}
 80014bc:	0043      	lsls	r3, r0, #1
 80014be:	030f      	lsls	r7, r1, #12
 80014c0:	46a4      	mov	ip, r4
 80014c2:	46b0      	mov	r8, r6
 80014c4:	0b3f      	lsrs	r7, r7, #12
 80014c6:	0d52      	lsrs	r2, r2, #21
 80014c8:	0fc9      	lsrs	r1, r1, #31
 80014ca:	0d5b      	lsrs	r3, r3, #21
 80014cc:	0fc0      	lsrs	r0, r0, #31
 80014ce:	42aa      	cmp	r2, r5
 80014d0:	d00d      	beq.n	80014ee <__ledf2+0x4a>
 80014d2:	42ab      	cmp	r3, r5
 80014d4:	d010      	beq.n	80014f8 <__ledf2+0x54>
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d127      	bne.n	800152a <__ledf2+0x86>
 80014da:	433c      	orrs	r4, r7
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d111      	bne.n	8001504 <__ledf2+0x60>
 80014e0:	464d      	mov	r5, r9
 80014e2:	432e      	orrs	r6, r5
 80014e4:	d10e      	bne.n	8001504 <__ledf2+0x60>
 80014e6:	2000      	movs	r0, #0
 80014e8:	2c00      	cmp	r4, #0
 80014ea:	d015      	beq.n	8001518 <__ledf2+0x74>
 80014ec:	e00e      	b.n	800150c <__ledf2+0x68>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d110      	bne.n	8001516 <__ledf2+0x72>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d118      	bne.n	800152a <__ledf2+0x86>
 80014f8:	464d      	mov	r5, r9
 80014fa:	432e      	orrs	r6, r5
 80014fc:	d10b      	bne.n	8001516 <__ledf2+0x72>
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d102      	bne.n	8001508 <__ledf2+0x64>
 8001502:	433c      	orrs	r4, r7
 8001504:	2c00      	cmp	r4, #0
 8001506:	d00b      	beq.n	8001520 <__ledf2+0x7c>
 8001508:	4281      	cmp	r1, r0
 800150a:	d014      	beq.n	8001536 <__ledf2+0x92>
 800150c:	2002      	movs	r0, #2
 800150e:	3901      	subs	r1, #1
 8001510:	4008      	ands	r0, r1
 8001512:	3801      	subs	r0, #1
 8001514:	e000      	b.n	8001518 <__ledf2+0x74>
 8001516:	2002      	movs	r0, #2
 8001518:	bcc0      	pop	{r6, r7}
 800151a:	46b9      	mov	r9, r7
 800151c:	46b0      	mov	r8, r6
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001520:	2800      	cmp	r0, #0
 8001522:	d1f9      	bne.n	8001518 <__ledf2+0x74>
 8001524:	2001      	movs	r0, #1
 8001526:	4240      	negs	r0, r0
 8001528:	e7f6      	b.n	8001518 <__ledf2+0x74>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ec      	bne.n	8001508 <__ledf2+0x64>
 800152e:	464c      	mov	r4, r9
 8001530:	4326      	orrs	r6, r4
 8001532:	d1e9      	bne.n	8001508 <__ledf2+0x64>
 8001534:	e7ea      	b.n	800150c <__ledf2+0x68>
 8001536:	429a      	cmp	r2, r3
 8001538:	dd04      	ble.n	8001544 <__ledf2+0xa0>
 800153a:	4243      	negs	r3, r0
 800153c:	4158      	adcs	r0, r3
 800153e:	0040      	lsls	r0, r0, #1
 8001540:	3801      	subs	r0, #1
 8001542:	e7e9      	b.n	8001518 <__ledf2+0x74>
 8001544:	429a      	cmp	r2, r3
 8001546:	dbeb      	blt.n	8001520 <__ledf2+0x7c>
 8001548:	454f      	cmp	r7, r9
 800154a:	d8df      	bhi.n	800150c <__ledf2+0x68>
 800154c:	d006      	beq.n	800155c <__ledf2+0xb8>
 800154e:	2000      	movs	r0, #0
 8001550:	454f      	cmp	r7, r9
 8001552:	d2e1      	bcs.n	8001518 <__ledf2+0x74>
 8001554:	2900      	cmp	r1, #0
 8001556:	d0e5      	beq.n	8001524 <__ledf2+0x80>
 8001558:	0008      	movs	r0, r1
 800155a:	e7dd      	b.n	8001518 <__ledf2+0x74>
 800155c:	45c4      	cmp	ip, r8
 800155e:	d8d5      	bhi.n	800150c <__ledf2+0x68>
 8001560:	2000      	movs	r0, #0
 8001562:	45c4      	cmp	ip, r8
 8001564:	d2d8      	bcs.n	8001518 <__ledf2+0x74>
 8001566:	e7f5      	b.n	8001554 <__ledf2+0xb0>
 8001568:	000007ff 	.word	0x000007ff

0800156c <__aeabi_dmul>:
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	4657      	mov	r7, sl
 8001570:	464e      	mov	r6, r9
 8001572:	4645      	mov	r5, r8
 8001574:	46de      	mov	lr, fp
 8001576:	b5e0      	push	{r5, r6, r7, lr}
 8001578:	4698      	mov	r8, r3
 800157a:	030c      	lsls	r4, r1, #12
 800157c:	004b      	lsls	r3, r1, #1
 800157e:	0006      	movs	r6, r0
 8001580:	4692      	mov	sl, r2
 8001582:	b087      	sub	sp, #28
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fcf      	lsrs	r7, r1, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x24>
 800158e:	e15c      	b.n	800184a <__aeabi_dmul+0x2de>
 8001590:	4ad9      	ldr	r2, [pc, #868]	; (80018f8 <__aeabi_dmul+0x38c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d100      	bne.n	8001598 <__aeabi_dmul+0x2c>
 8001596:	e175      	b.n	8001884 <__aeabi_dmul+0x318>
 8001598:	0f42      	lsrs	r2, r0, #29
 800159a:	00e4      	lsls	r4, r4, #3
 800159c:	4314      	orrs	r4, r2
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	0412      	lsls	r2, r2, #16
 80015a2:	4314      	orrs	r4, r2
 80015a4:	4ad5      	ldr	r2, [pc, #852]	; (80018fc <__aeabi_dmul+0x390>)
 80015a6:	00c5      	lsls	r5, r0, #3
 80015a8:	4694      	mov	ip, r2
 80015aa:	4463      	add	r3, ip
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	4699      	mov	r9, r3
 80015b2:	469b      	mov	fp, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4642      	mov	r2, r8
 80015b8:	031e      	lsls	r6, r3, #12
 80015ba:	0fd2      	lsrs	r2, r2, #31
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4650      	mov	r0, sl
 80015c0:	4690      	mov	r8, r2
 80015c2:	0b36      	lsrs	r6, r6, #12
 80015c4:	0d5b      	lsrs	r3, r3, #21
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x5e>
 80015c8:	e120      	b.n	800180c <__aeabi_dmul+0x2a0>
 80015ca:	4acb      	ldr	r2, [pc, #812]	; (80018f8 <__aeabi_dmul+0x38c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x66>
 80015d0:	e162      	b.n	8001898 <__aeabi_dmul+0x32c>
 80015d2:	49ca      	ldr	r1, [pc, #808]	; (80018fc <__aeabi_dmul+0x390>)
 80015d4:	0f42      	lsrs	r2, r0, #29
 80015d6:	468c      	mov	ip, r1
 80015d8:	9900      	ldr	r1, [sp, #0]
 80015da:	4463      	add	r3, ip
 80015dc:	00f6      	lsls	r6, r6, #3
 80015de:	468c      	mov	ip, r1
 80015e0:	4316      	orrs	r6, r2
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	449c      	add	ip, r3
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	4663      	mov	r3, ip
 80015ea:	4316      	orrs	r6, r2
 80015ec:	00c2      	lsls	r2, r0, #3
 80015ee:	2000      	movs	r0, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	9900      	ldr	r1, [sp, #0]
 80015f4:	4643      	mov	r3, r8
 80015f6:	3101      	adds	r1, #1
 80015f8:	468c      	mov	ip, r1
 80015fa:	4649      	mov	r1, r9
 80015fc:	407b      	eors	r3, r7
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	290f      	cmp	r1, #15
 8001602:	d826      	bhi.n	8001652 <__aeabi_dmul+0xe6>
 8001604:	4bbe      	ldr	r3, [pc, #760]	; (8001900 <__aeabi_dmul+0x394>)
 8001606:	0089      	lsls	r1, r1, #2
 8001608:	5859      	ldr	r1, [r3, r1]
 800160a:	468f      	mov	pc, r1
 800160c:	4643      	mov	r3, r8
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	0034      	movs	r4, r6
 8001612:	0015      	movs	r5, r2
 8001614:	4683      	mov	fp, r0
 8001616:	465b      	mov	r3, fp
 8001618:	2b02      	cmp	r3, #2
 800161a:	d016      	beq.n	800164a <__aeabi_dmul+0xde>
 800161c:	2b03      	cmp	r3, #3
 800161e:	d100      	bne.n	8001622 <__aeabi_dmul+0xb6>
 8001620:	e203      	b.n	8001a2a <__aeabi_dmul+0x4be>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d000      	beq.n	8001628 <__aeabi_dmul+0xbc>
 8001626:	e0cd      	b.n	80017c4 <__aeabi_dmul+0x258>
 8001628:	2200      	movs	r2, #0
 800162a:	2400      	movs	r4, #0
 800162c:	2500      	movs	r5, #0
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	0512      	lsls	r2, r2, #20
 8001632:	4322      	orrs	r2, r4
 8001634:	07db      	lsls	r3, r3, #31
 8001636:	431a      	orrs	r2, r3
 8001638:	0028      	movs	r0, r5
 800163a:	0011      	movs	r1, r2
 800163c:	b007      	add	sp, #28
 800163e:	bcf0      	pop	{r4, r5, r6, r7}
 8001640:	46bb      	mov	fp, r7
 8001642:	46b2      	mov	sl, r6
 8001644:	46a9      	mov	r9, r5
 8001646:	46a0      	mov	r8, r4
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164a:	2400      	movs	r4, #0
 800164c:	2500      	movs	r5, #0
 800164e:	4aaa      	ldr	r2, [pc, #680]	; (80018f8 <__aeabi_dmul+0x38c>)
 8001650:	e7ed      	b.n	800162e <__aeabi_dmul+0xc2>
 8001652:	0c28      	lsrs	r0, r5, #16
 8001654:	042d      	lsls	r5, r5, #16
 8001656:	0c2d      	lsrs	r5, r5, #16
 8001658:	002b      	movs	r3, r5
 800165a:	0c11      	lsrs	r1, r2, #16
 800165c:	0412      	lsls	r2, r2, #16
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	4353      	muls	r3, r2
 8001662:	4698      	mov	r8, r3
 8001664:	0013      	movs	r3, r2
 8001666:	002f      	movs	r7, r5
 8001668:	4343      	muls	r3, r0
 800166a:	4699      	mov	r9, r3
 800166c:	434f      	muls	r7, r1
 800166e:	444f      	add	r7, r9
 8001670:	46bb      	mov	fp, r7
 8001672:	4647      	mov	r7, r8
 8001674:	000b      	movs	r3, r1
 8001676:	0c3f      	lsrs	r7, r7, #16
 8001678:	46ba      	mov	sl, r7
 800167a:	4343      	muls	r3, r0
 800167c:	44da      	add	sl, fp
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	45d1      	cmp	r9, sl
 8001682:	d904      	bls.n	800168e <__aeabi_dmul+0x122>
 8001684:	2780      	movs	r7, #128	; 0x80
 8001686:	027f      	lsls	r7, r7, #9
 8001688:	46b9      	mov	r9, r7
 800168a:	444b      	add	r3, r9
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	4653      	mov	r3, sl
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	469b      	mov	fp, r3
 8001694:	4653      	mov	r3, sl
 8001696:	041f      	lsls	r7, r3, #16
 8001698:	4643      	mov	r3, r8
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	4698      	mov	r8, r3
 80016a0:	003b      	movs	r3, r7
 80016a2:	4443      	add	r3, r8
 80016a4:	9304      	str	r3, [sp, #16]
 80016a6:	0c33      	lsrs	r3, r6, #16
 80016a8:	0436      	lsls	r6, r6, #16
 80016aa:	0c36      	lsrs	r6, r6, #16
 80016ac:	4698      	mov	r8, r3
 80016ae:	0033      	movs	r3, r6
 80016b0:	4343      	muls	r3, r0
 80016b2:	4699      	mov	r9, r3
 80016b4:	4643      	mov	r3, r8
 80016b6:	4343      	muls	r3, r0
 80016b8:	002f      	movs	r7, r5
 80016ba:	469a      	mov	sl, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	4377      	muls	r7, r6
 80016c0:	435d      	muls	r5, r3
 80016c2:	0c38      	lsrs	r0, r7, #16
 80016c4:	444d      	add	r5, r9
 80016c6:	1945      	adds	r5, r0, r5
 80016c8:	45a9      	cmp	r9, r5
 80016ca:	d903      	bls.n	80016d4 <__aeabi_dmul+0x168>
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	4699      	mov	r9, r3
 80016d2:	44ca      	add	sl, r9
 80016d4:	043f      	lsls	r7, r7, #16
 80016d6:	0c28      	lsrs	r0, r5, #16
 80016d8:	0c3f      	lsrs	r7, r7, #16
 80016da:	042d      	lsls	r5, r5, #16
 80016dc:	19ed      	adds	r5, r5, r7
 80016de:	0c27      	lsrs	r7, r4, #16
 80016e0:	0424      	lsls	r4, r4, #16
 80016e2:	0c24      	lsrs	r4, r4, #16
 80016e4:	0003      	movs	r3, r0
 80016e6:	0020      	movs	r0, r4
 80016e8:	4350      	muls	r0, r2
 80016ea:	437a      	muls	r2, r7
 80016ec:	4691      	mov	r9, r2
 80016ee:	003a      	movs	r2, r7
 80016f0:	4453      	add	r3, sl
 80016f2:	9305      	str	r3, [sp, #20]
 80016f4:	0c03      	lsrs	r3, r0, #16
 80016f6:	469a      	mov	sl, r3
 80016f8:	434a      	muls	r2, r1
 80016fa:	4361      	muls	r1, r4
 80016fc:	4449      	add	r1, r9
 80016fe:	4451      	add	r1, sl
 8001700:	44ab      	add	fp, r5
 8001702:	4589      	cmp	r9, r1
 8001704:	d903      	bls.n	800170e <__aeabi_dmul+0x1a2>
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4699      	mov	r9, r3
 800170c:	444a      	add	r2, r9
 800170e:	0400      	lsls	r0, r0, #16
 8001710:	0c0b      	lsrs	r3, r1, #16
 8001712:	0c00      	lsrs	r0, r0, #16
 8001714:	0409      	lsls	r1, r1, #16
 8001716:	1809      	adds	r1, r1, r0
 8001718:	0020      	movs	r0, r4
 800171a:	4699      	mov	r9, r3
 800171c:	4643      	mov	r3, r8
 800171e:	4370      	muls	r0, r6
 8001720:	435c      	muls	r4, r3
 8001722:	437e      	muls	r6, r7
 8001724:	435f      	muls	r7, r3
 8001726:	0c03      	lsrs	r3, r0, #16
 8001728:	4698      	mov	r8, r3
 800172a:	19a4      	adds	r4, r4, r6
 800172c:	4444      	add	r4, r8
 800172e:	444a      	add	r2, r9
 8001730:	9703      	str	r7, [sp, #12]
 8001732:	42a6      	cmp	r6, r4
 8001734:	d904      	bls.n	8001740 <__aeabi_dmul+0x1d4>
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	025b      	lsls	r3, r3, #9
 800173a:	4698      	mov	r8, r3
 800173c:	4447      	add	r7, r8
 800173e:	9703      	str	r7, [sp, #12]
 8001740:	0423      	lsls	r3, r4, #16
 8001742:	9e02      	ldr	r6, [sp, #8]
 8001744:	469a      	mov	sl, r3
 8001746:	9b05      	ldr	r3, [sp, #20]
 8001748:	445e      	add	r6, fp
 800174a:	4698      	mov	r8, r3
 800174c:	42ae      	cmp	r6, r5
 800174e:	41ad      	sbcs	r5, r5
 8001750:	1876      	adds	r6, r6, r1
 8001752:	428e      	cmp	r6, r1
 8001754:	4189      	sbcs	r1, r1
 8001756:	0400      	lsls	r0, r0, #16
 8001758:	0c00      	lsrs	r0, r0, #16
 800175a:	4450      	add	r0, sl
 800175c:	4440      	add	r0, r8
 800175e:	426d      	negs	r5, r5
 8001760:	1947      	adds	r7, r0, r5
 8001762:	46b8      	mov	r8, r7
 8001764:	4693      	mov	fp, r2
 8001766:	4249      	negs	r1, r1
 8001768:	4689      	mov	r9, r1
 800176a:	44c3      	add	fp, r8
 800176c:	44d9      	add	r9, fp
 800176e:	4298      	cmp	r0, r3
 8001770:	4180      	sbcs	r0, r0
 8001772:	45a8      	cmp	r8, r5
 8001774:	41ad      	sbcs	r5, r5
 8001776:	4593      	cmp	fp, r2
 8001778:	4192      	sbcs	r2, r2
 800177a:	4589      	cmp	r9, r1
 800177c:	4189      	sbcs	r1, r1
 800177e:	426d      	negs	r5, r5
 8001780:	4240      	negs	r0, r0
 8001782:	4328      	orrs	r0, r5
 8001784:	0c24      	lsrs	r4, r4, #16
 8001786:	4252      	negs	r2, r2
 8001788:	4249      	negs	r1, r1
 800178a:	430a      	orrs	r2, r1
 800178c:	9b03      	ldr	r3, [sp, #12]
 800178e:	1900      	adds	r0, r0, r4
 8001790:	1880      	adds	r0, r0, r2
 8001792:	18c7      	adds	r7, r0, r3
 8001794:	464b      	mov	r3, r9
 8001796:	0ddc      	lsrs	r4, r3, #23
 8001798:	9b04      	ldr	r3, [sp, #16]
 800179a:	0275      	lsls	r5, r6, #9
 800179c:	431d      	orrs	r5, r3
 800179e:	1e6a      	subs	r2, r5, #1
 80017a0:	4195      	sbcs	r5, r2
 80017a2:	464b      	mov	r3, r9
 80017a4:	0df6      	lsrs	r6, r6, #23
 80017a6:	027f      	lsls	r7, r7, #9
 80017a8:	4335      	orrs	r5, r6
 80017aa:	025a      	lsls	r2, r3, #9
 80017ac:	433c      	orrs	r4, r7
 80017ae:	4315      	orrs	r5, r2
 80017b0:	01fb      	lsls	r3, r7, #7
 80017b2:	d400      	bmi.n	80017b6 <__aeabi_dmul+0x24a>
 80017b4:	e11c      	b.n	80019f0 <__aeabi_dmul+0x484>
 80017b6:	2101      	movs	r1, #1
 80017b8:	086a      	lsrs	r2, r5, #1
 80017ba:	400d      	ands	r5, r1
 80017bc:	4315      	orrs	r5, r2
 80017be:	07e2      	lsls	r2, r4, #31
 80017c0:	4315      	orrs	r5, r2
 80017c2:	0864      	lsrs	r4, r4, #1
 80017c4:	494f      	ldr	r1, [pc, #316]	; (8001904 <__aeabi_dmul+0x398>)
 80017c6:	4461      	add	r1, ip
 80017c8:	2900      	cmp	r1, #0
 80017ca:	dc00      	bgt.n	80017ce <__aeabi_dmul+0x262>
 80017cc:	e0b0      	b.n	8001930 <__aeabi_dmul+0x3c4>
 80017ce:	076b      	lsls	r3, r5, #29
 80017d0:	d009      	beq.n	80017e6 <__aeabi_dmul+0x27a>
 80017d2:	220f      	movs	r2, #15
 80017d4:	402a      	ands	r2, r5
 80017d6:	2a04      	cmp	r2, #4
 80017d8:	d005      	beq.n	80017e6 <__aeabi_dmul+0x27a>
 80017da:	1d2a      	adds	r2, r5, #4
 80017dc:	42aa      	cmp	r2, r5
 80017de:	41ad      	sbcs	r5, r5
 80017e0:	426d      	negs	r5, r5
 80017e2:	1964      	adds	r4, r4, r5
 80017e4:	0015      	movs	r5, r2
 80017e6:	01e3      	lsls	r3, r4, #7
 80017e8:	d504      	bpl.n	80017f4 <__aeabi_dmul+0x288>
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4a46      	ldr	r2, [pc, #280]	; (8001908 <__aeabi_dmul+0x39c>)
 80017ee:	00c9      	lsls	r1, r1, #3
 80017f0:	4014      	ands	r4, r2
 80017f2:	4461      	add	r1, ip
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <__aeabi_dmul+0x3a0>)
 80017f6:	4291      	cmp	r1, r2
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dmul+0x290>
 80017fa:	e726      	b.n	800164a <__aeabi_dmul+0xde>
 80017fc:	0762      	lsls	r2, r4, #29
 80017fe:	08ed      	lsrs	r5, r5, #3
 8001800:	0264      	lsls	r4, r4, #9
 8001802:	0549      	lsls	r1, r1, #21
 8001804:	4315      	orrs	r5, r2
 8001806:	0b24      	lsrs	r4, r4, #12
 8001808:	0d4a      	lsrs	r2, r1, #21
 800180a:	e710      	b.n	800162e <__aeabi_dmul+0xc2>
 800180c:	4652      	mov	r2, sl
 800180e:	4332      	orrs	r2, r6
 8001810:	d100      	bne.n	8001814 <__aeabi_dmul+0x2a8>
 8001812:	e07f      	b.n	8001914 <__aeabi_dmul+0x3a8>
 8001814:	2e00      	cmp	r6, #0
 8001816:	d100      	bne.n	800181a <__aeabi_dmul+0x2ae>
 8001818:	e0dc      	b.n	80019d4 <__aeabi_dmul+0x468>
 800181a:	0030      	movs	r0, r6
 800181c:	f000 fd4e 	bl	80022bc <__clzsi2>
 8001820:	0002      	movs	r2, r0
 8001822:	3a0b      	subs	r2, #11
 8001824:	231d      	movs	r3, #29
 8001826:	0001      	movs	r1, r0
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	4652      	mov	r2, sl
 800182c:	3908      	subs	r1, #8
 800182e:	40da      	lsrs	r2, r3
 8001830:	408e      	lsls	r6, r1
 8001832:	4316      	orrs	r6, r2
 8001834:	4652      	mov	r2, sl
 8001836:	408a      	lsls	r2, r1
 8001838:	9b00      	ldr	r3, [sp, #0]
 800183a:	4935      	ldr	r1, [pc, #212]	; (8001910 <__aeabi_dmul+0x3a4>)
 800183c:	1a18      	subs	r0, r3, r0
 800183e:	0003      	movs	r3, r0
 8001840:	468c      	mov	ip, r1
 8001842:	4463      	add	r3, ip
 8001844:	2000      	movs	r0, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	e6d3      	b.n	80015f2 <__aeabi_dmul+0x86>
 800184a:	0025      	movs	r5, r4
 800184c:	4305      	orrs	r5, r0
 800184e:	d04a      	beq.n	80018e6 <__aeabi_dmul+0x37a>
 8001850:	2c00      	cmp	r4, #0
 8001852:	d100      	bne.n	8001856 <__aeabi_dmul+0x2ea>
 8001854:	e0b0      	b.n	80019b8 <__aeabi_dmul+0x44c>
 8001856:	0020      	movs	r0, r4
 8001858:	f000 fd30 	bl	80022bc <__clzsi2>
 800185c:	0001      	movs	r1, r0
 800185e:	0002      	movs	r2, r0
 8001860:	390b      	subs	r1, #11
 8001862:	231d      	movs	r3, #29
 8001864:	0010      	movs	r0, r2
 8001866:	1a5b      	subs	r3, r3, r1
 8001868:	0031      	movs	r1, r6
 800186a:	0035      	movs	r5, r6
 800186c:	3808      	subs	r0, #8
 800186e:	4084      	lsls	r4, r0
 8001870:	40d9      	lsrs	r1, r3
 8001872:	4085      	lsls	r5, r0
 8001874:	430c      	orrs	r4, r1
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <__aeabi_dmul+0x3a4>)
 8001878:	1a83      	subs	r3, r0, r2
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2300      	movs	r3, #0
 800187e:	4699      	mov	r9, r3
 8001880:	469b      	mov	fp, r3
 8001882:	e697      	b.n	80015b4 <__aeabi_dmul+0x48>
 8001884:	0005      	movs	r5, r0
 8001886:	4325      	orrs	r5, r4
 8001888:	d126      	bne.n	80018d8 <__aeabi_dmul+0x36c>
 800188a:	2208      	movs	r2, #8
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2302      	movs	r3, #2
 8001890:	2400      	movs	r4, #0
 8001892:	4691      	mov	r9, r2
 8001894:	469b      	mov	fp, r3
 8001896:	e68d      	b.n	80015b4 <__aeabi_dmul+0x48>
 8001898:	4652      	mov	r2, sl
 800189a:	9b00      	ldr	r3, [sp, #0]
 800189c:	4332      	orrs	r2, r6
 800189e:	d110      	bne.n	80018c2 <__aeabi_dmul+0x356>
 80018a0:	4915      	ldr	r1, [pc, #84]	; (80018f8 <__aeabi_dmul+0x38c>)
 80018a2:	2600      	movs	r6, #0
 80018a4:	468c      	mov	ip, r1
 80018a6:	4463      	add	r3, ip
 80018a8:	4649      	mov	r1, r9
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2302      	movs	r3, #2
 80018ae:	4319      	orrs	r1, r3
 80018b0:	4689      	mov	r9, r1
 80018b2:	2002      	movs	r0, #2
 80018b4:	e69d      	b.n	80015f2 <__aeabi_dmul+0x86>
 80018b6:	465b      	mov	r3, fp
 80018b8:	9701      	str	r7, [sp, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dmul+0x354>
 80018be:	e6ad      	b.n	800161c <__aeabi_dmul+0xb0>
 80018c0:	e6c3      	b.n	800164a <__aeabi_dmul+0xde>
 80018c2:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <__aeabi_dmul+0x38c>)
 80018c4:	2003      	movs	r0, #3
 80018c6:	4694      	mov	ip, r2
 80018c8:	4463      	add	r3, ip
 80018ca:	464a      	mov	r2, r9
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2303      	movs	r3, #3
 80018d0:	431a      	orrs	r2, r3
 80018d2:	4691      	mov	r9, r2
 80018d4:	4652      	mov	r2, sl
 80018d6:	e68c      	b.n	80015f2 <__aeabi_dmul+0x86>
 80018d8:	220c      	movs	r2, #12
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2303      	movs	r3, #3
 80018de:	0005      	movs	r5, r0
 80018e0:	4691      	mov	r9, r2
 80018e2:	469b      	mov	fp, r3
 80018e4:	e666      	b.n	80015b4 <__aeabi_dmul+0x48>
 80018e6:	2304      	movs	r3, #4
 80018e8:	4699      	mov	r9, r3
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	2400      	movs	r4, #0
 80018f2:	469b      	mov	fp, r3
 80018f4:	e65e      	b.n	80015b4 <__aeabi_dmul+0x48>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	000007ff 	.word	0x000007ff
 80018fc:	fffffc01 	.word	0xfffffc01
 8001900:	0800a594 	.word	0x0800a594
 8001904:	000003ff 	.word	0x000003ff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	fffffc0d 	.word	0xfffffc0d
 8001914:	4649      	mov	r1, r9
 8001916:	2301      	movs	r3, #1
 8001918:	4319      	orrs	r1, r3
 800191a:	4689      	mov	r9, r1
 800191c:	2600      	movs	r6, #0
 800191e:	2001      	movs	r0, #1
 8001920:	e667      	b.n	80015f2 <__aeabi_dmul+0x86>
 8001922:	2300      	movs	r3, #0
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	2500      	movs	r5, #0
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <__aeabi_dmul+0x4cc>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	0324      	lsls	r4, r4, #12
 800192e:	e67e      	b.n	800162e <__aeabi_dmul+0xc2>
 8001930:	2001      	movs	r0, #1
 8001932:	1a40      	subs	r0, r0, r1
 8001934:	2838      	cmp	r0, #56	; 0x38
 8001936:	dd00      	ble.n	800193a <__aeabi_dmul+0x3ce>
 8001938:	e676      	b.n	8001628 <__aeabi_dmul+0xbc>
 800193a:	281f      	cmp	r0, #31
 800193c:	dd5b      	ble.n	80019f6 <__aeabi_dmul+0x48a>
 800193e:	221f      	movs	r2, #31
 8001940:	0023      	movs	r3, r4
 8001942:	4252      	negs	r2, r2
 8001944:	1a51      	subs	r1, r2, r1
 8001946:	40cb      	lsrs	r3, r1
 8001948:	0019      	movs	r1, r3
 800194a:	2820      	cmp	r0, #32
 800194c:	d003      	beq.n	8001956 <__aeabi_dmul+0x3ea>
 800194e:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <__aeabi_dmul+0x4d0>)
 8001950:	4462      	add	r2, ip
 8001952:	4094      	lsls	r4, r2
 8001954:	4325      	orrs	r5, r4
 8001956:	1e6a      	subs	r2, r5, #1
 8001958:	4195      	sbcs	r5, r2
 800195a:	002a      	movs	r2, r5
 800195c:	430a      	orrs	r2, r1
 800195e:	2107      	movs	r1, #7
 8001960:	000d      	movs	r5, r1
 8001962:	2400      	movs	r4, #0
 8001964:	4015      	ands	r5, r2
 8001966:	4211      	tst	r1, r2
 8001968:	d05b      	beq.n	8001a22 <__aeabi_dmul+0x4b6>
 800196a:	210f      	movs	r1, #15
 800196c:	2400      	movs	r4, #0
 800196e:	4011      	ands	r1, r2
 8001970:	2904      	cmp	r1, #4
 8001972:	d053      	beq.n	8001a1c <__aeabi_dmul+0x4b0>
 8001974:	1d11      	adds	r1, r2, #4
 8001976:	4291      	cmp	r1, r2
 8001978:	4192      	sbcs	r2, r2
 800197a:	4252      	negs	r2, r2
 800197c:	18a4      	adds	r4, r4, r2
 800197e:	000a      	movs	r2, r1
 8001980:	0223      	lsls	r3, r4, #8
 8001982:	d54b      	bpl.n	8001a1c <__aeabi_dmul+0x4b0>
 8001984:	2201      	movs	r2, #1
 8001986:	2400      	movs	r4, #0
 8001988:	2500      	movs	r5, #0
 800198a:	e650      	b.n	800162e <__aeabi_dmul+0xc2>
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	031b      	lsls	r3, r3, #12
 8001990:	421c      	tst	r4, r3
 8001992:	d009      	beq.n	80019a8 <__aeabi_dmul+0x43c>
 8001994:	421e      	tst	r6, r3
 8001996:	d107      	bne.n	80019a8 <__aeabi_dmul+0x43c>
 8001998:	4333      	orrs	r3, r6
 800199a:	031c      	lsls	r4, r3, #12
 800199c:	4643      	mov	r3, r8
 800199e:	0015      	movs	r5, r2
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <__aeabi_dmul+0x4cc>)
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	e642      	b.n	800162e <__aeabi_dmul+0xc2>
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	0312      	lsls	r2, r2, #12
 80019ac:	4314      	orrs	r4, r2
 80019ae:	0324      	lsls	r4, r4, #12
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <__aeabi_dmul+0x4cc>)
 80019b2:	0b24      	lsrs	r4, r4, #12
 80019b4:	9701      	str	r7, [sp, #4]
 80019b6:	e63a      	b.n	800162e <__aeabi_dmul+0xc2>
 80019b8:	f000 fc80 	bl	80022bc <__clzsi2>
 80019bc:	0001      	movs	r1, r0
 80019be:	0002      	movs	r2, r0
 80019c0:	3115      	adds	r1, #21
 80019c2:	3220      	adds	r2, #32
 80019c4:	291c      	cmp	r1, #28
 80019c6:	dc00      	bgt.n	80019ca <__aeabi_dmul+0x45e>
 80019c8:	e74b      	b.n	8001862 <__aeabi_dmul+0x2f6>
 80019ca:	0034      	movs	r4, r6
 80019cc:	3808      	subs	r0, #8
 80019ce:	2500      	movs	r5, #0
 80019d0:	4084      	lsls	r4, r0
 80019d2:	e750      	b.n	8001876 <__aeabi_dmul+0x30a>
 80019d4:	f000 fc72 	bl	80022bc <__clzsi2>
 80019d8:	0003      	movs	r3, r0
 80019da:	001a      	movs	r2, r3
 80019dc:	3215      	adds	r2, #21
 80019de:	3020      	adds	r0, #32
 80019e0:	2a1c      	cmp	r2, #28
 80019e2:	dc00      	bgt.n	80019e6 <__aeabi_dmul+0x47a>
 80019e4:	e71e      	b.n	8001824 <__aeabi_dmul+0x2b8>
 80019e6:	4656      	mov	r6, sl
 80019e8:	3b08      	subs	r3, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	409e      	lsls	r6, r3
 80019ee:	e723      	b.n	8001838 <__aeabi_dmul+0x2cc>
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	469c      	mov	ip, r3
 80019f4:	e6e6      	b.n	80017c4 <__aeabi_dmul+0x258>
 80019f6:	4912      	ldr	r1, [pc, #72]	; (8001a40 <__aeabi_dmul+0x4d4>)
 80019f8:	0022      	movs	r2, r4
 80019fa:	4461      	add	r1, ip
 80019fc:	002e      	movs	r6, r5
 80019fe:	408d      	lsls	r5, r1
 8001a00:	408a      	lsls	r2, r1
 8001a02:	40c6      	lsrs	r6, r0
 8001a04:	1e69      	subs	r1, r5, #1
 8001a06:	418d      	sbcs	r5, r1
 8001a08:	4332      	orrs	r2, r6
 8001a0a:	432a      	orrs	r2, r5
 8001a0c:	40c4      	lsrs	r4, r0
 8001a0e:	0753      	lsls	r3, r2, #29
 8001a10:	d0b6      	beq.n	8001980 <__aeabi_dmul+0x414>
 8001a12:	210f      	movs	r1, #15
 8001a14:	4011      	ands	r1, r2
 8001a16:	2904      	cmp	r1, #4
 8001a18:	d1ac      	bne.n	8001974 <__aeabi_dmul+0x408>
 8001a1a:	e7b1      	b.n	8001980 <__aeabi_dmul+0x414>
 8001a1c:	0765      	lsls	r5, r4, #29
 8001a1e:	0264      	lsls	r4, r4, #9
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	08d2      	lsrs	r2, r2, #3
 8001a24:	4315      	orrs	r5, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	e601      	b.n	800162e <__aeabi_dmul+0xc2>
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0312      	lsls	r2, r2, #12
 8001a2e:	4314      	orrs	r4, r2
 8001a30:	0324      	lsls	r4, r4, #12
 8001a32:	4a01      	ldr	r2, [pc, #4]	; (8001a38 <__aeabi_dmul+0x4cc>)
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	e5fa      	b.n	800162e <__aeabi_dmul+0xc2>
 8001a38:	000007ff 	.word	0x000007ff
 8001a3c:	0000043e 	.word	0x0000043e
 8001a40:	0000041e 	.word	0x0000041e

08001a44 <__aeabi_dsub>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	4657      	mov	r7, sl
 8001a48:	464e      	mov	r6, r9
 8001a4a:	4645      	mov	r5, r8
 8001a4c:	46de      	mov	lr, fp
 8001a4e:	b5e0      	push	{r5, r6, r7, lr}
 8001a50:	001e      	movs	r6, r3
 8001a52:	0017      	movs	r7, r2
 8001a54:	004a      	lsls	r2, r1, #1
 8001a56:	030b      	lsls	r3, r1, #12
 8001a58:	0d52      	lsrs	r2, r2, #21
 8001a5a:	0a5b      	lsrs	r3, r3, #9
 8001a5c:	4690      	mov	r8, r2
 8001a5e:	0f42      	lsrs	r2, r0, #29
 8001a60:	431a      	orrs	r2, r3
 8001a62:	0fcd      	lsrs	r5, r1, #31
 8001a64:	4ccd      	ldr	r4, [pc, #820]	; (8001d9c <__aeabi_dsub+0x358>)
 8001a66:	0331      	lsls	r1, r6, #12
 8001a68:	00c3      	lsls	r3, r0, #3
 8001a6a:	4694      	mov	ip, r2
 8001a6c:	0070      	lsls	r0, r6, #1
 8001a6e:	0f7a      	lsrs	r2, r7, #29
 8001a70:	0a49      	lsrs	r1, r1, #9
 8001a72:	00ff      	lsls	r7, r7, #3
 8001a74:	469a      	mov	sl, r3
 8001a76:	46b9      	mov	r9, r7
 8001a78:	0d40      	lsrs	r0, r0, #21
 8001a7a:	0ff6      	lsrs	r6, r6, #31
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	42a0      	cmp	r0, r4
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x40>
 8001a82:	e0b1      	b.n	8001be8 <__aeabi_dsub+0x1a4>
 8001a84:	2201      	movs	r2, #1
 8001a86:	4056      	eors	r6, r2
 8001a88:	46b3      	mov	fp, r6
 8001a8a:	42b5      	cmp	r5, r6
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x4c>
 8001a8e:	e088      	b.n	8001ba2 <__aeabi_dsub+0x15e>
 8001a90:	4642      	mov	r2, r8
 8001a92:	1a12      	subs	r2, r2, r0
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	dc00      	bgt.n	8001a9a <__aeabi_dsub+0x56>
 8001a98:	e0ae      	b.n	8001bf8 <__aeabi_dsub+0x1b4>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x5c>
 8001a9e:	e0c1      	b.n	8001c24 <__aeabi_dsub+0x1e0>
 8001aa0:	48be      	ldr	r0, [pc, #760]	; (8001d9c <__aeabi_dsub+0x358>)
 8001aa2:	4580      	cmp	r8, r0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x64>
 8001aa6:	e151      	b.n	8001d4c <__aeabi_dsub+0x308>
 8001aa8:	2080      	movs	r0, #128	; 0x80
 8001aaa:	0400      	lsls	r0, r0, #16
 8001aac:	4301      	orrs	r1, r0
 8001aae:	2a38      	cmp	r2, #56	; 0x38
 8001ab0:	dd00      	ble.n	8001ab4 <__aeabi_dsub+0x70>
 8001ab2:	e17b      	b.n	8001dac <__aeabi_dsub+0x368>
 8001ab4:	2a1f      	cmp	r2, #31
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dsub+0x76>
 8001ab8:	e1ee      	b.n	8001e98 <__aeabi_dsub+0x454>
 8001aba:	2020      	movs	r0, #32
 8001abc:	003e      	movs	r6, r7
 8001abe:	1a80      	subs	r0, r0, r2
 8001ac0:	000c      	movs	r4, r1
 8001ac2:	40d6      	lsrs	r6, r2
 8001ac4:	40d1      	lsrs	r1, r2
 8001ac6:	4087      	lsls	r7, r0
 8001ac8:	4662      	mov	r2, ip
 8001aca:	4084      	lsls	r4, r0
 8001acc:	1a52      	subs	r2, r2, r1
 8001ace:	1e78      	subs	r0, r7, #1
 8001ad0:	4187      	sbcs	r7, r0
 8001ad2:	4694      	mov	ip, r2
 8001ad4:	4334      	orrs	r4, r6
 8001ad6:	4327      	orrs	r7, r4
 8001ad8:	1bdc      	subs	r4, r3, r7
 8001ada:	42a3      	cmp	r3, r4
 8001adc:	419b      	sbcs	r3, r3
 8001ade:	4662      	mov	r2, ip
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	d400      	bmi.n	8001aee <__aeabi_dsub+0xaa>
 8001aec:	e118      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 8001aee:	464b      	mov	r3, r9
 8001af0:	0258      	lsls	r0, r3, #9
 8001af2:	0a43      	lsrs	r3, r0, #9
 8001af4:	4699      	mov	r9, r3
 8001af6:	464b      	mov	r3, r9
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0xba>
 8001afc:	e137      	b.n	8001d6e <__aeabi_dsub+0x32a>
 8001afe:	4648      	mov	r0, r9
 8001b00:	f000 fbdc 	bl	80022bc <__clzsi2>
 8001b04:	0001      	movs	r1, r0
 8001b06:	3908      	subs	r1, #8
 8001b08:	2320      	movs	r3, #32
 8001b0a:	0022      	movs	r2, r4
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	1a5b      	subs	r3, r3, r1
 8001b10:	40da      	lsrs	r2, r3
 8001b12:	4088      	lsls	r0, r1
 8001b14:	408c      	lsls	r4, r1
 8001b16:	4643      	mov	r3, r8
 8001b18:	4310      	orrs	r0, r2
 8001b1a:	4588      	cmp	r8, r1
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0xdc>
 8001b1e:	e136      	b.n	8001d8e <__aeabi_dsub+0x34a>
 8001b20:	1ac9      	subs	r1, r1, r3
 8001b22:	1c4b      	adds	r3, r1, #1
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0xe6>
 8001b28:	e0ea      	b.n	8001d00 <__aeabi_dsub+0x2bc>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	0026      	movs	r6, r4
 8001b2e:	1ad2      	subs	r2, r2, r3
 8001b30:	0001      	movs	r1, r0
 8001b32:	4094      	lsls	r4, r2
 8001b34:	40de      	lsrs	r6, r3
 8001b36:	40d8      	lsrs	r0, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	4091      	lsls	r1, r2
 8001b3c:	1e62      	subs	r2, r4, #1
 8001b3e:	4194      	sbcs	r4, r2
 8001b40:	4681      	mov	r9, r0
 8001b42:	4698      	mov	r8, r3
 8001b44:	4331      	orrs	r1, r6
 8001b46:	430c      	orrs	r4, r1
 8001b48:	0763      	lsls	r3, r4, #29
 8001b4a:	d009      	beq.n	8001b60 <__aeabi_dsub+0x11c>
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	4023      	ands	r3, r4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d005      	beq.n	8001b60 <__aeabi_dsub+0x11c>
 8001b54:	1d23      	adds	r3, r4, #4
 8001b56:	42a3      	cmp	r3, r4
 8001b58:	41a4      	sbcs	r4, r4
 8001b5a:	4264      	negs	r4, r4
 8001b5c:	44a1      	add	r9, r4
 8001b5e:	001c      	movs	r4, r3
 8001b60:	464b      	mov	r3, r9
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	d400      	bmi.n	8001b68 <__aeabi_dsub+0x124>
 8001b66:	e0de      	b.n	8001d26 <__aeabi_dsub+0x2e2>
 8001b68:	4641      	mov	r1, r8
 8001b6a:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <__aeabi_dsub+0x358>)
 8001b6c:	3101      	adds	r1, #1
 8001b6e:	4299      	cmp	r1, r3
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x130>
 8001b72:	e0e7      	b.n	8001d44 <__aeabi_dsub+0x300>
 8001b74:	464b      	mov	r3, r9
 8001b76:	488a      	ldr	r0, [pc, #552]	; (8001da0 <__aeabi_dsub+0x35c>)
 8001b78:	08e4      	lsrs	r4, r4, #3
 8001b7a:	4003      	ands	r3, r0
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	0549      	lsls	r1, r1, #21
 8001b80:	075b      	lsls	r3, r3, #29
 8001b82:	0240      	lsls	r0, r0, #9
 8001b84:	4323      	orrs	r3, r4
 8001b86:	0d4a      	lsrs	r2, r1, #21
 8001b88:	0b04      	lsrs	r4, r0, #12
 8001b8a:	0512      	lsls	r2, r2, #20
 8001b8c:	07ed      	lsls	r5, r5, #31
 8001b8e:	4322      	orrs	r2, r4
 8001b90:	432a      	orrs	r2, r5
 8001b92:	0018      	movs	r0, r3
 8001b94:	0011      	movs	r1, r2
 8001b96:	bcf0      	pop	{r4, r5, r6, r7}
 8001b98:	46bb      	mov	fp, r7
 8001b9a:	46b2      	mov	sl, r6
 8001b9c:	46a9      	mov	r9, r5
 8001b9e:	46a0      	mov	r8, r4
 8001ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba2:	4642      	mov	r2, r8
 8001ba4:	1a12      	subs	r2, r2, r0
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	dd52      	ble.n	8001c50 <__aeabi_dsub+0x20c>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x16c>
 8001bae:	e09c      	b.n	8001cea <__aeabi_dsub+0x2a6>
 8001bb0:	45a0      	cmp	r8, r4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x172>
 8001bb4:	e0ca      	b.n	8001d4c <__aeabi_dsub+0x308>
 8001bb6:	2080      	movs	r0, #128	; 0x80
 8001bb8:	0400      	lsls	r0, r0, #16
 8001bba:	4301      	orrs	r1, r0
 8001bbc:	2a38      	cmp	r2, #56	; 0x38
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0x17e>
 8001bc0:	e149      	b.n	8001e56 <__aeabi_dsub+0x412>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x184>
 8001bc6:	e197      	b.n	8001ef8 <__aeabi_dsub+0x4b4>
 8001bc8:	0010      	movs	r0, r2
 8001bca:	000e      	movs	r6, r1
 8001bcc:	3820      	subs	r0, #32
 8001bce:	40c6      	lsrs	r6, r0
 8001bd0:	2a20      	cmp	r2, #32
 8001bd2:	d004      	beq.n	8001bde <__aeabi_dsub+0x19a>
 8001bd4:	2040      	movs	r0, #64	; 0x40
 8001bd6:	1a82      	subs	r2, r0, r2
 8001bd8:	4091      	lsls	r1, r2
 8001bda:	430f      	orrs	r7, r1
 8001bdc:	46b9      	mov	r9, r7
 8001bde:	464c      	mov	r4, r9
 8001be0:	1e62      	subs	r2, r4, #1
 8001be2:	4194      	sbcs	r4, r2
 8001be4:	4334      	orrs	r4, r6
 8001be6:	e13a      	b.n	8001e5e <__aeabi_dsub+0x41a>
 8001be8:	000a      	movs	r2, r1
 8001bea:	433a      	orrs	r2, r7
 8001bec:	d028      	beq.n	8001c40 <__aeabi_dsub+0x1fc>
 8001bee:	46b3      	mov	fp, r6
 8001bf0:	42b5      	cmp	r5, r6
 8001bf2:	d02b      	beq.n	8001c4c <__aeabi_dsub+0x208>
 8001bf4:	4a6b      	ldr	r2, [pc, #428]	; (8001da4 <__aeabi_dsub+0x360>)
 8001bf6:	4442      	add	r2, r8
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d05d      	beq.n	8001cb8 <__aeabi_dsub+0x274>
 8001bfc:	4642      	mov	r2, r8
 8001bfe:	4644      	mov	r4, r8
 8001c00:	1a82      	subs	r2, r0, r2
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x1c4>
 8001c06:	e0f5      	b.n	8001df4 <__aeabi_dsub+0x3b0>
 8001c08:	4665      	mov	r5, ip
 8001c0a:	431d      	orrs	r5, r3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x1cc>
 8001c0e:	e19c      	b.n	8001f4a <__aeabi_dsub+0x506>
 8001c10:	1e55      	subs	r5, r2, #1
 8001c12:	2a01      	cmp	r2, #1
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1d4>
 8001c16:	e1fb      	b.n	8002010 <__aeabi_dsub+0x5cc>
 8001c18:	4c60      	ldr	r4, [pc, #384]	; (8001d9c <__aeabi_dsub+0x358>)
 8001c1a:	42a2      	cmp	r2, r4
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1dc>
 8001c1e:	e1bd      	b.n	8001f9c <__aeabi_dsub+0x558>
 8001c20:	002a      	movs	r2, r5
 8001c22:	e0f0      	b.n	8001e06 <__aeabi_dsub+0x3c2>
 8001c24:	0008      	movs	r0, r1
 8001c26:	4338      	orrs	r0, r7
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x1e8>
 8001c2a:	e0c3      	b.n	8001db4 <__aeabi_dsub+0x370>
 8001c2c:	1e50      	subs	r0, r2, #1
 8001c2e:	2a01      	cmp	r2, #1
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x1f0>
 8001c32:	e1a8      	b.n	8001f86 <__aeabi_dsub+0x542>
 8001c34:	4c59      	ldr	r4, [pc, #356]	; (8001d9c <__aeabi_dsub+0x358>)
 8001c36:	42a2      	cmp	r2, r4
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x1f8>
 8001c3a:	e087      	b.n	8001d4c <__aeabi_dsub+0x308>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	e736      	b.n	8001aae <__aeabi_dsub+0x6a>
 8001c40:	2201      	movs	r2, #1
 8001c42:	4056      	eors	r6, r2
 8001c44:	46b3      	mov	fp, r6
 8001c46:	42b5      	cmp	r5, r6
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dsub+0x208>
 8001c4a:	e721      	b.n	8001a90 <__aeabi_dsub+0x4c>
 8001c4c:	4a55      	ldr	r2, [pc, #340]	; (8001da4 <__aeabi_dsub+0x360>)
 8001c4e:	4442      	add	r2, r8
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x212>
 8001c54:	e0b5      	b.n	8001dc2 <__aeabi_dsub+0x37e>
 8001c56:	4642      	mov	r2, r8
 8001c58:	4644      	mov	r4, r8
 8001c5a:	1a82      	subs	r2, r0, r2
 8001c5c:	2c00      	cmp	r4, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dsub+0x21e>
 8001c60:	e138      	b.n	8001ed4 <__aeabi_dsub+0x490>
 8001c62:	4e4e      	ldr	r6, [pc, #312]	; (8001d9c <__aeabi_dsub+0x358>)
 8001c64:	42b0      	cmp	r0, r6
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x226>
 8001c68:	e1de      	b.n	8002028 <__aeabi_dsub+0x5e4>
 8001c6a:	2680      	movs	r6, #128	; 0x80
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	0436      	lsls	r6, r6, #16
 8001c70:	4334      	orrs	r4, r6
 8001c72:	46a4      	mov	ip, r4
 8001c74:	2a38      	cmp	r2, #56	; 0x38
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_dsub+0x236>
 8001c78:	e196      	b.n	8001fa8 <__aeabi_dsub+0x564>
 8001c7a:	2a1f      	cmp	r2, #31
 8001c7c:	dd00      	ble.n	8001c80 <__aeabi_dsub+0x23c>
 8001c7e:	e224      	b.n	80020ca <__aeabi_dsub+0x686>
 8001c80:	2620      	movs	r6, #32
 8001c82:	1ab4      	subs	r4, r6, r2
 8001c84:	46a2      	mov	sl, r4
 8001c86:	4664      	mov	r4, ip
 8001c88:	4656      	mov	r6, sl
 8001c8a:	40b4      	lsls	r4, r6
 8001c8c:	46a1      	mov	r9, r4
 8001c8e:	001c      	movs	r4, r3
 8001c90:	464e      	mov	r6, r9
 8001c92:	40d4      	lsrs	r4, r2
 8001c94:	4326      	orrs	r6, r4
 8001c96:	0034      	movs	r4, r6
 8001c98:	4656      	mov	r6, sl
 8001c9a:	40b3      	lsls	r3, r6
 8001c9c:	1e5e      	subs	r6, r3, #1
 8001c9e:	41b3      	sbcs	r3, r6
 8001ca0:	431c      	orrs	r4, r3
 8001ca2:	4663      	mov	r3, ip
 8001ca4:	40d3      	lsrs	r3, r2
 8001ca6:	18c9      	adds	r1, r1, r3
 8001ca8:	19e4      	adds	r4, r4, r7
 8001caa:	42bc      	cmp	r4, r7
 8001cac:	41bf      	sbcs	r7, r7
 8001cae:	427f      	negs	r7, r7
 8001cb0:	46b9      	mov	r9, r7
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4489      	add	r9, r1
 8001cb6:	e0d8      	b.n	8001e6a <__aeabi_dsub+0x426>
 8001cb8:	4640      	mov	r0, r8
 8001cba:	4c3b      	ldr	r4, [pc, #236]	; (8001da8 <__aeabi_dsub+0x364>)
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	4220      	tst	r0, r4
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x280>
 8001cc2:	e0b4      	b.n	8001e2e <__aeabi_dsub+0x3ea>
 8001cc4:	4640      	mov	r0, r8
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	d000      	beq.n	8001ccc <__aeabi_dsub+0x288>
 8001cca:	e144      	b.n	8001f56 <__aeabi_dsub+0x512>
 8001ccc:	4660      	mov	r0, ip
 8001cce:	4318      	orrs	r0, r3
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x290>
 8001cd2:	e190      	b.n	8001ff6 <__aeabi_dsub+0x5b2>
 8001cd4:	0008      	movs	r0, r1
 8001cd6:	4338      	orrs	r0, r7
 8001cd8:	d000      	beq.n	8001cdc <__aeabi_dsub+0x298>
 8001cda:	e1aa      	b.n	8002032 <__aeabi_dsub+0x5ee>
 8001cdc:	4661      	mov	r1, ip
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	0749      	lsls	r1, r1, #29
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	4661      	mov	r1, ip
 8001ce6:	08cc      	lsrs	r4, r1, #3
 8001ce8:	e027      	b.n	8001d3a <__aeabi_dsub+0x2f6>
 8001cea:	0008      	movs	r0, r1
 8001cec:	4338      	orrs	r0, r7
 8001cee:	d061      	beq.n	8001db4 <__aeabi_dsub+0x370>
 8001cf0:	1e50      	subs	r0, r2, #1
 8001cf2:	2a01      	cmp	r2, #1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x2b4>
 8001cf6:	e139      	b.n	8001f6c <__aeabi_dsub+0x528>
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	d027      	beq.n	8001d4c <__aeabi_dsub+0x308>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	e75d      	b.n	8001bbc <__aeabi_dsub+0x178>
 8001d00:	0002      	movs	r2, r0
 8001d02:	391f      	subs	r1, #31
 8001d04:	40ca      	lsrs	r2, r1
 8001d06:	0011      	movs	r1, r2
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d003      	beq.n	8001d14 <__aeabi_dsub+0x2d0>
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4098      	lsls	r0, r3
 8001d12:	4304      	orrs	r4, r0
 8001d14:	1e63      	subs	r3, r4, #1
 8001d16:	419c      	sbcs	r4, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	4698      	mov	r8, r3
 8001d1e:	430c      	orrs	r4, r1
 8001d20:	0763      	lsls	r3, r4, #29
 8001d22:	d000      	beq.n	8001d26 <__aeabi_dsub+0x2e2>
 8001d24:	e712      	b.n	8001b4c <__aeabi_dsub+0x108>
 8001d26:	464b      	mov	r3, r9
 8001d28:	464a      	mov	r2, r9
 8001d2a:	08e4      	lsrs	r4, r4, #3
 8001d2c:	075b      	lsls	r3, r3, #29
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	08d4      	lsrs	r4, r2, #3
 8001d32:	4642      	mov	r2, r8
 8001d34:	4919      	ldr	r1, [pc, #100]	; (8001d9c <__aeabi_dsub+0x358>)
 8001d36:	428a      	cmp	r2, r1
 8001d38:	d00e      	beq.n	8001d58 <__aeabi_dsub+0x314>
 8001d3a:	0324      	lsls	r4, r4, #12
 8001d3c:	0552      	lsls	r2, r2, #21
 8001d3e:	0b24      	lsrs	r4, r4, #12
 8001d40:	0d52      	lsrs	r2, r2, #21
 8001d42:	e722      	b.n	8001b8a <__aeabi_dsub+0x146>
 8001d44:	000a      	movs	r2, r1
 8001d46:	2400      	movs	r4, #0
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e71e      	b.n	8001b8a <__aeabi_dsub+0x146>
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	4662      	mov	r2, ip
 8001d50:	0752      	lsls	r2, r2, #29
 8001d52:	4313      	orrs	r3, r2
 8001d54:	4662      	mov	r2, ip
 8001d56:	08d4      	lsrs	r4, r2, #3
 8001d58:	001a      	movs	r2, r3
 8001d5a:	4322      	orrs	r2, r4
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x31c>
 8001d5e:	e1fc      	b.n	800215a <__aeabi_dsub+0x716>
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0312      	lsls	r2, r2, #12
 8001d64:	4314      	orrs	r4, r2
 8001d66:	0324      	lsls	r4, r4, #12
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <__aeabi_dsub+0x358>)
 8001d6a:	0b24      	lsrs	r4, r4, #12
 8001d6c:	e70d      	b.n	8001b8a <__aeabi_dsub+0x146>
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f000 faa4 	bl	80022bc <__clzsi2>
 8001d74:	0001      	movs	r1, r0
 8001d76:	3118      	adds	r1, #24
 8001d78:	291f      	cmp	r1, #31
 8001d7a:	dc00      	bgt.n	8001d7e <__aeabi_dsub+0x33a>
 8001d7c:	e6c4      	b.n	8001b08 <__aeabi_dsub+0xc4>
 8001d7e:	3808      	subs	r0, #8
 8001d80:	4084      	lsls	r4, r0
 8001d82:	4643      	mov	r3, r8
 8001d84:	0020      	movs	r0, r4
 8001d86:	2400      	movs	r4, #0
 8001d88:	4588      	cmp	r8, r1
 8001d8a:	dc00      	bgt.n	8001d8e <__aeabi_dsub+0x34a>
 8001d8c:	e6c8      	b.n	8001b20 <__aeabi_dsub+0xdc>
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <__aeabi_dsub+0x35c>)
 8001d90:	1a5b      	subs	r3, r3, r1
 8001d92:	4010      	ands	r0, r2
 8001d94:	4698      	mov	r8, r3
 8001d96:	4681      	mov	r9, r0
 8001d98:	e6d6      	b.n	8001b48 <__aeabi_dsub+0x104>
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	000007ff 	.word	0x000007ff
 8001da0:	ff7fffff 	.word	0xff7fffff
 8001da4:	fffff801 	.word	0xfffff801
 8001da8:	000007fe 	.word	0x000007fe
 8001dac:	430f      	orrs	r7, r1
 8001dae:	1e7a      	subs	r2, r7, #1
 8001db0:	4197      	sbcs	r7, r2
 8001db2:	e691      	b.n	8001ad8 <__aeabi_dsub+0x94>
 8001db4:	4661      	mov	r1, ip
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	0749      	lsls	r1, r1, #29
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	4661      	mov	r1, ip
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e7b8      	b.n	8001d34 <__aeabi_dsub+0x2f0>
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	4cd3      	ldr	r4, [pc, #844]	; (8002114 <__aeabi_dsub+0x6d0>)
 8001dc6:	3001      	adds	r0, #1
 8001dc8:	4220      	tst	r0, r4
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x38a>
 8001dcc:	e0a2      	b.n	8001f14 <__aeabi_dsub+0x4d0>
 8001dce:	4640      	mov	r0, r8
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d000      	beq.n	8001dd6 <__aeabi_dsub+0x392>
 8001dd4:	e101      	b.n	8001fda <__aeabi_dsub+0x596>
 8001dd6:	4660      	mov	r0, ip
 8001dd8:	4318      	orrs	r0, r3
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x39a>
 8001ddc:	e15e      	b.n	800209c <__aeabi_dsub+0x658>
 8001dde:	0008      	movs	r0, r1
 8001de0:	4338      	orrs	r0, r7
 8001de2:	d000      	beq.n	8001de6 <__aeabi_dsub+0x3a2>
 8001de4:	e15f      	b.n	80020a6 <__aeabi_dsub+0x662>
 8001de6:	4661      	mov	r1, ip
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	0749      	lsls	r1, r1, #29
 8001dec:	430b      	orrs	r3, r1
 8001dee:	4661      	mov	r1, ip
 8001df0:	08cc      	lsrs	r4, r1, #3
 8001df2:	e7a2      	b.n	8001d3a <__aeabi_dsub+0x2f6>
 8001df4:	4dc8      	ldr	r5, [pc, #800]	; (8002118 <__aeabi_dsub+0x6d4>)
 8001df6:	42a8      	cmp	r0, r5
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x3b8>
 8001dfa:	e0cf      	b.n	8001f9c <__aeabi_dsub+0x558>
 8001dfc:	2580      	movs	r5, #128	; 0x80
 8001dfe:	4664      	mov	r4, ip
 8001e00:	042d      	lsls	r5, r5, #16
 8001e02:	432c      	orrs	r4, r5
 8001e04:	46a4      	mov	ip, r4
 8001e06:	2a38      	cmp	r2, #56	; 0x38
 8001e08:	dc56      	bgt.n	8001eb8 <__aeabi_dsub+0x474>
 8001e0a:	2a1f      	cmp	r2, #31
 8001e0c:	dd00      	ble.n	8001e10 <__aeabi_dsub+0x3cc>
 8001e0e:	e0d1      	b.n	8001fb4 <__aeabi_dsub+0x570>
 8001e10:	2520      	movs	r5, #32
 8001e12:	001e      	movs	r6, r3
 8001e14:	1aad      	subs	r5, r5, r2
 8001e16:	4664      	mov	r4, ip
 8001e18:	40ab      	lsls	r3, r5
 8001e1a:	40ac      	lsls	r4, r5
 8001e1c:	40d6      	lsrs	r6, r2
 8001e1e:	1e5d      	subs	r5, r3, #1
 8001e20:	41ab      	sbcs	r3, r5
 8001e22:	4334      	orrs	r4, r6
 8001e24:	4323      	orrs	r3, r4
 8001e26:	4664      	mov	r4, ip
 8001e28:	40d4      	lsrs	r4, r2
 8001e2a:	1b09      	subs	r1, r1, r4
 8001e2c:	e049      	b.n	8001ec2 <__aeabi_dsub+0x47e>
 8001e2e:	4660      	mov	r0, ip
 8001e30:	1bdc      	subs	r4, r3, r7
 8001e32:	1a46      	subs	r6, r0, r1
 8001e34:	42a3      	cmp	r3, r4
 8001e36:	4180      	sbcs	r0, r0
 8001e38:	4240      	negs	r0, r0
 8001e3a:	4681      	mov	r9, r0
 8001e3c:	0030      	movs	r0, r6
 8001e3e:	464e      	mov	r6, r9
 8001e40:	1b80      	subs	r0, r0, r6
 8001e42:	4681      	mov	r9, r0
 8001e44:	0200      	lsls	r0, r0, #8
 8001e46:	d476      	bmi.n	8001f36 <__aeabi_dsub+0x4f2>
 8001e48:	464b      	mov	r3, r9
 8001e4a:	4323      	orrs	r3, r4
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x40c>
 8001e4e:	e652      	b.n	8001af6 <__aeabi_dsub+0xb2>
 8001e50:	2400      	movs	r4, #0
 8001e52:	2500      	movs	r5, #0
 8001e54:	e771      	b.n	8001d3a <__aeabi_dsub+0x2f6>
 8001e56:	4339      	orrs	r1, r7
 8001e58:	000c      	movs	r4, r1
 8001e5a:	1e62      	subs	r2, r4, #1
 8001e5c:	4194      	sbcs	r4, r2
 8001e5e:	18e4      	adds	r4, r4, r3
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	425b      	negs	r3, r3
 8001e66:	4463      	add	r3, ip
 8001e68:	4699      	mov	r9, r3
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	d400      	bmi.n	8001e72 <__aeabi_dsub+0x42e>
 8001e70:	e756      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 8001e72:	2301      	movs	r3, #1
 8001e74:	469c      	mov	ip, r3
 8001e76:	4ba8      	ldr	r3, [pc, #672]	; (8002118 <__aeabi_dsub+0x6d4>)
 8001e78:	44e0      	add	r8, ip
 8001e7a:	4598      	cmp	r8, r3
 8001e7c:	d038      	beq.n	8001ef0 <__aeabi_dsub+0x4ac>
 8001e7e:	464b      	mov	r3, r9
 8001e80:	48a6      	ldr	r0, [pc, #664]	; (800211c <__aeabi_dsub+0x6d8>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	4003      	ands	r3, r0
 8001e86:	0018      	movs	r0, r3
 8001e88:	0863      	lsrs	r3, r4, #1
 8001e8a:	4014      	ands	r4, r2
 8001e8c:	431c      	orrs	r4, r3
 8001e8e:	07c3      	lsls	r3, r0, #31
 8001e90:	431c      	orrs	r4, r3
 8001e92:	0843      	lsrs	r3, r0, #1
 8001e94:	4699      	mov	r9, r3
 8001e96:	e657      	b.n	8001b48 <__aeabi_dsub+0x104>
 8001e98:	0010      	movs	r0, r2
 8001e9a:	000e      	movs	r6, r1
 8001e9c:	3820      	subs	r0, #32
 8001e9e:	40c6      	lsrs	r6, r0
 8001ea0:	2a20      	cmp	r2, #32
 8001ea2:	d004      	beq.n	8001eae <__aeabi_dsub+0x46a>
 8001ea4:	2040      	movs	r0, #64	; 0x40
 8001ea6:	1a82      	subs	r2, r0, r2
 8001ea8:	4091      	lsls	r1, r2
 8001eaa:	430f      	orrs	r7, r1
 8001eac:	46b9      	mov	r9, r7
 8001eae:	464f      	mov	r7, r9
 8001eb0:	1e7a      	subs	r2, r7, #1
 8001eb2:	4197      	sbcs	r7, r2
 8001eb4:	4337      	orrs	r7, r6
 8001eb6:	e60f      	b.n	8001ad8 <__aeabi_dsub+0x94>
 8001eb8:	4662      	mov	r2, ip
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	4193      	sbcs	r3, r2
 8001ec2:	1afc      	subs	r4, r7, r3
 8001ec4:	42a7      	cmp	r7, r4
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	427f      	negs	r7, r7
 8001eca:	1bcb      	subs	r3, r1, r7
 8001ecc:	4699      	mov	r9, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	4680      	mov	r8, r0
 8001ed2:	e608      	b.n	8001ae6 <__aeabi_dsub+0xa2>
 8001ed4:	4666      	mov	r6, ip
 8001ed6:	431e      	orrs	r6, r3
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x498>
 8001eda:	e0be      	b.n	800205a <__aeabi_dsub+0x616>
 8001edc:	1e56      	subs	r6, r2, #1
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x4a0>
 8001ee2:	e109      	b.n	80020f8 <__aeabi_dsub+0x6b4>
 8001ee4:	4c8c      	ldr	r4, [pc, #560]	; (8002118 <__aeabi_dsub+0x6d4>)
 8001ee6:	42a2      	cmp	r2, r4
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x4a8>
 8001eea:	e119      	b.n	8002120 <__aeabi_dsub+0x6dc>
 8001eec:	0032      	movs	r2, r6
 8001eee:	e6c1      	b.n	8001c74 <__aeabi_dsub+0x230>
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e648      	b.n	8001b8a <__aeabi_dsub+0x146>
 8001ef8:	2020      	movs	r0, #32
 8001efa:	000c      	movs	r4, r1
 8001efc:	1a80      	subs	r0, r0, r2
 8001efe:	003e      	movs	r6, r7
 8001f00:	4087      	lsls	r7, r0
 8001f02:	4084      	lsls	r4, r0
 8001f04:	40d6      	lsrs	r6, r2
 8001f06:	1e78      	subs	r0, r7, #1
 8001f08:	4187      	sbcs	r7, r0
 8001f0a:	40d1      	lsrs	r1, r2
 8001f0c:	4334      	orrs	r4, r6
 8001f0e:	433c      	orrs	r4, r7
 8001f10:	448c      	add	ip, r1
 8001f12:	e7a4      	b.n	8001e5e <__aeabi_dsub+0x41a>
 8001f14:	4a80      	ldr	r2, [pc, #512]	; (8002118 <__aeabi_dsub+0x6d4>)
 8001f16:	4290      	cmp	r0, r2
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dsub+0x4d8>
 8001f1a:	e0e9      	b.n	80020f0 <__aeabi_dsub+0x6ac>
 8001f1c:	19df      	adds	r7, r3, r7
 8001f1e:	429f      	cmp	r7, r3
 8001f20:	419b      	sbcs	r3, r3
 8001f22:	4461      	add	r1, ip
 8001f24:	425b      	negs	r3, r3
 8001f26:	18c9      	adds	r1, r1, r3
 8001f28:	07cc      	lsls	r4, r1, #31
 8001f2a:	087f      	lsrs	r7, r7, #1
 8001f2c:	084b      	lsrs	r3, r1, #1
 8001f2e:	4699      	mov	r9, r3
 8001f30:	4680      	mov	r8, r0
 8001f32:	433c      	orrs	r4, r7
 8001f34:	e6f4      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 8001f36:	1afc      	subs	r4, r7, r3
 8001f38:	42a7      	cmp	r7, r4
 8001f3a:	41bf      	sbcs	r7, r7
 8001f3c:	4663      	mov	r3, ip
 8001f3e:	427f      	negs	r7, r7
 8001f40:	1ac9      	subs	r1, r1, r3
 8001f42:	1bcb      	subs	r3, r1, r7
 8001f44:	4699      	mov	r9, r3
 8001f46:	465d      	mov	r5, fp
 8001f48:	e5d5      	b.n	8001af6 <__aeabi_dsub+0xb2>
 8001f4a:	08ff      	lsrs	r7, r7, #3
 8001f4c:	074b      	lsls	r3, r1, #29
 8001f4e:	465d      	mov	r5, fp
 8001f50:	433b      	orrs	r3, r7
 8001f52:	08cc      	lsrs	r4, r1, #3
 8001f54:	e6ee      	b.n	8001d34 <__aeabi_dsub+0x2f0>
 8001f56:	4662      	mov	r2, ip
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	d000      	beq.n	8001f5e <__aeabi_dsub+0x51a>
 8001f5c:	e082      	b.n	8002064 <__aeabi_dsub+0x620>
 8001f5e:	000b      	movs	r3, r1
 8001f60:	433b      	orrs	r3, r7
 8001f62:	d11b      	bne.n	8001f9c <__aeabi_dsub+0x558>
 8001f64:	2480      	movs	r4, #128	; 0x80
 8001f66:	2500      	movs	r5, #0
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	e6f9      	b.n	8001d60 <__aeabi_dsub+0x31c>
 8001f6c:	19dc      	adds	r4, r3, r7
 8001f6e:	429c      	cmp	r4, r3
 8001f70:	419b      	sbcs	r3, r3
 8001f72:	4461      	add	r1, ip
 8001f74:	4689      	mov	r9, r1
 8001f76:	425b      	negs	r3, r3
 8001f78:	4499      	add	r9, r3
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	d444      	bmi.n	800200a <__aeabi_dsub+0x5c6>
 8001f80:	2301      	movs	r3, #1
 8001f82:	4698      	mov	r8, r3
 8001f84:	e6cc      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 8001f86:	1bdc      	subs	r4, r3, r7
 8001f88:	4662      	mov	r2, ip
 8001f8a:	42a3      	cmp	r3, r4
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	1a51      	subs	r1, r2, r1
 8001f90:	425b      	negs	r3, r3
 8001f92:	1acb      	subs	r3, r1, r3
 8001f94:	4699      	mov	r9, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e5a4      	b.n	8001ae6 <__aeabi_dsub+0xa2>
 8001f9c:	08ff      	lsrs	r7, r7, #3
 8001f9e:	074b      	lsls	r3, r1, #29
 8001fa0:	465d      	mov	r5, fp
 8001fa2:	433b      	orrs	r3, r7
 8001fa4:	08cc      	lsrs	r4, r1, #3
 8001fa6:	e6d7      	b.n	8001d58 <__aeabi_dsub+0x314>
 8001fa8:	4662      	mov	r2, ip
 8001faa:	431a      	orrs	r2, r3
 8001fac:	0014      	movs	r4, r2
 8001fae:	1e63      	subs	r3, r4, #1
 8001fb0:	419c      	sbcs	r4, r3
 8001fb2:	e679      	b.n	8001ca8 <__aeabi_dsub+0x264>
 8001fb4:	0015      	movs	r5, r2
 8001fb6:	4664      	mov	r4, ip
 8001fb8:	3d20      	subs	r5, #32
 8001fba:	40ec      	lsrs	r4, r5
 8001fbc:	46a0      	mov	r8, r4
 8001fbe:	2a20      	cmp	r2, #32
 8001fc0:	d005      	beq.n	8001fce <__aeabi_dsub+0x58a>
 8001fc2:	2540      	movs	r5, #64	; 0x40
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	1aaa      	subs	r2, r5, r2
 8001fc8:	4094      	lsls	r4, r2
 8001fca:	4323      	orrs	r3, r4
 8001fcc:	469a      	mov	sl, r3
 8001fce:	4654      	mov	r4, sl
 8001fd0:	1e63      	subs	r3, r4, #1
 8001fd2:	419c      	sbcs	r4, r3
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	4323      	orrs	r3, r4
 8001fd8:	e773      	b.n	8001ec2 <__aeabi_dsub+0x47e>
 8001fda:	4662      	mov	r2, ip
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	d023      	beq.n	8002028 <__aeabi_dsub+0x5e4>
 8001fe0:	000a      	movs	r2, r1
 8001fe2:	433a      	orrs	r2, r7
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_dsub+0x5a4>
 8001fe6:	e0a0      	b.n	800212a <__aeabi_dsub+0x6e6>
 8001fe8:	4662      	mov	r2, ip
 8001fea:	08db      	lsrs	r3, r3, #3
 8001fec:	0752      	lsls	r2, r2, #29
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	4662      	mov	r2, ip
 8001ff2:	08d4      	lsrs	r4, r2, #3
 8001ff4:	e6b0      	b.n	8001d58 <__aeabi_dsub+0x314>
 8001ff6:	000b      	movs	r3, r1
 8001ff8:	433b      	orrs	r3, r7
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x5ba>
 8001ffc:	e728      	b.n	8001e50 <__aeabi_dsub+0x40c>
 8001ffe:	08ff      	lsrs	r7, r7, #3
 8002000:	074b      	lsls	r3, r1, #29
 8002002:	465d      	mov	r5, fp
 8002004:	433b      	orrs	r3, r7
 8002006:	08cc      	lsrs	r4, r1, #3
 8002008:	e697      	b.n	8001d3a <__aeabi_dsub+0x2f6>
 800200a:	2302      	movs	r3, #2
 800200c:	4698      	mov	r8, r3
 800200e:	e736      	b.n	8001e7e <__aeabi_dsub+0x43a>
 8002010:	1afc      	subs	r4, r7, r3
 8002012:	42a7      	cmp	r7, r4
 8002014:	41bf      	sbcs	r7, r7
 8002016:	4663      	mov	r3, ip
 8002018:	427f      	negs	r7, r7
 800201a:	1ac9      	subs	r1, r1, r3
 800201c:	1bcb      	subs	r3, r1, r7
 800201e:	4699      	mov	r9, r3
 8002020:	2301      	movs	r3, #1
 8002022:	465d      	mov	r5, fp
 8002024:	4698      	mov	r8, r3
 8002026:	e55e      	b.n	8001ae6 <__aeabi_dsub+0xa2>
 8002028:	074b      	lsls	r3, r1, #29
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	433b      	orrs	r3, r7
 800202e:	08cc      	lsrs	r4, r1, #3
 8002030:	e692      	b.n	8001d58 <__aeabi_dsub+0x314>
 8002032:	1bdc      	subs	r4, r3, r7
 8002034:	4660      	mov	r0, ip
 8002036:	42a3      	cmp	r3, r4
 8002038:	41b6      	sbcs	r6, r6
 800203a:	1a40      	subs	r0, r0, r1
 800203c:	4276      	negs	r6, r6
 800203e:	1b80      	subs	r0, r0, r6
 8002040:	4681      	mov	r9, r0
 8002042:	0200      	lsls	r0, r0, #8
 8002044:	d560      	bpl.n	8002108 <__aeabi_dsub+0x6c4>
 8002046:	1afc      	subs	r4, r7, r3
 8002048:	42a7      	cmp	r7, r4
 800204a:	41bf      	sbcs	r7, r7
 800204c:	4663      	mov	r3, ip
 800204e:	427f      	negs	r7, r7
 8002050:	1ac9      	subs	r1, r1, r3
 8002052:	1bcb      	subs	r3, r1, r7
 8002054:	4699      	mov	r9, r3
 8002056:	465d      	mov	r5, fp
 8002058:	e576      	b.n	8001b48 <__aeabi_dsub+0x104>
 800205a:	08ff      	lsrs	r7, r7, #3
 800205c:	074b      	lsls	r3, r1, #29
 800205e:	433b      	orrs	r3, r7
 8002060:	08cc      	lsrs	r4, r1, #3
 8002062:	e667      	b.n	8001d34 <__aeabi_dsub+0x2f0>
 8002064:	000a      	movs	r2, r1
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	433a      	orrs	r2, r7
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x62a>
 800206c:	e66f      	b.n	8001d4e <__aeabi_dsub+0x30a>
 800206e:	4662      	mov	r2, ip
 8002070:	0752      	lsls	r2, r2, #29
 8002072:	4313      	orrs	r3, r2
 8002074:	4662      	mov	r2, ip
 8002076:	08d4      	lsrs	r4, r2, #3
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	0312      	lsls	r2, r2, #12
 800207c:	4214      	tst	r4, r2
 800207e:	d007      	beq.n	8002090 <__aeabi_dsub+0x64c>
 8002080:	08c8      	lsrs	r0, r1, #3
 8002082:	4210      	tst	r0, r2
 8002084:	d104      	bne.n	8002090 <__aeabi_dsub+0x64c>
 8002086:	465d      	mov	r5, fp
 8002088:	0004      	movs	r4, r0
 800208a:	08fb      	lsrs	r3, r7, #3
 800208c:	0749      	lsls	r1, r1, #29
 800208e:	430b      	orrs	r3, r1
 8002090:	0f5a      	lsrs	r2, r3, #29
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	0752      	lsls	r2, r2, #29
 8002098:	4313      	orrs	r3, r2
 800209a:	e65d      	b.n	8001d58 <__aeabi_dsub+0x314>
 800209c:	074b      	lsls	r3, r1, #29
 800209e:	08ff      	lsrs	r7, r7, #3
 80020a0:	433b      	orrs	r3, r7
 80020a2:	08cc      	lsrs	r4, r1, #3
 80020a4:	e649      	b.n	8001d3a <__aeabi_dsub+0x2f6>
 80020a6:	19dc      	adds	r4, r3, r7
 80020a8:	429c      	cmp	r4, r3
 80020aa:	419b      	sbcs	r3, r3
 80020ac:	4461      	add	r1, ip
 80020ae:	4689      	mov	r9, r1
 80020b0:	425b      	negs	r3, r3
 80020b2:	4499      	add	r9, r3
 80020b4:	464b      	mov	r3, r9
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	d400      	bmi.n	80020bc <__aeabi_dsub+0x678>
 80020ba:	e631      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 80020bc:	464a      	mov	r2, r9
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <__aeabi_dsub+0x6d8>)
 80020c0:	401a      	ands	r2, r3
 80020c2:	2301      	movs	r3, #1
 80020c4:	4691      	mov	r9, r2
 80020c6:	4698      	mov	r8, r3
 80020c8:	e62a      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 80020ca:	0016      	movs	r6, r2
 80020cc:	4664      	mov	r4, ip
 80020ce:	3e20      	subs	r6, #32
 80020d0:	40f4      	lsrs	r4, r6
 80020d2:	46a0      	mov	r8, r4
 80020d4:	2a20      	cmp	r2, #32
 80020d6:	d005      	beq.n	80020e4 <__aeabi_dsub+0x6a0>
 80020d8:	2640      	movs	r6, #64	; 0x40
 80020da:	4664      	mov	r4, ip
 80020dc:	1ab2      	subs	r2, r6, r2
 80020de:	4094      	lsls	r4, r2
 80020e0:	4323      	orrs	r3, r4
 80020e2:	469a      	mov	sl, r3
 80020e4:	4654      	mov	r4, sl
 80020e6:	1e63      	subs	r3, r4, #1
 80020e8:	419c      	sbcs	r4, r3
 80020ea:	4643      	mov	r3, r8
 80020ec:	431c      	orrs	r4, r3
 80020ee:	e5db      	b.n	8001ca8 <__aeabi_dsub+0x264>
 80020f0:	0002      	movs	r2, r0
 80020f2:	2400      	movs	r4, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	e548      	b.n	8001b8a <__aeabi_dsub+0x146>
 80020f8:	19dc      	adds	r4, r3, r7
 80020fa:	42bc      	cmp	r4, r7
 80020fc:	41bf      	sbcs	r7, r7
 80020fe:	4461      	add	r1, ip
 8002100:	4689      	mov	r9, r1
 8002102:	427f      	negs	r7, r7
 8002104:	44b9      	add	r9, r7
 8002106:	e738      	b.n	8001f7a <__aeabi_dsub+0x536>
 8002108:	464b      	mov	r3, r9
 800210a:	4323      	orrs	r3, r4
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0x6cc>
 800210e:	e69f      	b.n	8001e50 <__aeabi_dsub+0x40c>
 8002110:	e606      	b.n	8001d20 <__aeabi_dsub+0x2dc>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	000007fe 	.word	0x000007fe
 8002118:	000007ff 	.word	0x000007ff
 800211c:	ff7fffff 	.word	0xff7fffff
 8002120:	08ff      	lsrs	r7, r7, #3
 8002122:	074b      	lsls	r3, r1, #29
 8002124:	433b      	orrs	r3, r7
 8002126:	08cc      	lsrs	r4, r1, #3
 8002128:	e616      	b.n	8001d58 <__aeabi_dsub+0x314>
 800212a:	4662      	mov	r2, ip
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	0752      	lsls	r2, r2, #29
 8002130:	4313      	orrs	r3, r2
 8002132:	4662      	mov	r2, ip
 8002134:	08d4      	lsrs	r4, r2, #3
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	0312      	lsls	r2, r2, #12
 800213a:	4214      	tst	r4, r2
 800213c:	d007      	beq.n	800214e <__aeabi_dsub+0x70a>
 800213e:	08c8      	lsrs	r0, r1, #3
 8002140:	4210      	tst	r0, r2
 8002142:	d104      	bne.n	800214e <__aeabi_dsub+0x70a>
 8002144:	465d      	mov	r5, fp
 8002146:	0004      	movs	r4, r0
 8002148:	08fb      	lsrs	r3, r7, #3
 800214a:	0749      	lsls	r1, r1, #29
 800214c:	430b      	orrs	r3, r1
 800214e:	0f5a      	lsrs	r2, r3, #29
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	0752      	lsls	r2, r2, #29
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	4313      	orrs	r3, r2
 8002158:	e5fe      	b.n	8001d58 <__aeabi_dsub+0x314>
 800215a:	2300      	movs	r3, #0
 800215c:	4a01      	ldr	r2, [pc, #4]	; (8002164 <__aeabi_dsub+0x720>)
 800215e:	001c      	movs	r4, r3
 8002160:	e513      	b.n	8001b8a <__aeabi_dsub+0x146>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	000007ff 	.word	0x000007ff

08002168 <__aeabi_dcmpun>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	0005      	movs	r5, r0
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <__aeabi_dcmpun+0x38>)
 800216e:	031c      	lsls	r4, r3, #12
 8002170:	0016      	movs	r6, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	030a      	lsls	r2, r1, #12
 8002176:	0049      	lsls	r1, r1, #1
 8002178:	0b12      	lsrs	r2, r2, #12
 800217a:	0d49      	lsrs	r1, r1, #21
 800217c:	0b24      	lsrs	r4, r4, #12
 800217e:	0d5b      	lsrs	r3, r3, #21
 8002180:	4281      	cmp	r1, r0
 8002182:	d008      	beq.n	8002196 <__aeabi_dcmpun+0x2e>
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <__aeabi_dcmpun+0x38>)
 8002186:	2000      	movs	r0, #0
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <__aeabi_dcmpun+0x2c>
 800218c:	0020      	movs	r0, r4
 800218e:	4330      	orrs	r0, r6
 8002190:	1e43      	subs	r3, r0, #1
 8002192:	4198      	sbcs	r0, r3
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	2001      	movs	r0, #1
 8002198:	432a      	orrs	r2, r5
 800219a:	d1fb      	bne.n	8002194 <__aeabi_dcmpun+0x2c>
 800219c:	e7f2      	b.n	8002184 <__aeabi_dcmpun+0x1c>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff

080021a4 <__aeabi_d2iz>:
 80021a4:	000a      	movs	r2, r1
 80021a6:	b530      	push	{r4, r5, lr}
 80021a8:	4c13      	ldr	r4, [pc, #76]	; (80021f8 <__aeabi_d2iz+0x54>)
 80021aa:	0053      	lsls	r3, r2, #1
 80021ac:	0309      	lsls	r1, r1, #12
 80021ae:	0005      	movs	r5, r0
 80021b0:	0b09      	lsrs	r1, r1, #12
 80021b2:	2000      	movs	r0, #0
 80021b4:	0d5b      	lsrs	r3, r3, #21
 80021b6:	0fd2      	lsrs	r2, r2, #31
 80021b8:	42a3      	cmp	r3, r4
 80021ba:	dd04      	ble.n	80021c6 <__aeabi_d2iz+0x22>
 80021bc:	480f      	ldr	r0, [pc, #60]	; (80021fc <__aeabi_d2iz+0x58>)
 80021be:	4283      	cmp	r3, r0
 80021c0:	dd02      	ble.n	80021c8 <__aeabi_d2iz+0x24>
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <__aeabi_d2iz+0x5c>)
 80021c4:	18d0      	adds	r0, r2, r3
 80021c6:	bd30      	pop	{r4, r5, pc}
 80021c8:	2080      	movs	r0, #128	; 0x80
 80021ca:	0340      	lsls	r0, r0, #13
 80021cc:	4301      	orrs	r1, r0
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <__aeabi_d2iz+0x60>)
 80021d0:	1ac0      	subs	r0, r0, r3
 80021d2:	281f      	cmp	r0, #31
 80021d4:	dd08      	ble.n	80021e8 <__aeabi_d2iz+0x44>
 80021d6:	480c      	ldr	r0, [pc, #48]	; (8002208 <__aeabi_d2iz+0x64>)
 80021d8:	1ac3      	subs	r3, r0, r3
 80021da:	40d9      	lsrs	r1, r3
 80021dc:	000b      	movs	r3, r1
 80021de:	4258      	negs	r0, r3
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d1f0      	bne.n	80021c6 <__aeabi_d2iz+0x22>
 80021e4:	0018      	movs	r0, r3
 80021e6:	e7ee      	b.n	80021c6 <__aeabi_d2iz+0x22>
 80021e8:	4c08      	ldr	r4, [pc, #32]	; (800220c <__aeabi_d2iz+0x68>)
 80021ea:	40c5      	lsrs	r5, r0
 80021ec:	46a4      	mov	ip, r4
 80021ee:	4463      	add	r3, ip
 80021f0:	4099      	lsls	r1, r3
 80021f2:	000b      	movs	r3, r1
 80021f4:	432b      	orrs	r3, r5
 80021f6:	e7f2      	b.n	80021de <__aeabi_d2iz+0x3a>
 80021f8:	000003fe 	.word	0x000003fe
 80021fc:	0000041d 	.word	0x0000041d
 8002200:	7fffffff 	.word	0x7fffffff
 8002204:	00000433 	.word	0x00000433
 8002208:	00000413 	.word	0x00000413
 800220c:	fffffbed 	.word	0xfffffbed

08002210 <__aeabi_i2d>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	2800      	cmp	r0, #0
 8002214:	d016      	beq.n	8002244 <__aeabi_i2d+0x34>
 8002216:	17c3      	asrs	r3, r0, #31
 8002218:	18c5      	adds	r5, r0, r3
 800221a:	405d      	eors	r5, r3
 800221c:	0fc4      	lsrs	r4, r0, #31
 800221e:	0028      	movs	r0, r5
 8002220:	f000 f84c 	bl	80022bc <__clzsi2>
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <__aeabi_i2d+0x5c>)
 8002226:	1a12      	subs	r2, r2, r0
 8002228:	280a      	cmp	r0, #10
 800222a:	dc16      	bgt.n	800225a <__aeabi_i2d+0x4a>
 800222c:	0003      	movs	r3, r0
 800222e:	002e      	movs	r6, r5
 8002230:	3315      	adds	r3, #21
 8002232:	409e      	lsls	r6, r3
 8002234:	230b      	movs	r3, #11
 8002236:	1a18      	subs	r0, r3, r0
 8002238:	40c5      	lsrs	r5, r0
 800223a:	0552      	lsls	r2, r2, #21
 800223c:	032d      	lsls	r5, r5, #12
 800223e:	0b2d      	lsrs	r5, r5, #12
 8002240:	0d53      	lsrs	r3, r2, #21
 8002242:	e003      	b.n	800224c <__aeabi_i2d+0x3c>
 8002244:	2400      	movs	r4, #0
 8002246:	2300      	movs	r3, #0
 8002248:	2500      	movs	r5, #0
 800224a:	2600      	movs	r6, #0
 800224c:	051b      	lsls	r3, r3, #20
 800224e:	432b      	orrs	r3, r5
 8002250:	07e4      	lsls	r4, r4, #31
 8002252:	4323      	orrs	r3, r4
 8002254:	0030      	movs	r0, r6
 8002256:	0019      	movs	r1, r3
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	380b      	subs	r0, #11
 800225c:	4085      	lsls	r5, r0
 800225e:	0552      	lsls	r2, r2, #21
 8002260:	032d      	lsls	r5, r5, #12
 8002262:	2600      	movs	r6, #0
 8002264:	0b2d      	lsrs	r5, r5, #12
 8002266:	0d53      	lsrs	r3, r2, #21
 8002268:	e7f0      	b.n	800224c <__aeabi_i2d+0x3c>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	0000041e 	.word	0x0000041e

08002270 <__aeabi_ui2d>:
 8002270:	b510      	push	{r4, lr}
 8002272:	1e04      	subs	r4, r0, #0
 8002274:	d010      	beq.n	8002298 <__aeabi_ui2d+0x28>
 8002276:	f000 f821 	bl	80022bc <__clzsi2>
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <__aeabi_ui2d+0x48>)
 800227c:	1a1b      	subs	r3, r3, r0
 800227e:	280a      	cmp	r0, #10
 8002280:	dc11      	bgt.n	80022a6 <__aeabi_ui2d+0x36>
 8002282:	220b      	movs	r2, #11
 8002284:	0021      	movs	r1, r4
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d1      	lsrs	r1, r2
 800228a:	3015      	adds	r0, #21
 800228c:	030a      	lsls	r2, r1, #12
 800228e:	055b      	lsls	r3, r3, #21
 8002290:	4084      	lsls	r4, r0
 8002292:	0b12      	lsrs	r2, r2, #12
 8002294:	0d5b      	lsrs	r3, r3, #21
 8002296:	e001      	b.n	800229c <__aeabi_ui2d+0x2c>
 8002298:	2300      	movs	r3, #0
 800229a:	2200      	movs	r2, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	4313      	orrs	r3, r2
 80022a0:	0020      	movs	r0, r4
 80022a2:	0019      	movs	r1, r3
 80022a4:	bd10      	pop	{r4, pc}
 80022a6:	0022      	movs	r2, r4
 80022a8:	380b      	subs	r0, #11
 80022aa:	4082      	lsls	r2, r0
 80022ac:	055b      	lsls	r3, r3, #21
 80022ae:	0312      	lsls	r2, r2, #12
 80022b0:	2400      	movs	r4, #0
 80022b2:	0b12      	lsrs	r2, r2, #12
 80022b4:	0d5b      	lsrs	r3, r3, #21
 80022b6:	e7f1      	b.n	800229c <__aeabi_ui2d+0x2c>
 80022b8:	0000041e 	.word	0x0000041e

080022bc <__clzsi2>:
 80022bc:	211c      	movs	r1, #28
 80022be:	2301      	movs	r3, #1
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0xe>
 80022c6:	0c00      	lsrs	r0, r0, #16
 80022c8:	3910      	subs	r1, #16
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	4298      	cmp	r0, r3
 80022ce:	d301      	bcc.n	80022d4 <__clzsi2+0x18>
 80022d0:	0a00      	lsrs	r0, r0, #8
 80022d2:	3908      	subs	r1, #8
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	4298      	cmp	r0, r3
 80022d8:	d301      	bcc.n	80022de <__clzsi2+0x22>
 80022da:	0900      	lsrs	r0, r0, #4
 80022dc:	3904      	subs	r1, #4
 80022de:	a202      	add	r2, pc, #8	; (adr r2, 80022e8 <__clzsi2+0x2c>)
 80022e0:	5c10      	ldrb	r0, [r2, r0]
 80022e2:	1840      	adds	r0, r0, r1
 80022e4:	4770      	bx	lr
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	02020304 	.word	0x02020304
 80022ec:	01010101 	.word	0x01010101
	...

080022f8 <__clzdi2>:
 80022f8:	b510      	push	{r4, lr}
 80022fa:	2900      	cmp	r1, #0
 80022fc:	d103      	bne.n	8002306 <__clzdi2+0xe>
 80022fe:	f7ff ffdd 	bl	80022bc <__clzsi2>
 8002302:	3020      	adds	r0, #32
 8002304:	e002      	b.n	800230c <__clzdi2+0x14>
 8002306:	0008      	movs	r0, r1
 8002308:	f7ff ffd8 	bl	80022bc <__clzsi2>
 800230c:	bd10      	pop	{r4, pc}
 800230e:	46c0      	nop			; (mov r8, r8)

08002310 <left_motor_drive>:
#include <stdio.h>
#include <string.h>

#define SENSORS_OFFSET 50

void left_motor_drive(int PWM, char command[]){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]

	PWM %= 101;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2165      	movs	r1, #101	; 0x65
 800231e:	0018      	movs	r0, r3
 8002320:	f7fe f888 	bl	8000434 <__aeabi_idivmod>
 8002324:	000b      	movs	r3, r1
 8002326:	607b      	str	r3, [r7, #4]

	if(!strcmp(command, "FORWARD")){
 8002328:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <left_motor_drive+0xe8>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	0011      	movs	r1, r2
 800232e:	0018      	movs	r0, r3
 8002330:	f7fd feea 	bl	8000108 <strcmp>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d110      	bne.n	800235a <left_motor_drive+0x4a>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <left_motor_drive+0xec>)
 800233a:	2200      	movs	r2, #0
 800233c:	2101      	movs	r1, #1
 800233e:	0018      	movs	r0, r3
 8002340:	f002 faa2 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <left_motor_drive+0xec>)
 8002346:	2201      	movs	r2, #1
 8002348:	2102      	movs	r1, #2
 800234a:	0018      	movs	r0, r3
 800234c:	f002 fa9c 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <left_motor_drive+0xf0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(!strcmp(command, "SOFT STOP")){
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	}
}
 8002358:	e049      	b.n	80023ee <left_motor_drive+0xde>
	}else if(!strcmp(command, "BACKWARD")){
 800235a:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <left_motor_drive+0xf4>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	0011      	movs	r1, r2
 8002360:	0018      	movs	r0, r3
 8002362:	f7fd fed1 	bl	8000108 <strcmp>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d110      	bne.n	800238c <left_motor_drive+0x7c>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <left_motor_drive+0xec>)
 800236c:	2201      	movs	r2, #1
 800236e:	2101      	movs	r1, #1
 8002370:	0018      	movs	r0, r3
 8002372:	f002 fa89 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <left_motor_drive+0xec>)
 8002378:	2200      	movs	r2, #0
 800237a:	2102      	movs	r1, #2
 800237c:	0018      	movs	r0, r3
 800237e:	f002 fa83 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <left_motor_drive+0xf0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
}
 800238a:	e030      	b.n	80023ee <left_motor_drive+0xde>
	}else if(!strcmp(command, "FAST STOP")){
 800238c:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <left_motor_drive+0xf8>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f7fd feb8 	bl	8000108 <strcmp>
 8002398:	1e03      	subs	r3, r0, #0
 800239a:	d110      	bne.n	80023be <left_motor_drive+0xae>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <left_motor_drive+0xec>)
 800239e:	2201      	movs	r2, #1
 80023a0:	2101      	movs	r1, #1
 80023a2:	0018      	movs	r0, r3
 80023a4:	f002 fa70 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <left_motor_drive+0xec>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	2102      	movs	r1, #2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f002 fa6a 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <left_motor_drive+0xf0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2264      	movs	r2, #100	; 0x64
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023bc:	e017      	b.n	80023ee <left_motor_drive+0xde>
	}else if(!strcmp(command, "SOFT STOP")){
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <left_motor_drive+0xfc>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	0011      	movs	r1, r2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fd fe9f 	bl	8000108 <strcmp>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d10f      	bne.n	80023ee <left_motor_drive+0xde>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <left_motor_drive+0xec>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	2101      	movs	r1, #1
 80023d4:	0018      	movs	r0, r3
 80023d6:	f002 fa57 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <left_motor_drive+0xec>)
 80023dc:	2201      	movs	r2, #1
 80023de:	2102      	movs	r1, #2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f002 fa51 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <left_motor_drive+0xf0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0800a490 	.word	0x0800a490
 80023fc:	50000800 	.word	0x50000800
 8002400:	200002e4 	.word	0x200002e4
 8002404:	0800a498 	.word	0x0800a498
 8002408:	0800a4a4 	.word	0x0800a4a4
 800240c:	0800a4b0 	.word	0x0800a4b0

08002410 <right_motor_drive>:

void right_motor_drive(int PWM, char command[]){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]

	PWM %= 101;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2165      	movs	r1, #101	; 0x65
 800241e:	0018      	movs	r0, r3
 8002420:	f7fe f808 	bl	8000434 <__aeabi_idivmod>
 8002424:	000b      	movs	r3, r1
 8002426:	607b      	str	r3, [r7, #4]

	if(!strcmp(command, "FORWARD")){
 8002428:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <right_motor_drive+0xe8>)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	0011      	movs	r1, r2
 800242e:	0018      	movs	r0, r3
 8002430:	f7fd fe6a 	bl	8000108 <strcmp>
 8002434:	1e03      	subs	r3, r0, #0
 8002436:	d110      	bne.n	800245a <right_motor_drive+0x4a>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <right_motor_drive+0xec>)
 800243a:	2200      	movs	r2, #0
 800243c:	2104      	movs	r1, #4
 800243e:	0018      	movs	r0, r3
 8002440:	f002 fa22 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <right_motor_drive+0xec>)
 8002446:	2201      	movs	r2, #1
 8002448:	2108      	movs	r1, #8
 800244a:	0018      	movs	r0, r3
 800244c:	f002 fa1c 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <right_motor_drive+0xf0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
	}else if(!strcmp(command, "SOFT STOP")){
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
	}
}
 8002458:	e049      	b.n	80024ee <right_motor_drive+0xde>
	}else if(!strcmp(command, "BACKWARD")){
 800245a:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <right_motor_drive+0xf4>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	0011      	movs	r1, r2
 8002460:	0018      	movs	r0, r3
 8002462:	f7fd fe51 	bl	8000108 <strcmp>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d110      	bne.n	800248c <right_motor_drive+0x7c>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <right_motor_drive+0xec>)
 800246c:	2201      	movs	r2, #1
 800246e:	2104      	movs	r1, #4
 8002470:	0018      	movs	r0, r3
 8002472:	f002 fa09 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <right_motor_drive+0xec>)
 8002478:	2200      	movs	r2, #0
 800247a:	2108      	movs	r1, #8
 800247c:	0018      	movs	r0, r3
 800247e:	f002 fa03 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <right_motor_drive+0xf0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800248a:	e030      	b.n	80024ee <right_motor_drive+0xde>
	}else if(!strcmp(command, "FAST STOP")){
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <right_motor_drive+0xf8>)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	0011      	movs	r1, r2
 8002492:	0018      	movs	r0, r3
 8002494:	f7fd fe38 	bl	8000108 <strcmp>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d110      	bne.n	80024be <right_motor_drive+0xae>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <right_motor_drive+0xec>)
 800249e:	2201      	movs	r2, #1
 80024a0:	2104      	movs	r1, #4
 80024a2:	0018      	movs	r0, r3
 80024a4:	f002 f9f0 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <right_motor_drive+0xec>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	2108      	movs	r1, #8
 80024ae:	0018      	movs	r0, r3
 80024b0:	f002 f9ea 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <right_motor_drive+0xf0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2264      	movs	r2, #100	; 0x64
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024bc:	e017      	b.n	80024ee <right_motor_drive+0xde>
	}else if(!strcmp(command, "SOFT STOP")){
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <right_motor_drive+0xfc>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7fd fe1f 	bl	8000108 <strcmp>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d10f      	bne.n	80024ee <right_motor_drive+0xde>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <right_motor_drive+0xec>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	2104      	movs	r1, #4
 80024d4:	0018      	movs	r0, r3
 80024d6:	f002 f9d7 	bl	8004888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <right_motor_drive+0xec>)
 80024dc:	2201      	movs	r2, #1
 80024de:	2108      	movs	r1, #8
 80024e0:	0018      	movs	r0, r3
 80024e2:	f002 f9d1 	bl	8004888 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <right_motor_drive+0xf0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	0800a490 	.word	0x0800a490
 80024fc:	50000800 	.word	0x50000800
 8002500:	200002e4 	.word	0x200002e4
 8002504:	0800a498 	.word	0x0800a498
 8002508:	0800a4a4 	.word	0x0800a4a4
 800250c:	0800a4b0 	.word	0x0800a4b0

08002510 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002516:	003b      	movs	r3, r7
 8002518:	0018      	movs	r0, r3
 800251a:	2308      	movs	r3, #8
 800251c:	001a      	movs	r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	f005 f9ba 	bl	8007898 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002526:	4a31      	ldr	r2, [pc, #196]	; (80025ec <MX_ADC_Init+0xdc>)
 8002528:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <MX_ADC_Init+0xd8>)
 800252c:	2200      	movs	r2, #0
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	05d2      	lsls	r2, r2, #23
 8002536:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <MX_ADC_Init+0xd8>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002540:	2207      	movs	r2, #7
 8002542:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002546:	2201      	movs	r2, #1
 8002548:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <MX_ADC_Init+0xd8>)
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002552:	2220      	movs	r2, #32
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <MX_ADC_Init+0xd8>)
 800255a:	2221      	movs	r2, #33	; 0x21
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002562:	2200      	movs	r2, #0
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002568:	22c2      	movs	r2, #194	; 0xc2
 800256a:	32ff      	adds	r2, #255	; 0xff
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002570:	222c      	movs	r2, #44	; 0x2c
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002578:	2204      	movs	r2, #4
 800257a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <MX_ADC_Init+0xd8>)
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <MX_ADC_Init+0xd8>)
 800258a:	2200      	movs	r2, #0
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <MX_ADC_Init+0xd8>)
 8002596:	0018      	movs	r0, r3
 8002598:	f001 f9be 	bl	8003918 <HAL_ADC_Init>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	d001      	beq.n	80025a4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80025a0:	f000 fdda 	bl	8003158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025a4:	003b      	movs	r3, r7
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025aa:	003b      	movs	r3, r7
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0152      	lsls	r2, r2, #5
 80025b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025b2:	003a      	movs	r2, r7
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <MX_ADC_Init+0xd8>)
 80025b6:	0011      	movs	r1, r2
 80025b8:	0018      	movs	r0, r3
 80025ba:	f001 fbbb 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d001      	beq.n	80025c6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80025c2:	f000 fdc9 	bl	8003158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025c6:	003b      	movs	r3, r7
 80025c8:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <MX_ADC_Init+0xe0>)
 80025ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025cc:	003a      	movs	r2, r7
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_ADC_Init+0xd8>)
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f001 fbae 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80025d8:	1e03      	subs	r3, r0, #0
 80025da:	d001      	beq.n	80025e0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80025dc:	f000 fdbc 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000020c 	.word	0x2000020c
 80025ec:	40012400 	.word	0x40012400
 80025f0:	04000002 	.word	0x04000002

080025f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	240c      	movs	r4, #12
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	0018      	movs	r0, r3
 8002602:	2314      	movs	r3, #20
 8002604:	001a      	movs	r2, r3
 8002606:	2100      	movs	r1, #0
 8002608:	f005 f946 	bl	8007898 <memset>
  if(adcHandle->Instance==ADC1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <HAL_ADC_MspInit+0xc8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d14d      	bne.n	80026b2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_ADC_MspInit+0xcc>)
 8002618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_ADC_MspInit+0xcc>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0089      	lsls	r1, r1, #2
 8002620:	430a      	orrs	r2, r1
 8002622:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_ADC_MspInit+0xcc>)
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_ADC_MspInit+0xcc>)
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_ADC_MspInit+0xcc>)
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800263c:	193b      	adds	r3, r7, r4
 800263e:	2203      	movs	r2, #3
 8002640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002642:	193b      	adds	r3, r7, r4
 8002644:	2203      	movs	r2, #3
 8002646:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	193b      	adds	r3, r7, r4
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	193a      	adds	r2, r7, r4
 8002650:	23a0      	movs	r3, #160	; 0xa0
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f001 ffa0 	bl	800459c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <HAL_ADC_MspInit+0xd4>)
 8002660:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0052      	lsls	r2, r2, #1
 8002680:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	00d2      	lsls	r2, r2, #3
 8002688:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 800268c:	2220      	movs	r2, #32
 800268e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 8002698:	0018      	movs	r0, r3
 800269a:	f001 fe73 	bl	8004384 <HAL_DMA_Init>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80026a2:	f000 fd59 	bl	8003158 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 80026aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_ADC_MspInit+0xd0>)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b009      	add	sp, #36	; 0x24
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	40012400 	.word	0x40012400
 80026c0:	40021000 	.word	0x40021000
 80026c4:	20000268 	.word	0x20000268
 80026c8:	40020008 	.word	0x40020008

080026cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_DMA_Init+0x28>)
 80026d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <MX_DMA_Init+0x28>)
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <MX_DMA_Init+0x28>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000

080026f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08b      	sub	sp, #44	; 0x2c
 80026fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	2414      	movs	r4, #20
 8002700:	193b      	adds	r3, r7, r4
 8002702:	0018      	movs	r0, r3
 8002704:	2314      	movs	r3, #20
 8002706:	001a      	movs	r2, r3
 8002708:	2100      	movs	r1, #0
 800270a:	f005 f8c5 	bl	8007898 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	4b40      	ldr	r3, [pc, #256]	; (8002810 <MX_GPIO_Init+0x118>)
 8002710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <MX_GPIO_Init+0x118>)
 8002714:	2104      	movs	r1, #4
 8002716:	430a      	orrs	r2, r1
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <MX_GPIO_Init+0x118>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	2204      	movs	r2, #4
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002726:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <MX_GPIO_Init+0x118>)
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <MX_GPIO_Init+0x118>)
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	430a      	orrs	r2, r1
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <MX_GPIO_Init+0x118>)
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <MX_GPIO_Init+0x118>)
 8002740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002742:	4b33      	ldr	r3, [pc, #204]	; (8002810 <MX_GPIO_Init+0x118>)
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <MX_GPIO_Init+0x118>)
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <MX_GPIO_Init+0x118>)
 8002758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <MX_GPIO_Init+0x118>)
 800275c:	2102      	movs	r1, #2
 800275e:	430a      	orrs	r2, r1
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <MX_GPIO_Init+0x118>)
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 800276e:	4b29      	ldr	r3, [pc, #164]	; (8002814 <MX_GPIO_Init+0x11c>)
 8002770:	2200      	movs	r2, #0
 8002772:	210f      	movs	r1, #15
 8002774:	0018      	movs	r0, r3
 8002776:	f002 f887 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800277a:	23a0      	movs	r3, #160	; 0xa0
 800277c:	05db      	lsls	r3, r3, #23
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	0018      	movs	r0, r3
 8002784:	f002 f880 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002788:	193b      	adds	r3, r7, r4
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	0192      	lsls	r2, r2, #6
 800278e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002790:	193b      	adds	r3, r7, r4
 8002792:	2284      	movs	r2, #132	; 0x84
 8002794:	0392      	lsls	r2, r2, #14
 8002796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <MX_GPIO_Init+0x11c>)
 80027a2:	0019      	movs	r1, r3
 80027a4:	0010      	movs	r0, r2
 80027a6:	f001 fef9 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 80027aa:	193b      	adds	r3, r7, r4
 80027ac:	220f      	movs	r2, #15
 80027ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	2201      	movs	r2, #1
 80027b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <MX_GPIO_Init+0x11c>)
 80027c6:	0019      	movs	r1, r3
 80027c8:	0010      	movs	r0, r2
 80027ca:	f001 fee7 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027ce:	0021      	movs	r1, r4
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2220      	movs	r2, #32
 80027d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2201      	movs	r2, #1
 80027da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027e8:	187a      	adds	r2, r7, r1
 80027ea:	23a0      	movs	r3, #160	; 0xa0
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f001 fed3 	bl	800459c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2101      	movs	r1, #1
 80027fa:	2007      	movs	r0, #7
 80027fc:	f001 fd90 	bl	8004320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002800:	2007      	movs	r0, #7
 8002802:	f001 fda2 	bl	800434a <HAL_NVIC_EnableIRQ>

}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b00b      	add	sp, #44	; 0x2c
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40021000 	.word	0x40021000
 8002814:	50000800 	.word	0x50000800

08002818 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	if (time < 250)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2bf9      	cmp	r3, #249	; 0xf9
 8002824:	d801      	bhi.n	800282a <calc_pulse+0x12>
		return PULSE_ERROR;
 8002826:	2305      	movs	r3, #5
 8002828:	e020      	b.n	800286c <calc_pulse+0x54>
	else if (time < 1200)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	2396      	movs	r3, #150	; 0x96
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	429a      	cmp	r2, r3
 8002832:	d201      	bcs.n	8002838 <calc_pulse+0x20>
		return PULSE_SHORT;
 8002834:	2304      	movs	r3, #4
 8002836:	e019      	b.n	800286c <calc_pulse+0x54>
	else if (time < 2000)
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	23fa      	movs	r3, #250	; 0xfa
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	429a      	cmp	r2, r3
 8002840:	d201      	bcs.n	8002846 <calc_pulse+0x2e>
		return PULSE_LONG;
 8002842:	2303      	movs	r3, #3
 8002844:	e012      	b.n	800286c <calc_pulse+0x54>
	else if (time < 3000)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <calc_pulse+0x5c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d801      	bhi.n	8002852 <calc_pulse+0x3a>
		return PULSE_2MS;
 800284e:	2302      	movs	r3, #2
 8002850:	e00c      	b.n	800286c <calc_pulse+0x54>
	else if (time < 6000)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a08      	ldr	r2, [pc, #32]	; (8002878 <calc_pulse+0x60>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d801      	bhi.n	800285e <calc_pulse+0x46>
		return PULSE_4MS;
 800285a:	2301      	movs	r3, #1
 800285c:	e006      	b.n	800286c <calc_pulse+0x54>
	else if (time < 12000)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <calc_pulse+0x64>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d801      	bhi.n	800286a <calc_pulse+0x52>
		return PULSE_9MS;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <calc_pulse+0x54>
	else
		return PULSE_ERROR;
 800286a:	2305      	movs	r3, #5
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}
 8002874:	00000bb7 	.word	0x00000bb7
 8002878:	0000176f 	.word	0x0000176f
 800287c:	00002edf 	.word	0x00002edf

08002880 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <ir_tim_interrupt+0xa4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b1f      	cmp	r3, #31
 800288c:	dc44      	bgt.n	8002918 <ir_tim_interrupt+0x98>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim21, TIM_CHANNEL_1));
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <ir_tim_interrupt+0xa8>)
 8002890:	2100      	movs	r1, #0
 8002892:	0018      	movs	r0, r3
 8002894:	f003 fe1a 	bl	80064cc <HAL_TIM_ReadCapturedValue>
 8002898:	0003      	movs	r3, r0
 800289a:	1dfc      	adds	r4, r7, #7
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff ffbb 	bl	8002818 <calc_pulse>
 80028a2:	0003      	movs	r3, r0
 80028a4:	7023      	strb	r3, [r4, #0]

	switch (pulse) {
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d008      	beq.n	80028c0 <ir_tim_interrupt+0x40>
 80028ae:	dc2f      	bgt.n	8002910 <ir_tim_interrupt+0x90>
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d010      	beq.n	80028d6 <ir_tim_interrupt+0x56>
 80028b4:	dc2c      	bgt.n	8002910 <ir_tim_interrupt+0x90>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d01b      	beq.n	80028f2 <ir_tim_interrupt+0x72>
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d020      	beq.n	8002900 <ir_tim_interrupt+0x80>
 80028be:	e027      	b.n	8002910 <ir_tim_interrupt+0x90>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <ir_tim_interrupt+0xac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	085a      	lsrs	r2, r3, #1
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <ir_tim_interrupt+0xac>)
 80028c8:	601a      	str	r2, [r3, #0]
		received_bits++;
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <ir_tim_interrupt+0xa4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <ir_tim_interrupt+0xa4>)
 80028d2:	601a      	str	r2, [r3, #0]
		break;
 80028d4:	e023      	b.n	800291e <ir_tim_interrupt+0x9e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <ir_tim_interrupt+0xac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	0612      	lsls	r2, r2, #24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <ir_tim_interrupt+0xac>)
 80028e4:	601a      	str	r2, [r3, #0]
		received_bits++;
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <ir_tim_interrupt+0xa4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <ir_tim_interrupt+0xa4>)
 80028ee:	601a      	str	r2, [r3, #0]
		break;
 80028f0:	e015      	b.n	800291e <ir_tim_interrupt+0x9e>
	case PULSE_4MS:
		received_value = 0;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <ir_tim_interrupt+0xac>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <ir_tim_interrupt+0xa4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
		break;
 80028fe:	e00e      	b.n	800291e <ir_tim_interrupt+0x9e>
	case PULSE_2MS:
		if (received_bits == 0)
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <ir_tim_interrupt+0xa4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <ir_tim_interrupt+0x9c>
			received_bits = 32;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <ir_tim_interrupt+0xa4>)
 800290a:	2220      	movs	r2, #32
 800290c:	601a      	str	r2, [r3, #0]
		break;
 800290e:	e005      	b.n	800291c <ir_tim_interrupt+0x9c>
	default:
		received_bits = 0;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <ir_tim_interrupt+0xa4>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
		break;
 8002916:	e002      	b.n	800291e <ir_tim_interrupt+0x9e>
		return;
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	e000      	b.n	800291e <ir_tim_interrupt+0x9e>
		break;
 800291c:	46c0      	nop			; (mov r8, r8)
	}
}
 800291e:	46bd      	mov	sp, r7
 8002920:	b003      	add	sp, #12
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	200002b4 	.word	0x200002b4
 8002928:	20000324 	.word	0x20000324
 800292c:	200002b0 	.word	0x200002b0

08002930 <ir_read>:
	  HAL_TIM_Base_Start(&htim21);
	  HAL_TIM_IC_Start_IT(&htim21, TIM_CHANNEL_1);
}

int ir_read(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <ir_read+0x30>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b20      	cmp	r3, #32
 800293c:	d002      	beq.n	8002944 <ir_read+0x14>
		return -1;
 800293e:	2301      	movs	r3, #1
 8002940:	425b      	negs	r3, r3
 8002942:	e009      	b.n	8002958 <ir_read+0x28>

	uint8_t value = received_value >> 16;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <ir_read+0x34>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0c1a      	lsrs	r2, r3, #16
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	701a      	strb	r2, [r3, #0]
	received_bits = 0;
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <ir_read+0x30>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
	return value;
 8002954:	1dfb      	adds	r3, r7, #7
 8002956:	781b      	ldrb	r3, [r3, #0]
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200002b4 	.word	0x200002b4
 8002964:	200002b0 	.word	0x200002b0

08002968 <returnError>:


///////////////////////////////////////////////////// PID  /////////////////////////////////////////////////////////////
//return error
int returnError(int ADCdiff )
{ int err;
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]


  //Only inner right sensor is on black
  	  	  	  	  	  // Tylko prawy sensor widzi czarne
  if(ADCdiff < (-1 * adcX) )
 8002970:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <returnError+0x8c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	425b      	negs	r3, r3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	da06      	bge.n	800298a <returnError+0x22>
  { //err = -2;
  err = -1;
 800297c:	2301      	movs	r3, #1
 800297e:	425b      	negs	r3, r3
 8002980:	60fb      	str	r3, [r7, #12]
  basic_speed = 10;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <returnError+0x90>)
 8002984:	220a      	movs	r2, #10
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e02e      	b.n	80029e8 <returnError+0x80>
    }


  //Only middle sensor is on black
  //oba sensory widzą czarne
  else if( (ADCdiff > adcX) && (ADCdiff < (-1 * adcX) ) )
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <returnError+0x8c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dd0b      	ble.n	80029ac <returnError+0x44>
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <returnError+0x8c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	425b      	negs	r3, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	da05      	bge.n	80029ac <returnError+0x44>
  { err = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  basic_speed = 40;
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <returnError+0x90>)
 80029a6:	2228      	movs	r2, #40	; 0x28
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e01d      	b.n	80029e8 <returnError+0x80>
   }


  // Inner left sensor is on black
  	  	  	  	  	  // Tylko lewy sensor widzi czarne
  else if(ADCdiff > adcX)
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <returnError+0x8c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	dd05      	ble.n	80029c2 <returnError+0x5a>
  { //err = 2;
  err = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
  basic_speed = 10;
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <returnError+0x90>)
 80029bc:	220a      	movs	r2, #10
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e012      	b.n	80029e8 <returnError+0x80>
    }


  // INTERSECTION (All sensors are on black)
  	  	  	  	  	  // Oba sensory widzą czarne
  else if( (ADCdiff > adcX) && (ADCdiff < (-1 * adcX) ) )
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <returnError+0x8c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dd0d      	ble.n	80029e8 <returnError+0x80>
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <returnError+0x8c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	425b      	negs	r3, r3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	da07      	bge.n	80029e8 <returnError+0x80>
  { intersection = true;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <returnError+0x94>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    err = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
    basic_speed = 40;
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <returnError+0x90>)
 80029e4:	2228      	movs	r2, #40	; 0x28
 80029e6:	601a      	str	r2, [r3, #0]
   }
  // Return error
  return err;}
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	200002dc 	.word	0x200002dc
 80029fc:	200002b8 	.word	0x200002b8

08002a00 <calcPID>:

//calculates and returns PID error
int calcPID(int error, int previousError)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  P = error;
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <calcPID+0x70>)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	601a      	str	r2, [r3, #0]
  I = I + error;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <calcPID+0x74>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	18d2      	adds	r2, r2, r3
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <calcPID+0x74>)
 8002a1a:	601a      	str	r2, [r3, #0]
  D = error-previousError;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <calcPID+0x78>)
 8002a24:	601a      	str	r2, [r3, #0]
  int pid = (Kp*P) + (Ki*I) + (Kd*D);
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <calcPID+0x7c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <calcPID+0x70>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	435a      	muls	r2, r3
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <calcPID+0x80>)
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <calcPID+0x74>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	434b      	muls	r3, r1
 8002a3a:	18d2      	adds	r2, r2, r3
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <calcPID+0x84>)
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <calcPID+0x78>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	434b      	muls	r3, r1
 8002a46:	18d3      	adds	r3, r2, r3
 8002a48:	60fb      	str	r3, [r7, #12]
  printf("\t\t\tStary PID = %i \n", pid);
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <calcPID+0x88>)
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f005 fb97 	bl	8008184 <iprintf>
 // pid = pid % 11;
 // pid = pid % 7;
  pid = pid % 19;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2113      	movs	r1, #19
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7fd fcea 	bl	8000434 <__aeabi_idivmod>
 8002a60:	000b      	movs	r3, r1
 8002a62:	60fb      	str	r3, [r7, #12]
  return pid;
 8002a64:	68fb      	ldr	r3, [r7, #12]
};
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	200002c8 	.word	0x200002c8
 8002a74:	200002cc 	.word	0x200002cc
 8002a78:	200002d0 	.word	0x200002d0
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000004 	.word	0x20000004
 8002a84:	20000008 	.word	0x20000008
 8002a88:	0800a4bc 	.word	0x0800a4bc

08002a8c <setLeftRightSpeed>:

// set motor speed based on PID error
void setLeftRightSpeed(int PIDval)
{ int rightSpeed = rightInitSpeed + PIDval;
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	2346      	movs	r3, #70	; 0x46
 8002a96:	001a      	movs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

//  int leftSpeed = leftInitSpeed - PIDval; // ----------------------------- ???????????????????
	int leftSpeed = leftInitSpeed + PIDval;
 8002a9e:	2346      	movs	r3, #70	; 0x46
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	189b      	adds	r3, r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]


  rightSpeed = rightSpeed % 100;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fd fcc1 	bl	8000434 <__aeabi_idivmod>
 8002ab2:	000b      	movs	r3, r1
 8002ab4:	60fb      	str	r3, [r7, #12]
  leftSpeed = leftSpeed % 100;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd fcba 	bl	8000434 <__aeabi_idivmod>
 8002ac0:	000b      	movs	r3, r1
 8002ac2:	60bb      	str	r3, [r7, #8]

  //rightSpeed = 70;
  //leftSpeed = 70;

  rightSpeed = rightSpeed % 79;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	214f      	movs	r1, #79	; 0x4f
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fd fcb3 	bl	8000434 <__aeabi_idivmod>
 8002ace:	000b      	movs	r3, r1
 8002ad0:	60fb      	str	r3, [r7, #12]
  leftSpeed = leftSpeed % 79;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	214f      	movs	r1, #79	; 0x4f
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7fd fcac 	bl	8000434 <__aeabi_idivmod>
 8002adc:	000b      	movs	r3, r1
 8002ade:	60bb      	str	r3, [r7, #8]

  if(rightSpeed < 65)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	dc01      	bgt.n	8002aea <setLeftRightSpeed+0x5e>
  {
	  rightSpeed = 65;
 8002ae6:	2341      	movs	r3, #65	; 0x41
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if(leftSpeed < 65)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	dc01      	bgt.n	8002af4 <setLeftRightSpeed+0x68>
    {
	  leftSpeed = 65;
 8002af0:	2341      	movs	r3, #65	; 0x41
 8002af2:	60bb      	str	r3, [r7, #8]
    }

  printf("\t\t\tPID = %i \n", PIDval);
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <setLeftRightSpeed+0x1d4>)
 8002af8:	0011      	movs	r1, r2
 8002afa:	0018      	movs	r0, r3
 8002afc:	f005 fb42 	bl	8008184 <iprintf>

  if(ADCdiff > adcX)		// - skret w lewo -
 8002b00:	4b58      	ldr	r3, [pc, #352]	; (8002c64 <setLeftRightSpeed+0x1d8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	5e9b      	ldrsh	r3, [r3, r2]
 8002b06:	001a      	movs	r2, r3
 8002b08:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <setLeftRightSpeed+0x1dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dd30      	ble.n	8002b72 <setLeftRightSpeed+0xe6>
  {
	  printf("ADCdiff = %i \n", ADCdiff);
 8002b10:	4b54      	ldr	r3, [pc, #336]	; (8002c64 <setLeftRightSpeed+0x1d8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	5e9b      	ldrsh	r3, [r3, r2]
 8002b16:	001a      	movs	r2, r3
 8002b18:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <setLeftRightSpeed+0x1e0>)
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f005 fb31 	bl	8008184 <iprintf>
	  printf("Right Speed = %i \n", rightSpeed);
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4b52      	ldr	r3, [pc, #328]	; (8002c70 <setLeftRightSpeed+0x1e4>)
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f005 fb2b 	bl	8008184 <iprintf>
	  printf("Left Speed = %i \n", leftSpeed);
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <setLeftRightSpeed+0x1e8>)
 8002b32:	0011      	movs	r1, r2
 8002b34:	0018      	movs	r0, r3
 8002b36:	f005 fb25 	bl	8008184 <iprintf>
	  	   // Swiecenie na Zielono
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	0099      	lsls	r1, r3, #2
 8002b3e:	23a0      	movs	r3, #160	; 0xa0
 8002b40:	05db      	lsls	r3, r3, #23
 8002b42:	2201      	movs	r2, #1
 8002b44:	0018      	movs	r0, r3
 8002b46:	f001 fe9f 	bl	8004888 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	0059      	lsls	r1, r3, #1
 8002b4e:	23a0      	movs	r3, #160	; 0xa0
 8002b50:	05db      	lsls	r3, r3, #23
 8002b52:	2200      	movs	r2, #0
 8002b54:	0018      	movs	r0, r3
 8002b56:	f001 fe97 	bl	8004888 <HAL_GPIO_WritePin>
	  // ////////////////////////////////////////////////////
	  left_motor_drive(50, "SOFT STOP");
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <setLeftRightSpeed+0x1ec>)
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	2032      	movs	r0, #50	; 0x32
 8002b60:	f7ff fbd6 	bl	8002310 <left_motor_drive>
	  right_motor_drive(rightSpeed, "FORWARD");
 8002b64:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <setLeftRightSpeed+0x1f0>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7ff fc50 	bl	8002410 <right_motor_drive>
 8002b70:	e068      	b.n	8002c44 <setLeftRightSpeed+0x1b8>
	  // ////////////////////////////////////////////////////
  }
  else if(ADCdiff < (-1 * adcX))	// - skret w prawo -
 8002b72:	4b3c      	ldr	r3, [pc, #240]	; (8002c64 <setLeftRightSpeed+0x1d8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	5e9b      	ldrsh	r3, [r3, r2]
 8002b78:	001a      	movs	r2, r3
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <setLeftRightSpeed+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	425b      	negs	r3, r3
 8002b80:	429a      	cmp	r2, r3
 8002b82:	da30      	bge.n	8002be6 <setLeftRightSpeed+0x15a>
  {
	  printf("ADCdiff = %i \n", ADCdiff);
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <setLeftRightSpeed+0x1d8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	5e9b      	ldrsh	r3, [r3, r2]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <setLeftRightSpeed+0x1e0>)
 8002b8e:	0011      	movs	r1, r2
 8002b90:	0018      	movs	r0, r3
 8002b92:	f005 faf7 	bl	8008184 <iprintf>
	  printf("Right Speed = %i \n", rightSpeed);
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <setLeftRightSpeed+0x1e4>)
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f005 faf1 	bl	8008184 <iprintf>
	  printf("Left Speed = %i \n", leftSpeed);
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <setLeftRightSpeed+0x1e8>)
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f005 faeb 	bl	8008184 <iprintf>
	  	   // Swiecenie na Czerwono
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	0099      	lsls	r1, r3, #2
 8002bb2:	23a0      	movs	r3, #160	; 0xa0
 8002bb4:	05db      	lsls	r3, r3, #23
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f001 fe65 	bl	8004888 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	0059      	lsls	r1, r3, #1
 8002bc2:	23a0      	movs	r3, #160	; 0xa0
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f001 fe5d 	bl	8004888 <HAL_GPIO_WritePin>
	  // ////////////////////////////////////////////////////
	  left_motor_drive(leftSpeed, "FORWARD");
 8002bce:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <setLeftRightSpeed+0x1f0>)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff fb9b 	bl	8002310 <left_motor_drive>
	  right_motor_drive(50, "SOFT STOP");
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <setLeftRightSpeed+0x1ec>)
 8002bdc:	0019      	movs	r1, r3
 8002bde:	2032      	movs	r0, #50	; 0x32
 8002be0:	f7ff fc16 	bl	8002410 <right_motor_drive>
 8002be4:	e02e      	b.n	8002c44 <setLeftRightSpeed+0x1b8>
	  // ////////////////////////////////////////////////////
  }
  else		// - jazda prosto -
  {
	  printf("ADCdiff = %i \n", ADCdiff);
 8002be6:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <setLeftRightSpeed+0x1d8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	5e9b      	ldrsh	r3, [r3, r2]
 8002bec:	001a      	movs	r2, r3
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <setLeftRightSpeed+0x1e0>)
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f005 fac6 	bl	8008184 <iprintf>
	  printf("Right Speed = %i \n", rightSpeed);
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <setLeftRightSpeed+0x1e4>)
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f005 fac0 	bl	8008184 <iprintf>
	  printf("Left Speed = %i \n", leftSpeed);
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <setLeftRightSpeed+0x1e8>)
 8002c08:	0011      	movs	r1, r2
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f005 faba 	bl	8008184 <iprintf>
	  	   // Swiecenie na Zolto
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	23a0      	movs	r3, #160	; 0xa0
 8002c16:	05db      	lsls	r3, r3, #23
 8002c18:	2200      	movs	r2, #0
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f001 fe34 	bl	8004888 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	0059      	lsls	r1, r3, #1
 8002c24:	23a0      	movs	r3, #160	; 0xa0
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	2200      	movs	r2, #0
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f001 fe2c 	bl	8004888 <HAL_GPIO_WritePin>
//	  left_motor_drive(85,"FORWARD");
//	  right_motor_drive(85,"FORWARD");
	  left_motor_drive(70,"FORWARD");
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <setLeftRightSpeed+0x1f0>)
 8002c32:	0019      	movs	r1, r3
 8002c34:	2046      	movs	r0, #70	; 0x46
 8002c36:	f7ff fb6b 	bl	8002310 <left_motor_drive>
	  right_motor_drive(70,"FORWARD");
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <setLeftRightSpeed+0x1f0>)
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	2046      	movs	r0, #70	; 0x46
 8002c40:	f7ff fbe6 	bl	8002410 <right_motor_drive>
  }



  if(rightSpeed <= 0)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	dc01      	bgt.n	8002c4e <setLeftRightSpeed+0x1c2>
  {
	  rightSpeed = 10;
 8002c4a:	230a      	movs	r3, #10
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if(leftSpeed <= 0)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	dc01      	bgt.n	8002c58 <setLeftRightSpeed+0x1cc>
  {
	  leftSpeed = 10;
 8002c54:	230a      	movs	r3, #10
 8002c56:	60bb      	str	r3, [r7, #8]
  }



};
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	0800a4d0 	.word	0x0800a4d0
 8002c64:	200002d4 	.word	0x200002d4
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	0800a4e0 	.word	0x0800a4e0
 8002c70:	0800a4f0 	.word	0x0800a4f0
 8002c74:	0800a504 	.word	0x0800a504
 8002c78:	0800a518 	.word	0x0800a518
 8002c7c:	0800a524 	.word	0x0800a524

08002c80 <followLine>:
  }
}
// */
// follows straight line
void followLine()
{ //Read Sensor
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  int * ADCdiff = ADCvalue[0] - ADCvalue[1];
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <followLine+0x58>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <followLine+0x58>)
 8002c90:	885b      	ldrh	r3, [r3, #2]
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	607b      	str	r3, [r7, #4]
  //Error for PID
  error = returnError(ADCdiff);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7ff fe64 	bl	8002968 <returnError>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <followLine+0x5c>)
 8002ca4:	601a      	str	r2, [r3, #0]
  // PID Calculation
  PIDvalue = calcPID(error, previousError);
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <followLine+0x5c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <followLine+0x60>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f7ff fea5 	bl	8002a00 <calcPID>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <followLine+0x64>)
 8002cba:	601a      	str	r2, [r3, #0]
  previousError = error;
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <followLine+0x5c>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <followLine+0x60>)
 8002cc2:	601a      	str	r2, [r3, #0]
  // Set motor speeds based on error
  setLeftRightSpeed(PIDvalue);
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <followLine+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff fedf 	bl	8002a8c <setLeftRightSpeed>

};//end followLine()
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	200002d8 	.word	0x200002d8
 8002cdc:	200002c4 	.word	0x200002c4
 8002ce0:	200002bc 	.word	0x200002bc
 8002ce4:	200002c0 	.word	0x200002c0

08002ce8 <__io_putchar>:




int __io_putchar(int ch)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b0a      	cmp	r3, #10
 8002cf4:	d102      	bne.n	8002cfc <__io_putchar+0x14>
    __io_putchar('\r');
 8002cf6:	200d      	movs	r0, #13
 8002cf8:	f7ff fff6 	bl	8002ce8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	425b      	negs	r3, r3
 8002d00:	1d39      	adds	r1, r7, #4
 8002d02:	4804      	ldr	r0, [pc, #16]	; (8002d14 <__io_putchar+0x2c>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	f004 f8b1 	bl	8006e6c <HAL_UART_Transmit>

  return 1;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000364 	.word	0x20000364

08002d18 <HAL_GPIO_EXTI_Callback>:
}state_t;

volatile state_t state = OFF;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	0002      	movs	r2, r0
 8002d20:	1dbb      	adds	r3, r7, #6
 8002d22:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin) {
 8002d24:	1dbb      	adds	r3, r7, #6
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	019b      	lsls	r3, r3, #6
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10b      	bne.n	8002d48 <HAL_GPIO_EXTI_Callback+0x30>
	  if(state == ON){
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_GPIO_EXTI_Callback+0x38>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_GPIO_EXTI_Callback+0x2a>
		  state = OFF;
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_GPIO_EXTI_Callback+0x38>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
	  }else{
		  state = ON;
	  }
  }
}
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_EXTI_Callback+0x30>
		  state = ON;
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_GPIO_EXTI_Callback+0x38>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000010 	.word	0x20000010

08002d54 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if (htim == &htim21)
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_IC_CaptureCallback+0x24>
  {
    switch (HAL_TIM_GetActiveChannel(&htim21))
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002d66:	0018      	movs	r0, r3
 8002d68:	f003 fc04 	bl	8006574 <HAL_TIM_GetActiveChannel>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d104      	bne.n	8002d7c <HAL_TIM_IC_CaptureCallback+0x28>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8002d72:	f7ff fd85 	bl	8002880 <ir_tim_interrupt>
        break;
 8002d76:	e002      	b.n	8002d7e <HAL_TIM_IC_CaptureCallback+0x2a>
      default:
        break;
    }
  }
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	e000      	b.n	8002d7e <HAL_TIM_IC_CaptureCallback+0x2a>
        break;
 8002d7c:	46c0      	nop			; (mov r8, r8)
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000324 	.word	0x20000324

08002d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b090      	sub	sp, #64	; 0x40
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d92:	f000 fd51 	bl	8003838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d96:	f000 f967 	bl	8003068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  	  	  	  //  Konfiguracja GPIO

    GPIO_InitTypeDef gpioA9;				// obiekt gpio będący konfiguracją portów GPIO
    gpioA9.Pin = GPIO_PIN_9; 				// konfigurujemy pin 9
 8002d9a:	2128      	movs	r1, #40	; 0x28
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	601a      	str	r2, [r3, #0]
    gpioA9.Mode = GPIO_MODE_OUTPUT_PP;	// jako wyjście
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2201      	movs	r2, #1
 8002da8:	605a      	str	r2, [r3, #4]
    gpioA9.Pull = GPIO_NOPULL;			// rezystory podciągające są wyłączone
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
    gpioA9.Speed = GPIO_SPEED_FREQ_LOW;	// wystarczą nieskie częstotliwości przełączania
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &gpioA9);		// inicjalizacja modułu GPIOA
 8002db6:	187a      	adds	r2, r7, r1
 8002db8:	23a0      	movs	r3, #160	; 0xa0
 8002dba:	05db      	lsls	r3, r3, #23
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f001 fbec 	bl	800459c <HAL_GPIO_Init>

  	GPIO_InitTypeDef gpioA8;				// obiekt gpio będący konfiguracją portów GPIO
  	gpioA8.Pin = GPIO_PIN_8; 				// konfigurujemy pin 8
 8002dc4:	2114      	movs	r1, #20
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	0052      	lsls	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
  	gpioA8.Mode = GPIO_MODE_OUTPUT_PP;	// jako wyjście
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	605a      	str	r2, [r3, #4]
  	gpioA8.Pull = GPIO_NOPULL;			// rezystory podciągające są wyłączone
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  	gpioA8.Speed = GPIO_SPEED_FREQ_LOW;	// wystarczą nieskie częstotliwości przełączania
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
  	HAL_GPIO_Init(GPIOA, &gpioA8);		// inicjalizacja modułu GPIOA
 8002de0:	187a      	adds	r2, r7, r1
 8002de2:	23a0      	movs	r3, #160	; 0xa0
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f001 fbd7 	bl	800459c <HAL_GPIO_Init>

  	GPIO_InitTypeDef gpioA10;				// obiekt gpio będący konfiguracją portów GPIO
  	gpioA10.Pin = GPIO_PIN_10; 				// konfigurujemy pin 10
 8002dee:	003b      	movs	r3, r7
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	00d2      	lsls	r2, r2, #3
 8002df4:	601a      	str	r2, [r3, #0]
  	gpioA10.Mode = GPIO_MODE_OUTPUT_PP;	// jako wyjście
 8002df6:	003b      	movs	r3, r7
 8002df8:	2201      	movs	r2, #1
 8002dfa:	605a      	str	r2, [r3, #4]
  	gpioA10.Pull = GPIO_NOPULL;			// rezystory podciągające są wyłączone
 8002dfc:	003b      	movs	r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  	gpioA10.Speed = GPIO_SPEED_FREQ_LOW;	// wystarczą nieskie częstotliwości przełączania
 8002e02:	003b      	movs	r3, r7
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
   	HAL_GPIO_Init(GPIOA, &gpioA10);		// inicjalizacja modułu GPIOA
 8002e08:	003a      	movs	r2, r7
 8002e0a:	23a0      	movs	r3, #160	; 0xa0
 8002e0c:	05db      	lsls	r3, r3, #23
 8002e0e:	0011      	movs	r1, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 fbc3 	bl	800459c <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e16:	f7ff fc6f 	bl	80026f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e1a:	f7ff fc57 	bl	80026cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002e1e:	f000 fc6d 	bl	80036fc <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002e22:	f7ff fb75 	bl	8002510 <MX_ADC_Init>
  MX_TIM2_Init();
 8002e26:	f000 faa3 	bl	8003370 <MX_TIM2_Init>
  MX_TIM21_Init();
 8002e2a:	f000 fb09 	bl	8003440 <MX_TIM21_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim2);
 8002e2e:	4b84      	ldr	r3, [pc, #528]	; (8003040 <main+0x2b4>)
 8002e30:	0018      	movs	r0, r3
 8002e32:	f002 fdb7 	bl	80059a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e36:	4b82      	ldr	r3, [pc, #520]	; (8003040 <main+0x2b4>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f002 fe3e 	bl	8005abc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002e40:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <main+0x2b4>)
 8002e42:	2108      	movs	r1, #8
 8002e44:	0018      	movs	r0, r3
 8002e46:	f002 fe39 	bl	8005abc <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002e4a:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <main+0x2b8>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f001 f91c 	bl	800408c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADCvalue, 2);
 8002e54:	497c      	ldr	r1, [pc, #496]	; (8003048 <main+0x2bc>)
 8002e56:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <main+0x2b8>)
 8002e58:	2202      	movs	r2, #2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fed0 	bl	8003c00 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim21);
 8002e60:	4b7a      	ldr	r3, [pc, #488]	; (800304c <main+0x2c0>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f002 fd5a 	bl	800591c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim21, TIM_CHANNEL_1);
 8002e68:	4b78      	ldr	r3, [pc, #480]	; (800304c <main+0x2c0>)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f002 fef9 	bl	8005c64 <HAL_TIM_IC_Start_IT>


  while (1)
  {

	  int ir_ReadValue = ir_read();
 8002e72:	f7ff fd5d 	bl	8002930 <ir_read>
 8002e76:	0003      	movs	r3, r0
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (ir_ReadValue != -1) {
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	d005      	beq.n	8002e8c <main+0x100>
	    printf("code = %02x\n", ir_ReadValue);
 8002e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <main+0x2c4>)
 8002e84:	0011      	movs	r1, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	f005 f97c 	bl	8008184 <iprintf>
	  }
	  if (ir_ReadValue == IR_CODE_ONOFF) 	// Zmiana trybu jazdy - Line Follower /  Jazda na Pilota
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	2b45      	cmp	r3, #69	; 0x45
 8002e90:	d116      	bne.n	8002ec0 <main+0x134>
	  {
		  if(state == ON)
 8002e92:	4b70      	ldr	r3, [pc, #448]	; (8003054 <main+0x2c8>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <main+0x12c>
		  {
			  state = OFF;
 8002e9c:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <main+0x2c8>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
	  		  left_motor_drive(100,"FAST STOP");
 8002ea2:	4b6d      	ldr	r3, [pc, #436]	; (8003058 <main+0x2cc>)
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	2064      	movs	r0, #100	; 0x64
 8002ea8:	f7ff fa32 	bl	8002310 <left_motor_drive>
	  		  right_motor_drive(100,"FAST STOP");
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <main+0x2cc>)
 8002eae:	0019      	movs	r1, r3
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f7ff faad 	bl	8002410 <right_motor_drive>
 8002eb6:	e098      	b.n	8002fea <main+0x25e>
		  }
		  else
		  {
			  state = ON;
 8002eb8:	4b66      	ldr	r3, [pc, #408]	; (8003054 <main+0x2c8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e094      	b.n	8002fea <main+0x25e>
		  }
	  }
	  else if(ir_ReadValue == IR_CODE_REWIND) // - Jazda w lewo -
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec2:	2b07      	cmp	r3, #7
 8002ec4:	d11a      	bne.n	8002efc <main+0x170>
	  {
			left_motor_drive(75,"BACKWARD");
 8002ec6:	4b65      	ldr	r3, [pc, #404]	; (800305c <main+0x2d0>)
 8002ec8:	0019      	movs	r1, r3
 8002eca:	204b      	movs	r0, #75	; 0x4b
 8002ecc:	f7ff fa20 	bl	8002310 <left_motor_drive>
			right_motor_drive(75,"FORWARD");
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <main+0x2d4>)
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	204b      	movs	r0, #75	; 0x4b
 8002ed6:	f7ff fa9b 	bl	8002410 <right_motor_drive>
				 // Swiecenie na Zielono
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	0099      	lsls	r1, r3, #2
 8002ede:	23a0      	movs	r3, #160	; 0xa0
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f001 fccf 	bl	8004888 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	0059      	lsls	r1, r3, #1
 8002eee:	23a0      	movs	r3, #160	; 0xa0
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f001 fcc7 	bl	8004888 <HAL_GPIO_WritePin>
 8002efa:	e076      	b.n	8002fea <main+0x25e>
	  }
	  else if(ir_ReadValue == IR_CODE_FORWARD) // - Jazda w prawo-
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	d11a      	bne.n	8002f38 <main+0x1ac>
	  {
			left_motor_drive(75,"FORWARD");
 8002f02:	4b57      	ldr	r3, [pc, #348]	; (8003060 <main+0x2d4>)
 8002f04:	0019      	movs	r1, r3
 8002f06:	204b      	movs	r0, #75	; 0x4b
 8002f08:	f7ff fa02 	bl	8002310 <left_motor_drive>
			right_motor_drive(75,"BACKWARD");
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <main+0x2d0>)
 8002f0e:	0019      	movs	r1, r3
 8002f10:	204b      	movs	r0, #75	; 0x4b
 8002f12:	f7ff fa7d 	bl	8002410 <right_motor_drive>
				 // Swiecenie na Czerwono
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	0099      	lsls	r1, r3, #2
 8002f1a:	23a0      	movs	r3, #160	; 0xa0
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	2200      	movs	r2, #0
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 fcb1 	bl	8004888 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	0059      	lsls	r1, r3, #1
 8002f2a:	23a0      	movs	r3, #160	; 0xa0
 8002f2c:	05db      	lsls	r3, r3, #23
 8002f2e:	2201      	movs	r2, #1
 8002f30:	0018      	movs	r0, r3
 8002f32:	f001 fca9 	bl	8004888 <HAL_GPIO_WritePin>
 8002f36:	e058      	b.n	8002fea <main+0x25e>
	  }
	  else if(ir_ReadValue == IR_CODE_PLUS) // - Jazda porsto-
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d11a      	bne.n	8002f74 <main+0x1e8>
	  {
			left_motor_drive(75,"FORWARD");
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <main+0x2d4>)
 8002f40:	0019      	movs	r1, r3
 8002f42:	204b      	movs	r0, #75	; 0x4b
 8002f44:	f7ff f9e4 	bl	8002310 <left_motor_drive>
			right_motor_drive(75,"FORWARD");
 8002f48:	4b45      	ldr	r3, [pc, #276]	; (8003060 <main+0x2d4>)
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	204b      	movs	r0, #75	; 0x4b
 8002f4e:	f7ff fa5f 	bl	8002410 <right_motor_drive>
				 // Swiecenie na Zolto
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	0099      	lsls	r1, r3, #2
 8002f56:	23a0      	movs	r3, #160	; 0xa0
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f001 fc93 	bl	8004888 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	0059      	lsls	r1, r3, #1
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fc8b 	bl	8004888 <HAL_GPIO_WritePin>
 8002f72:	e03a      	b.n	8002fea <main+0x25e>
	  }
	  else if(ir_ReadValue == IR_CODE_MINUS)  // - Jazda w tyl-
 8002f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f76:	2b19      	cmp	r3, #25
 8002f78:	d11a      	bne.n	8002fb0 <main+0x224>
	  {
			left_motor_drive(75,"BACKWARD");
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <main+0x2d0>)
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	204b      	movs	r0, #75	; 0x4b
 8002f80:	f7ff f9c6 	bl	8002310 <left_motor_drive>
			right_motor_drive(75,"BACKWARD");
 8002f84:	4b35      	ldr	r3, [pc, #212]	; (800305c <main+0x2d0>)
 8002f86:	0019      	movs	r1, r3
 8002f88:	204b      	movs	r0, #75	; 0x4b
 8002f8a:	f7ff fa41 	bl	8002410 <right_motor_drive>
				 // Brak Swiecenia (swieci tylko na niebiesko)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	0099      	lsls	r1, r3, #2
 8002f92:	23a0      	movs	r3, #160	; 0xa0
 8002f94:	05db      	lsls	r3, r3, #23
 8002f96:	2201      	movs	r2, #1
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 fc75 	bl	8004888 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	0059      	lsls	r1, r3, #1
 8002fa2:	23a0      	movs	r3, #160	; 0xa0
 8002fa4:	05db      	lsls	r3, r3, #23
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fc6d 	bl	8004888 <HAL_GPIO_WritePin>
 8002fae:	e01c      	b.n	8002fea <main+0x25e>
	  }
	  else if(ir_ReadValue == IR_CODE_PLAY)  // - Zatrzymanie (srodkowy przycisk) -
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb2:	2b15      	cmp	r3, #21
 8002fb4:	d119      	bne.n	8002fea <main+0x25e>
	  {
		  	left_motor_drive(100,"FAST STOP");
 8002fb6:	4b28      	ldr	r3, [pc, #160]	; (8003058 <main+0x2cc>)
 8002fb8:	0019      	movs	r1, r3
 8002fba:	2064      	movs	r0, #100	; 0x64
 8002fbc:	f7ff f9a8 	bl	8002310 <left_motor_drive>
  		  	right_motor_drive(100,"FAST STOP");
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <main+0x2cc>)
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	f7ff fa23 	bl	8002410 <right_motor_drive>
  		  		 // Brak Swiecenia (swieci tylko na niebiesko)
  		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	0099      	lsls	r1, r3, #2
 8002fce:	23a0      	movs	r3, #160	; 0xa0
 8002fd0:	05db      	lsls	r3, r3, #23
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f001 fc57 	bl	8004888 <HAL_GPIO_WritePin>
  		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	0059      	lsls	r1, r3, #1
 8002fde:	23a0      	movs	r3, #160	; 0xa0
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 fc4f 	bl	8004888 <HAL_GPIO_WritePin>
	  }



		  	  ADCdiff = ADCvalue[0] - ADCvalue[1];					// ||||||||||||||||||||||||||||||||||||||||||||
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <main+0x2bc>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <main+0x2bc>)
 8002ff4:	885b      	ldrh	r3, [r3, #2]
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <main+0x2d8>)
 8003002:	801a      	strh	r2, [r3, #0]



		  	if(state == OFF)
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <main+0x2c8>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <main+0x292>
		  	{
		  		 // Swiecenie na niebiesko (gdy tryb jazdy na pilota)
		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	00d9      	lsls	r1, r3, #3
 8003012:	23a0      	movs	r3, #160	; 0xa0
 8003014:	05db      	lsls	r3, r3, #23
 8003016:	2200      	movs	r2, #0
 8003018:	0018      	movs	r0, r3
 800301a:	f001 fc35 	bl	8004888 <HAL_GPIO_WritePin>
		  	}

	  	  	 // /*
		  	if(state == ON)				// Line Follower z PID
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <main+0x2c8>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d000      	beq.n	800302a <main+0x29e>
 8003028:	e723      	b.n	8002e72 <main+0xe6>
		  	{
		  		followLine();
 800302a:	f7ff fe29 	bl	8002c80 <followLine>
		  		 // brak swiecenia na niebiesko (gdy tryb Line Followera)
		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	00d9      	lsls	r1, r3, #3
 8003032:	23a0      	movs	r3, #160	; 0xa0
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	2201      	movs	r2, #1
 8003038:	0018      	movs	r0, r3
 800303a:	f001 fc25 	bl	8004888 <HAL_GPIO_WritePin>
  {
 800303e:	e718      	b.n	8002e72 <main+0xe6>
 8003040:	200002e4 	.word	0x200002e4
 8003044:	2000020c 	.word	0x2000020c
 8003048:	200002d8 	.word	0x200002d8
 800304c:	20000324 	.word	0x20000324
 8003050:	0800a52c 	.word	0x0800a52c
 8003054:	20000010 	.word	0x20000010
 8003058:	0800a53c 	.word	0x0800a53c
 800305c:	0800a548 	.word	0x0800a548
 8003060:	0800a524 	.word	0x0800a524
 8003064:	200002d4 	.word	0x200002d4

08003068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b09d      	sub	sp, #116	; 0x74
 800306c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306e:	2438      	movs	r4, #56	; 0x38
 8003070:	193b      	adds	r3, r7, r4
 8003072:	0018      	movs	r0, r3
 8003074:	2338      	movs	r3, #56	; 0x38
 8003076:	001a      	movs	r2, r3
 8003078:	2100      	movs	r1, #0
 800307a:	f004 fc0d 	bl	8007898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800307e:	2324      	movs	r3, #36	; 0x24
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	0018      	movs	r0, r3
 8003084:	2314      	movs	r3, #20
 8003086:	001a      	movs	r2, r3
 8003088:	2100      	movs	r1, #0
 800308a:	f004 fc05 	bl	8007898 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800308e:	003b      	movs	r3, r7
 8003090:	0018      	movs	r0, r3
 8003092:	2324      	movs	r3, #36	; 0x24
 8003094:	001a      	movs	r2, r3
 8003096:	2100      	movs	r1, #0
 8003098:	f004 fbfe 	bl	8007898 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <SystemClock_Config+0xe8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <SystemClock_Config+0xec>)
 80030a2:	401a      	ands	r2, r3
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <SystemClock_Config+0xe8>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0109      	lsls	r1, r1, #4
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030ae:	0021      	movs	r1, r4
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	22a0      	movs	r2, #160	; 0xa0
 80030ba:	02d2      	lsls	r2, r2, #11
 80030bc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	2202      	movs	r2, #2
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	0252      	lsls	r2, r2, #9
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	22c0      	movs	r2, #192	; 0xc0
 80030d0:	0312      	lsls	r2, r2, #12
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	03d2      	lsls	r2, r2, #15
 80030da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	0018      	movs	r0, r3
 80030e0:	f001 fc0c 	bl	80048fc <HAL_RCC_OscConfig>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d001      	beq.n	80030ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80030e8:	f000 f836 	bl	8003158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030ec:	2124      	movs	r1, #36	; 0x24
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	220f      	movs	r2, #15
 80030f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	2203      	movs	r2, #3
 80030f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2101      	movs	r1, #1
 8003110:	0018      	movs	r0, r3
 8003112:	f001 ffb7 	bl	8005084 <HAL_RCC_ClockConfig>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800311a:	f000 f81d 	bl	8003158 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800311e:	003b      	movs	r3, r7
 8003120:	2202      	movs	r2, #2
 8003122:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003124:	003b      	movs	r3, r7
 8003126:	2200      	movs	r2, #0
 8003128:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800312a:	003b      	movs	r3, r7
 800312c:	0018      	movs	r0, r3
 800312e:	f002 fa51 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8003132:	1e03      	subs	r3, r0, #0
 8003134:	d001      	beq.n	800313a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003136:	f000 f80f 	bl	8003158 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	045b      	lsls	r3, r3, #17
 800313e:	2200      	movs	r2, #0
 8003140:	0019      	movs	r1, r3
 8003142:	2000      	movs	r0, #0
 8003144:	f002 f8e6 	bl	8005314 <HAL_RCC_MCOConfig>
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b01d      	add	sp, #116	; 0x74
 800314e:	bd90      	pop	{r4, r7, pc}
 8003150:	40007000 	.word	0x40007000
 8003154:	ffffe7ff 	.word	0xffffe7ff

08003158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800315c:	b672      	cpsid	i
}
 800315e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003160:	e7fe      	b.n	8003160 <Error_Handler+0x8>
	...

08003164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_MspInit+0x24>)
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_MspInit+0x24>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_MspInit+0x24>)
 8003176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_MspInit+0x24>)
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	0549      	lsls	r1, r1, #21
 800317e:	430a      	orrs	r2, r1
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003190:	e7fe      	b.n	8003190 <NMI_Handler+0x4>

08003192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003196:	e7fe      	b.n	8003196 <HardFault_Handler+0x4>

08003198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b0:	f000 fb96 	bl	80038e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	0018      	movs	r0, r3
 80031c4:	f001 fb7e 	bl	80048c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <TIM21_IRQHandler+0x14>)
 80031d6:	0018      	movs	r0, r3
 80031d8:	f002 fe0c 	bl	8005df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000324 	.word	0x20000324

080031e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	0018      	movs	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_kill>:

int _kill(int pid, int sig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031fe:	f004 fb21 	bl	8007844 <__errno>
 8003202:	0003      	movs	r3, r0
 8003204:	2216      	movs	r2, #22
 8003206:	601a      	str	r2, [r3, #0]
	return -1;
 8003208:	2301      	movs	r3, #1
 800320a:	425b      	negs	r3, r3
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <_exit>:

void _exit (int status)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800321c:	2301      	movs	r3, #1
 800321e:	425a      	negs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0011      	movs	r1, r2
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff ffe5 	bl	80031f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800322a:	e7fe      	b.n	800322a <_exit+0x16>

0800322c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323e:	e000      	b.n	8003242 <_read+0x16>
 8003240:	bf00      	nop
 8003242:	0001      	movs	r1, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	b2ca      	uxtb	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbf0      	blt.n	800323e <_read+0x12>
	}

return len;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b006      	add	sp, #24
 8003264:	bd80      	pop	{r7, pc}

08003266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e009      	b.n	800328c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff fd31 	bl	8002ce8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf1      	blt.n	8003278 <_write+0x12>
	}
	return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b006      	add	sp, #24
 800329c:	bd80      	pop	{r7, pc}

0800329e <_close>:

int _close(int file)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	return -1;
 80032a6:	2301      	movs	r3, #1
 80032a8:	425b      	negs	r3, r3
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b002      	add	sp, #8
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	0192      	lsls	r2, r2, #6
 80032c2:	605a      	str	r2, [r3, #4]
	return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_isatty>:

int _isatty(int file)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	return 1;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}

080032e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
	return 0;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b004      	add	sp, #16
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <_sbrk+0x5c>)
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <_sbrk+0x60>)
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <_sbrk+0x64>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <_sbrk+0x64>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <_sbrk+0x68>)
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d207      	bcs.n	8003338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003328:	f004 fa8c 	bl	8007844 <__errno>
 800332c:	0003      	movs	r3, r0
 800332e:	220c      	movs	r2, #12
 8003330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003332:	2301      	movs	r3, #1
 8003334:	425b      	negs	r3, r3
 8003336:	e009      	b.n	800334c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	18d2      	adds	r2, r2, r3
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <_sbrk+0x64>)
 8003348:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b006      	add	sp, #24
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20002000 	.word	0x20002000
 8003358:	00000400 	.word	0x00000400
 800335c:	200002e0 	.word	0x200002e0
 8003360:	20000400 	.word	0x20000400

08003364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003376:	2310      	movs	r3, #16
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	0018      	movs	r0, r3
 800337c:	2308      	movs	r3, #8
 800337e:	001a      	movs	r2, r3
 8003380:	2100      	movs	r1, #0
 8003382:	f004 fa89 	bl	8007898 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003386:	003b      	movs	r3, r7
 8003388:	0018      	movs	r0, r3
 800338a:	2310      	movs	r3, #16
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f004 fa82 	bl	8007898 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <MX_TIM2_Init+0xcc>)
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	05d2      	lsls	r2, r2, #23
 800339a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <MX_TIM2_Init+0xcc>)
 800339e:	220f      	movs	r2, #15
 80033a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <MX_TIM2_Init+0xcc>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <MX_TIM2_Init+0xcc>)
 80033aa:	2264      	movs	r2, #100	; 0x64
 80033ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <MX_TIM2_Init+0xcc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <MX_TIM2_Init+0xcc>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <MX_TIM2_Init+0xcc>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f002 fb3d 	bl	8005a3c <HAL_TIM_PWM_Init>
 80033c2:	1e03      	subs	r3, r0, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80033c6:	f7ff fec7 	bl	8003158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ca:	2110      	movs	r1, #16
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	2200      	movs	r2, #0
 80033d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033d8:	187a      	adds	r2, r7, r1
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <MX_TIM2_Init+0xcc>)
 80033dc:	0011      	movs	r1, r2
 80033de:	0018      	movs	r0, r3
 80033e0:	f003 fc98 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80033e8:	f7ff feb6 	bl	8003158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ec:	003b      	movs	r3, r7
 80033ee:	2260      	movs	r2, #96	; 0x60
 80033f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 80033f2:	003b      	movs	r3, r7
 80033f4:	2219      	movs	r2, #25
 80033f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033f8:	003b      	movs	r3, r7
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033fe:	003b      	movs	r3, r7
 8003400:	2200      	movs	r2, #0
 8003402:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003404:	0039      	movs	r1, r7
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <MX_TIM2_Init+0xcc>)
 8003408:	2200      	movs	r2, #0
 800340a:	0018      	movs	r0, r3
 800340c:	f002 fe7e 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003414:	f7ff fea0 	bl	8003158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003418:	0039      	movs	r1, r7
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <MX_TIM2_Init+0xcc>)
 800341c:	2208      	movs	r2, #8
 800341e:	0018      	movs	r0, r3
 8003420:	f002 fe74 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003428:	f7ff fe96 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <MX_TIM2_Init+0xcc>)
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f904 	bl	800363c <HAL_TIM_MspPostInit>

}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200002e4 	.word	0x200002e4

08003440 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b090      	sub	sp, #64	; 0x40
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003446:	2330      	movs	r3, #48	; 0x30
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	0018      	movs	r0, r3
 800344c:	2310      	movs	r3, #16
 800344e:	001a      	movs	r2, r3
 8003450:	2100      	movs	r1, #0
 8003452:	f004 fa21 	bl	8007898 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003456:	231c      	movs	r3, #28
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	0018      	movs	r0, r3
 800345c:	2314      	movs	r3, #20
 800345e:	001a      	movs	r2, r3
 8003460:	2100      	movs	r1, #0
 8003462:	f004 fa19 	bl	8007898 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003466:	2314      	movs	r3, #20
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	0018      	movs	r0, r3
 800346c:	2308      	movs	r3, #8
 800346e:	001a      	movs	r2, r3
 8003470:	2100      	movs	r1, #0
 8003472:	f004 fa11 	bl	8007898 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	0018      	movs	r0, r3
 800347a:	2310      	movs	r3, #16
 800347c:	001a      	movs	r2, r3
 800347e:	2100      	movs	r1, #0
 8003480:	f004 fa0a 	bl	8007898 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <MX_TIM21_Init+0x12c>)
 8003486:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <MX_TIM21_Init+0x130>)
 8003488:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <MX_TIM21_Init+0x12c>)
 800348c:	221f      	movs	r2, #31
 800348e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <MX_TIM21_Init+0x12c>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8003496:	4b35      	ldr	r3, [pc, #212]	; (800356c <MX_TIM21_Init+0x12c>)
 8003498:	4a36      	ldr	r2, [pc, #216]	; (8003574 <MX_TIM21_Init+0x134>)
 800349a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349c:	4b33      	ldr	r3, [pc, #204]	; (800356c <MX_TIM21_Init+0x12c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a2:	4b32      	ldr	r3, [pc, #200]	; (800356c <MX_TIM21_Init+0x12c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <MX_TIM21_Init+0x12c>)
 80034aa:	0018      	movs	r0, r3
 80034ac:	f002 f9f6 	bl	800589c <HAL_TIM_Base_Init>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 80034b4:	f7ff fe50 	bl	8003158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b8:	2130      	movs	r1, #48	; 0x30
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	0152      	lsls	r2, r2, #5
 80034c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80034c2:	187a      	adds	r2, r7, r1
 80034c4:	4b29      	ldr	r3, [pc, #164]	; (800356c <MX_TIM21_Init+0x12c>)
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f002 fee5 	bl	8006298 <HAL_TIM_ConfigClockSource>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80034d2:	f7ff fe41 	bl	8003158 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <MX_TIM21_Init+0x12c>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f002 fb7b 	bl	8005bd4 <HAL_TIM_IC_Init>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 80034e2:	f7ff fe39 	bl	8003158 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80034e6:	211c      	movs	r1, #28
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	2204      	movs	r2, #4
 80034ec:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerFilter = 0;
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim21, &sSlaveConfig) != HAL_OK)
 8003500:	187a      	adds	r2, r7, r1
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <MX_TIM21_Init+0x12c>)
 8003504:	0011      	movs	r1, r2
 8003506:	0018      	movs	r0, r3
 8003508:	f002 ff9a 	bl	8006440 <HAL_TIM_SlaveConfigSynchro>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM21_Init+0xd4>
  {
    Error_Handler();
 8003510:	f7ff fe22 	bl	8003158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003514:	2114      	movs	r1, #20
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2200      	movs	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003522:	187a      	adds	r2, r7, r1
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <MX_TIM21_Init+0x12c>)
 8003526:	0011      	movs	r1, r2
 8003528:	0018      	movs	r0, r3
 800352a:	f003 fbf3 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM21_Init+0xf6>
  {
    Error_Handler();
 8003532:	f7ff fe11 	bl	8003158 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2201      	movs	r2, #1
 8003540:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800354e:	1d39      	adds	r1, r7, #4
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <MX_TIM21_Init+0x12c>)
 8003552:	2200      	movs	r2, #0
 8003554:	0018      	movs	r0, r3
 8003556:	f002 fd35 	bl	8005fc4 <HAL_TIM_IC_ConfigChannel>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM21_Init+0x122>
  {
    Error_Handler();
 800355e:	f7ff fdfb 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b010      	add	sp, #64	; 0x40
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	20000324 	.word	0x20000324
 8003570:	40010800 	.word	0x40010800
 8003574:	0000ffff 	.word	0x0000ffff

08003578 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	05db      	lsls	r3, r3, #23
 8003588:	429a      	cmp	r2, r3
 800358a:	d105      	bne.n	8003598 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_TIM_PWM_MspInit+0x28>)
 800358e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_TIM_PWM_MspInit+0x28>)
 8003592:	2101      	movs	r1, #1
 8003594:	430a      	orrs	r2, r1
 8003596:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	240c      	movs	r4, #12
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	0018      	movs	r0, r3
 80035b2:	2314      	movs	r3, #20
 80035b4:	001a      	movs	r2, r3
 80035b6:	2100      	movs	r1, #0
 80035b8:	f004 f96e 	bl	8007898 <memset>
  if(tim_baseHandle->Instance==TIM21)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIM_Base_MspInit+0x8c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d130      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_TIM_Base_MspInit+0x90>)
 80035c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_TIM_Base_MspInit+0x90>)
 80035cc:	2104      	movs	r1, #4
 80035ce:	430a      	orrs	r2, r1
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <HAL_TIM_Base_MspInit+0x90>)
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_TIM_Base_MspInit+0x90>)
 80035d8:	2102      	movs	r1, #2
 80035da:	430a      	orrs	r2, r1
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_TIM_Base_MspInit+0x90>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	2202      	movs	r2, #2
 80035e4:	4013      	ands	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PB13     ------> TIM21_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	0192      	lsls	r2, r2, #6
 80035f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	0021      	movs	r1, r4
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2202      	movs	r2, #2
 80035f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2206      	movs	r2, #6
 800360a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	187b      	adds	r3, r7, r1
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <HAL_TIM_Base_MspInit+0x94>)
 8003610:	0019      	movs	r1, r3
 8003612:	0010      	movs	r0, r2
 8003614:	f000 ffc2 	bl	800459c <HAL_GPIO_Init>

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 2, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2102      	movs	r1, #2
 800361c:	2014      	movs	r0, #20
 800361e:	f000 fe7f 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003622:	2014      	movs	r0, #20
 8003624:	f000 fe91 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b009      	add	sp, #36	; 0x24
 800362e:	bd90      	pop	{r4, r7, pc}
 8003630:	40010800 	.word	0x40010800
 8003634:	40021000 	.word	0x40021000
 8003638:	50000400 	.word	0x50000400

0800363c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b08b      	sub	sp, #44	; 0x2c
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	2414      	movs	r4, #20
 8003646:	193b      	adds	r3, r7, r4
 8003648:	0018      	movs	r0, r3
 800364a:	2314      	movs	r3, #20
 800364c:	001a      	movs	r2, r3
 800364e:	2100      	movs	r1, #0
 8003650:	f004 f922 	bl	8007898 <memset>
  if(timHandle->Instance==TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	05db      	lsls	r3, r3, #23
 800365c:	429a      	cmp	r2, r3
 800365e:	d145      	bne.n	80036ec <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 8003666:	2102      	movs	r1, #2
 8003668:	430a      	orrs	r2, r1
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2202      	movs	r2, #2
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003678:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 800367a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 800367e:	2101      	movs	r1, #1
 8003680:	430a      	orrs	r2, r1
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	2201      	movs	r2, #1
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003690:	193b      	adds	r3, r7, r4
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	00d2      	lsls	r2, r2, #3
 8003696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	193b      	adds	r3, r7, r4
 800369a:	2202      	movs	r2, #2
 800369c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	2202      	movs	r2, #2
 80036ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_TIM_MspPostInit+0xbc>)
 80036b4:	0019      	movs	r1, r3
 80036b6:	0010      	movs	r0, r2
 80036b8:	f000 ff70 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036bc:	0021      	movs	r1, r4
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	0212      	lsls	r2, r2, #8
 80036c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2202      	movs	r2, #2
 80036ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	2200      	movs	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	2205      	movs	r2, #5
 80036dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036de:	187a      	adds	r2, r7, r1
 80036e0:	23a0      	movs	r3, #160	; 0xa0
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	0011      	movs	r1, r2
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 ff58 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b00b      	add	sp, #44	; 0x2c
 80036f2:	bd90      	pop	{r4, r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	50000400 	.word	0x50000400

080036fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <MX_USART2_UART_Init+0x5c>)
 8003704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003708:	22e1      	movs	r2, #225	; 0xe1
 800370a:	0252      	lsls	r2, r2, #9
 800370c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <MX_USART2_UART_Init+0x58>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <MX_USART2_UART_Init+0x58>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003734:	2200      	movs	r2, #0
 8003736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <MX_USART2_UART_Init+0x58>)
 800373a:	2200      	movs	r2, #0
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <MX_USART2_UART_Init+0x58>)
 8003740:	0018      	movs	r0, r3
 8003742:	f003 fb3f 	bl	8006dc4 <HAL_UART_Init>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d001      	beq.n	800374e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800374a:	f7ff fd05 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000364 	.word	0x20000364
 8003758:	40004400 	.word	0x40004400

0800375c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	240c      	movs	r4, #12
 8003766:	193b      	adds	r3, r7, r4
 8003768:	0018      	movs	r0, r3
 800376a:	2314      	movs	r3, #20
 800376c:	001a      	movs	r2, r3
 800376e:	2100      	movs	r1, #0
 8003770:	f004 f892 	bl	8007898 <memset>
  if(uartHandle->Instance==USART2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_UART_MspInit+0x80>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d129      	bne.n	80037d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_UART_MspInit+0x84>)
 8003780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003782:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <HAL_UART_MspInit+0x84>)
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	0289      	lsls	r1, r1, #10
 8003788:	430a      	orrs	r2, r1
 800378a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_UART_MspInit+0x84>)
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <HAL_UART_MspInit+0x84>)
 8003792:	2101      	movs	r1, #1
 8003794:	430a      	orrs	r2, r1
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_UART_MspInit+0x84>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	2201      	movs	r2, #1
 800379e:	4013      	ands	r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037a4:	0021      	movs	r1, r4
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	220c      	movs	r2, #12
 80037aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2202      	movs	r2, #2
 80037b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	2203      	movs	r2, #3
 80037bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	2204      	movs	r2, #4
 80037c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	187a      	adds	r2, r7, r1
 80037c6:	23a0      	movs	r3, #160	; 0xa0
 80037c8:	05db      	lsls	r3, r3, #23
 80037ca:	0011      	movs	r1, r2
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 fee5 	bl	800459c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b009      	add	sp, #36	; 0x24
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	40004400 	.word	0x40004400
 80037e0:	40021000 	.word	0x40021000

080037e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80037e4:	480d      	ldr	r0, [pc, #52]	; (800381c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037e8:	480d      	ldr	r0, [pc, #52]	; (8003820 <LoopForever+0x6>)
  ldr r1, =_edata
 80037ea:	490e      	ldr	r1, [pc, #56]	; (8003824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037ec:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <LoopForever+0xe>)
  movs r3, #0
 80037ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f0:	e002      	b.n	80037f8 <LoopCopyDataInit>

080037f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037f6:	3304      	adds	r3, #4

080037f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037fc:	d3f9      	bcc.n	80037f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037fe:	4a0b      	ldr	r2, [pc, #44]	; (800382c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003800:	4c0b      	ldr	r4, [pc, #44]	; (8003830 <LoopForever+0x16>)
  movs r3, #0
 8003802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003804:	e001      	b.n	800380a <LoopFillZerobss>

08003806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003808:	3204      	adds	r2, #4

0800380a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800380a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800380c:	d3fb      	bcc.n	8003806 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800380e:	f7ff fda9 	bl	8003364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003812:	f004 f81d 	bl	8007850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003816:	f7ff fab9 	bl	8002d8c <main>

0800381a <LoopForever>:

LoopForever:
    b LoopForever
 800381a:	e7fe      	b.n	800381a <LoopForever>
  ldr   r0, =_estack
 800381c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003824:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003828:	0800aa2c 	.word	0x0800aa2c
  ldr r2, =_sbss
 800382c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003830:	200003fc 	.word	0x200003fc

08003834 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003834:	e7fe      	b.n	8003834 <ADC1_COMP_IRQHandler>
	...

08003838 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_Init+0x3c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_Init+0x3c>)
 800384a:	2140      	movs	r1, #64	; 0x40
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003850:	2000      	movs	r0, #0
 8003852:	f000 f811 	bl	8003878 <HAL_InitTick>
 8003856:	1e03      	subs	r3, r0, #0
 8003858:	d003      	beq.n	8003862 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e001      	b.n	8003866 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003862:	f7ff fc7f 	bl	8003164 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	781b      	ldrb	r3, [r3, #0]
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	40022000 	.word	0x40022000

08003878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_InitTick+0x5c>)
 8003882:	681c      	ldr	r4, [r3, #0]
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_InitTick+0x60>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	0019      	movs	r1, r3
 800388a:	23fa      	movs	r3, #250	; 0xfa
 800388c:	0098      	lsls	r0, r3, #2
 800388e:	f7fc fc61 	bl	8000154 <__udivsi3>
 8003892:	0003      	movs	r3, r0
 8003894:	0019      	movs	r1, r3
 8003896:	0020      	movs	r0, r4
 8003898:	f7fc fc5c 	bl	8000154 <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 fd63 	bl	800436a <HAL_SYSTICK_Config>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d001      	beq.n	80038ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e00f      	b.n	80038cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d80b      	bhi.n	80038ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	2301      	movs	r3, #1
 80038b6:	425b      	negs	r3, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 fd30 	bl	8004320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_InitTick+0x64>)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b003      	add	sp, #12
 80038d2:	bd90      	pop	{r4, r7, pc}
 80038d4:	20000014 	.word	0x20000014
 80038d8:	2000001c 	.word	0x2000001c
 80038dc:	20000018 	.word	0x20000018

080038e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_IncTick+0x1c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	001a      	movs	r2, r3
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_IncTick+0x20>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	18d2      	adds	r2, r2, r3
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_IncTick+0x20>)
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	2000001c 	.word	0x2000001c
 8003900:	200003e8 	.word	0x200003e8

08003904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  return uwTick;
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <HAL_GetTick+0x10>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	200003e8 	.word	0x200003e8

08003918 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e159      	b.n	8003bde <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2250      	movs	r2, #80	; 0x50
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	0018      	movs	r0, r3
 8003944:	f7fe fe56 	bl	80025f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	2210      	movs	r2, #16
 800394e:	4013      	ands	r3, r2
 8003950:	2b10      	cmp	r3, #16
 8003952:	d005      	beq.n	8003960 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800395e:	d00b      	beq.n	8003978 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	2210      	movs	r2, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2250      	movs	r2, #80	; 0x50
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e132      	b.n	8003bde <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	4a9a      	ldr	r2, [pc, #616]	; (8003be8 <HAL_ADC_Init+0x2d0>)
 800397e:	4013      	ands	r3, r2
 8003980:	2202      	movs	r2, #2
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2203      	movs	r2, #3
 8003990:	4013      	ands	r3, r2
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <HAL_ADC_Init+0x90>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	4013      	ands	r3, r2
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_Init+0x90>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_ADC_Init+0x92>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d149      	bne.n	8003a42 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	23c0      	movs	r3, #192	; 0xc0
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d00b      	beq.n	80039d2 <HAL_ADC_Init+0xba>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	05db      	lsls	r3, r3, #23
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d005      	beq.n	80039d2 <HAL_ADC_Init+0xba>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d111      	bne.n	80039f6 <HAL_ADC_Init+0xde>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0092      	lsls	r2, r2, #2
 80039de:	0892      	lsrs	r2, r2, #2
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6919      	ldr	r1, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	e014      	b.n	8003a20 <HAL_ADC_Init+0x108>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	0892      	lsrs	r2, r2, #2
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	4b79      	ldr	r3, [pc, #484]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b78      	ldr	r3, [pc, #480]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a0c:	4978      	ldr	r1, [pc, #480]	; (8003bf0 <HAL_ADC_Init+0x2d8>)
 8003a0e:	400a      	ands	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4b74      	ldr	r3, [pc, #464]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2118      	movs	r1, #24
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68d9      	ldr	r1, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003a42:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b69      	ldr	r3, [pc, #420]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a48:	496a      	ldr	r1, [pc, #424]	; (8003bf4 <HAL_ADC_Init+0x2dc>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	065a      	lsls	r2, r3, #25
 8003a58:	4b64      	ldr	r3, [pc, #400]	; (8003bec <HAL_ADC_Init+0x2d4>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	055b      	lsls	r3, r3, #21
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0549      	lsls	r1, r1, #21
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	495b      	ldr	r1, [pc, #364]	; (8003bf8 <HAL_ADC_Init+0x2e0>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68d9      	ldr	r1, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_ADC_Init+0x18c>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	e000      	b.n	8003aa6 <HAL_ADC_Init+0x18e>
 8003aa4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003aa6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2020      	movs	r0, #32
 8003aac:	5c1b      	ldrb	r3, [r3, r0]
 8003aae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003ab0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	202c      	movs	r0, #44	; 0x2c
 8003ab6:	5c1b      	ldrb	r3, [r3, r0]
 8003ab8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003aba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003ac0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003ac8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ad0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ade:	23c2      	movs	r3, #194	; 0xc2
 8003ae0:	33ff      	adds	r3, #255	; 0xff
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d00b      	beq.n	8003afe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68d9      	ldr	r1, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2221      	movs	r2, #33	; 0x21
 8003b02:	5c9b      	ldrb	r3, [r3, r2]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d11a      	bne.n	8003b3e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2180      	movs	r1, #128	; 0x80
 8003b1e:	0249      	lsls	r1, r1, #9
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	e00b      	b.n	8003b3e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	2201      	movs	r2, #1
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d11f      	bne.n	8003b86 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	492a      	ldr	r1, [pc, #168]	; (8003bfc <HAL_ADC_Init+0x2e4>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6919      	ldr	r1, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b64:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003b6a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2101      	movs	r1, #1
 8003b80:	430a      	orrs	r2, r1
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	e00e      	b.n	8003ba4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2107      	movs	r1, #7
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6959      	ldr	r1, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	fffffefd 	.word	0xfffffefd
 8003bec:	40012708 	.word	0x40012708
 8003bf0:	ffc3ffff 	.word	0xffc3ffff
 8003bf4:	fdffffff 	.word	0xfdffffff
 8003bf8:	fffe0219 	.word	0xfffe0219
 8003bfc:	fffffc03 	.word	0xfffffc03

08003c00 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0c:	2317      	movs	r3, #23
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d15e      	bne.n	8003cde <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2250      	movs	r2, #80	; 0x50
 8003c24:	5c9b      	ldrb	r3, [r3, r2]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Start_DMA+0x2e>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e05e      	b.n	8003cec <HAL_ADC_Start_DMA+0xec>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2250      	movs	r2, #80	; 0x50
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2101      	movs	r1, #1
 8003c42:	430a      	orrs	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d007      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003c4e:	2317      	movs	r3, #23
 8003c50:	18fc      	adds	r4, r7, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f90d 	bl	8003e74 <ADC_Enable>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c5e:	2317      	movs	r3, #23
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13e      	bne.n	8003ce6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_ADC_Start_DMA+0xf4>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	0052      	lsls	r2, r2, #1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2250      	movs	r2, #80	; 0x50
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_ADC_Start_DMA+0xf8>)
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_ADC_Start_DMA+0xfc>)
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_ADC_Start_DMA+0x100>)
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	221c      	movs	r2, #28
 8003ca6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3340      	adds	r3, #64	; 0x40
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f000 fbd4 	bl	8004474 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	e003      	b.n	8003ce6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cde:	2317      	movs	r3, #23
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ce6:	2317      	movs	r3, #23
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b007      	add	sp, #28
 8003cf2:	bd90      	pop	{r4, r7, pc}
 8003cf4:	fffff0fe 	.word	0xfffff0fe
 8003cf8:	08003f45 	.word	0x08003f45
 8003cfc:	08003ff9 	.word	0x08003ff9
 8003d00:	08004017 	.word	0x08004017

08003d04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2250      	movs	r2, #80	; 0x50
 8003d42:	5c9b      	ldrb	r3, [r3, r2]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x18>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e085      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x124>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2250      	movs	r2, #80	; 0x50
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	2220      	movs	r2, #32
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2250      	movs	r2, #80	; 0x50
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e06f      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a38      	ldr	r2, [pc, #224]	; (8003e60 <HAL_ADC_ConfigChannel+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d035      	beq.n	8003dee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	035b      	lsls	r3, r3, #13
 8003d8e:	0b5a      	lsrs	r2, r3, #13
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	02db      	lsls	r3, r3, #11
 8003da0:	4013      	ands	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003da4:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	0409      	lsls	r1, r1, #16
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003db2:	200a      	movs	r0, #10
 8003db4:	f000 f94a 	bl	800404c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	029b      	lsls	r3, r3, #10
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d006      	beq.n	8003dd2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	03c9      	lsls	r1, r1, #15
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	025b      	lsls	r3, r3, #9
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d037      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003dde:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	0449      	lsls	r1, r1, #17
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e02f      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	035b      	lsls	r3, r3, #13
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	43d9      	mvns	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	400a      	ands	r2, r1
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	02db      	lsls	r3, r3, #11
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d005      	beq.n	8003e1e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003e18:	4913      	ldr	r1, [pc, #76]	; (8003e68 <HAL_ADC_ConfigChannel+0x134>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	029b      	lsls	r3, r3, #10
 8003e26:	4013      	ands	r3, r2
 8003e28:	d005      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_ADC_ConfigChannel+0x138>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	025b      	lsls	r3, r3, #9
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d005      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <HAL_ADC_ConfigChannel+0x130>)
 8003e48:	4909      	ldr	r1, [pc, #36]	; (8003e70 <HAL_ADC_ConfigChannel+0x13c>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2250      	movs	r2, #80	; 0x50
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	00001001 	.word	0x00001001
 8003e64:	40012708 	.word	0x40012708
 8003e68:	ff7fffff 	.word	0xff7fffff
 8003e6c:	ffbfffff 	.word	0xffbfffff
 8003e70:	feffffff 	.word	0xfeffffff

08003e74 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2203      	movs	r2, #3
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d108      	bne.n	8003ea0 <ADC_Enable+0x2c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2201      	movs	r2, #1
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <ADC_Enable+0x2c>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <ADC_Enable+0x2e>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d146      	bne.n	8003f34 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <ADC_Enable+0xcc>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00d      	beq.n	8003ece <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e033      	b.n	8003f36 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f000 f8b4 	bl	800404c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ee4:	f7ff fd0e 	bl	8003904 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003eec:	e01b      	b.n	8003f26 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eee:	f7ff fd09 	bl	8003904 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b0a      	cmp	r3, #10
 8003efa:	d914      	bls.n	8003f26 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2201      	movs	r2, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d00d      	beq.n	8003f26 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	2210      	movs	r2, #16
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e007      	b.n	8003f36 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d1dc      	bne.n	8003eee <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b004      	add	sp, #16
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	80000017 	.word	0x80000017

08003f44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	2250      	movs	r2, #80	; 0x50
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d141      	bne.n	8003fe0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	23c0      	movs	r3, #192	; 0xc0
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	4013      	ands	r3, r2
 8003f76:	d12e      	bne.n	8003fd6 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d129      	bne.n	8003fd6 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d122      	bne.n	8003fd6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2204      	movs	r2, #4
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d110      	bne.n	8003fbe <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	210c      	movs	r1, #12
 8003fa8:	438a      	bics	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <ADC_DMAConvCplt+0xb0>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
 8003fbc:	e00b      	b.n	8003fd6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	2201      	movs	r2, #1
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fe93 	bl	8003d04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003fde:	e005      	b.n	8003fec <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	0010      	movs	r0, r2
 8003fea:	4798      	blx	r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b004      	add	sp, #16
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	fffffefe 	.word	0xfffffefe

08003ff8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff fe83 	bl	8003d14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b004      	add	sp, #16
 8004014:	bd80      	pop	{r7, pc}

08004016 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	431a      	orrs	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	2204      	movs	r2, #4
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff fe70 	bl	8003d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b004      	add	sp, #16
 800404a:	bd80      	pop	{r7, pc}

0800404c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <ADC_DelayMicroSecond+0x38>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	490b      	ldr	r1, [pc, #44]	; (8004088 <ADC_DelayMicroSecond+0x3c>)
 800405a:	0018      	movs	r0, r3
 800405c:	f7fc f87a 	bl	8000154 <__udivsi3>
 8004060:	0003      	movs	r3, r0
 8004062:	001a      	movs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4353      	muls	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800406a:	e002      	b.n	8004072 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b01      	subs	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f9      	bne.n	800406c <ADC_DelayMicroSecond+0x20>
  } 
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	20000014 	.word	0x20000014
 8004088:	000f4240 	.word	0x000f4240

0800408c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004096:	2317      	movs	r3, #23
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2250      	movs	r2, #80	; 0x50
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_ADCEx_Calibration_Start+0x28>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e083      	b.n	80041bc <HAL_ADCEx_Calibration_Start+0x130>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2250      	movs	r2, #80	; 0x50
 80040b8:	2101      	movs	r1, #1
 80040ba:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2203      	movs	r2, #3
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d108      	bne.n	80040dc <HAL_ADCEx_Calibration_Start+0x50>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_ADCEx_Calibration_Start+0x50>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_ADCEx_Calibration_Start+0x52>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d15b      	bne.n	800419a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	4a37      	ldr	r2, [pc, #220]	; (80041c4 <HAL_ADCEx_Calibration_Start+0x138>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	2202      	movs	r2, #2
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2203      	movs	r2, #3
 80040fa:	4013      	ands	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2103      	movs	r1, #3
 800410a:	438a      	bics	r2, r1
 800410c:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	0609      	lsls	r1, r1, #24
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004120:	f7ff fbf0 	bl	8003904 <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004128:	e01d      	b.n	8004166 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800412a:	f7ff fbeb 	bl	8003904 <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b0a      	cmp	r3, #10
 8004136:	d916      	bls.n	8004166 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	0fdb      	lsrs	r3, r3, #31
 8004140:	07da      	lsls	r2, r3, #31
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	429a      	cmp	r2, r3
 8004148:	d10d      	bne.n	8004166 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	2212      	movs	r2, #18
 8004150:	4393      	bics	r3, r2
 8004152:	2210      	movs	r2, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2250      	movs	r2, #80	; 0x50
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02a      	b.n	80041bc <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	0fdb      	lsrs	r3, r3, #31
 800416e:	07da      	lsls	r2, r3, #31
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	429a      	cmp	r2, r3
 8004176:	d0d8      	beq.n	800412a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68d9      	ldr	r1, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	430a      	orrs	r2, r1
 8004186:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	2203      	movs	r2, #3
 800418e:	4393      	bics	r3, r2
 8004190:	2201      	movs	r2, #1
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
 8004198:	e009      	b.n	80041ae <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	2220      	movs	r2, #32
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80041a6:	2317      	movs	r3, #23
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2250      	movs	r2, #80	; 0x50
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80041b6:	2317      	movs	r3, #23
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b006      	add	sp, #24
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	fffffefd 	.word	0xfffffefd

080041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	0002      	movs	r2, r0
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b7f      	cmp	r3, #127	; 0x7f
 80041da:	d809      	bhi.n	80041f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	231f      	movs	r3, #31
 80041e4:	401a      	ands	r2, r3
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <__NVIC_EnableIRQ+0x30>)
 80041e8:	2101      	movs	r1, #1
 80041ea:	4091      	lsls	r1, r2
 80041ec:	000a      	movs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
  }
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	e000e100 	.word	0xe000e100

080041fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	0002      	movs	r2, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	1dfb      	adds	r3, r7, #7
 8004208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b7f      	cmp	r3, #127	; 0x7f
 8004210:	d828      	bhi.n	8004264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004212:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <__NVIC_SetPriority+0xd4>)
 8004214:	1dfb      	adds	r3, r7, #7
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b25b      	sxtb	r3, r3
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	33c0      	adds	r3, #192	; 0xc0
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	589b      	ldr	r3, [r3, r2]
 8004222:	1dfa      	adds	r2, r7, #7
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	0011      	movs	r1, r2
 8004228:	2203      	movs	r2, #3
 800422a:	400a      	ands	r2, r1
 800422c:	00d2      	lsls	r2, r2, #3
 800422e:	21ff      	movs	r1, #255	; 0xff
 8004230:	4091      	lsls	r1, r2
 8004232:	000a      	movs	r2, r1
 8004234:	43d2      	mvns	r2, r2
 8004236:	401a      	ands	r2, r3
 8004238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	401a      	ands	r2, r3
 8004242:	1dfb      	adds	r3, r7, #7
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	0018      	movs	r0, r3
 8004248:	2303      	movs	r3, #3
 800424a:	4003      	ands	r3, r0
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004250:	481f      	ldr	r0, [pc, #124]	; (80042d0 <__NVIC_SetPriority+0xd4>)
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b25b      	sxtb	r3, r3
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	430a      	orrs	r2, r1
 800425c:	33c0      	adds	r3, #192	; 0xc0
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004262:	e031      	b.n	80042c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004264:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <__NVIC_SetPriority+0xd8>)
 8004266:	1dfb      	adds	r3, r7, #7
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	0019      	movs	r1, r3
 800426c:	230f      	movs	r3, #15
 800426e:	400b      	ands	r3, r1
 8004270:	3b08      	subs	r3, #8
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3306      	adds	r3, #6
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	18d3      	adds	r3, r2, r3
 800427a:	3304      	adds	r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1dfa      	adds	r2, r7, #7
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	0011      	movs	r1, r2
 8004284:	2203      	movs	r2, #3
 8004286:	400a      	ands	r2, r1
 8004288:	00d2      	lsls	r2, r2, #3
 800428a:	21ff      	movs	r1, #255	; 0xff
 800428c:	4091      	lsls	r1, r2
 800428e:	000a      	movs	r2, r1
 8004290:	43d2      	mvns	r2, r2
 8004292:	401a      	ands	r2, r3
 8004294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	019b      	lsls	r3, r3, #6
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	401a      	ands	r2, r3
 800429e:	1dfb      	adds	r3, r7, #7
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	0018      	movs	r0, r3
 80042a4:	2303      	movs	r3, #3
 80042a6:	4003      	ands	r3, r0
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ac:	4809      	ldr	r0, [pc, #36]	; (80042d4 <__NVIC_SetPriority+0xd8>)
 80042ae:	1dfb      	adds	r3, r7, #7
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	001c      	movs	r4, r3
 80042b4:	230f      	movs	r3, #15
 80042b6:	4023      	ands	r3, r4
 80042b8:	3b08      	subs	r3, #8
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	430a      	orrs	r2, r1
 80042be:	3306      	adds	r3, #6
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	18c3      	adds	r3, r0, r3
 80042c4:	3304      	adds	r3, #4
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b003      	add	sp, #12
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	e000e100 	.word	0xe000e100
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	045b      	lsls	r3, r3, #17
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d301      	bcc.n	80042f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ec:	2301      	movs	r3, #1
 80042ee:	e010      	b.n	8004312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <SysTick_Config+0x44>)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	3a01      	subs	r2, #1
 80042f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f8:	2301      	movs	r3, #1
 80042fa:	425b      	negs	r3, r3
 80042fc:	2103      	movs	r1, #3
 80042fe:	0018      	movs	r0, r3
 8004300:	f7ff ff7c 	bl	80041fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <SysTick_Config+0x44>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <SysTick_Config+0x44>)
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	e000e010 	.word	0xe000e010

08004320 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	210f      	movs	r1, #15
 800432c:	187b      	adds	r3, r7, r1
 800432e:	1c02      	adds	r2, r0, #0
 8004330:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	187b      	adds	r3, r7, r1
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff ff5d 	bl	80041fc <__NVIC_SetPriority>
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	0002      	movs	r2, r0
 8004352:	1dfb      	adds	r3, r7, #7
 8004354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004356:	1dfb      	adds	r3, r7, #7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b25b      	sxtb	r3, r3
 800435c:	0018      	movs	r0, r3
 800435e:	f7ff ff33 	bl	80041c8 <__NVIC_EnableIRQ>
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b002      	add	sp, #8
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff ffaf 	bl	80042d8 <SysTick_Config>
 800437a:	0003      	movs	r3, r0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e061      	b.n	800445a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a32      	ldr	r2, [pc, #200]	; (8004464 <HAL_DMA_Init+0xe0>)
 800439c:	4694      	mov	ip, r2
 800439e:	4463      	add	r3, ip
 80043a0:	2114      	movs	r1, #20
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7fb fed6 	bl	8000154 <__udivsi3>
 80043a8:	0003      	movs	r3, r0
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2d      	ldr	r2, [pc, #180]	; (8004468 <HAL_DMA_Init+0xe4>)
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2225      	movs	r2, #37	; 0x25
 80043ba:	2102      	movs	r1, #2
 80043bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a28      	ldr	r2, [pc, #160]	; (800446c <HAL_DMA_Init+0xe8>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	01db      	lsls	r3, r3, #7
 800440c:	429a      	cmp	r2, r3
 800440e:	d018      	beq.n	8004442 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_DMA_Init+0xec>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	211c      	movs	r1, #28
 800441a:	400b      	ands	r3, r1
 800441c:	210f      	movs	r1, #15
 800441e:	4099      	lsls	r1, r3
 8004420:	000b      	movs	r3, r1
 8004422:	43d9      	mvns	r1, r3
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_DMA_Init+0xec>)
 8004426:	400a      	ands	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_DMA_Init+0xec>)
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	201c      	movs	r0, #28
 8004438:	4003      	ands	r3, r0
 800443a:	409a      	lsls	r2, r3
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_DMA_Init+0xec>)
 800443e:	430a      	orrs	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2225      	movs	r2, #37	; 0x25
 800444c:	2101      	movs	r1, #1
 800444e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	bffdfff8 	.word	0xbffdfff8
 8004468:	40020000 	.word	0x40020000
 800446c:	ffff800f 	.word	0xffff800f
 8004470:	400200a8 	.word	0x400200a8

08004474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2317      	movs	r3, #23
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	5c9b      	ldrb	r3, [r3, r2]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_DMA_Start_IT+0x24>
 8004494:	2302      	movs	r3, #2
 8004496:	e04f      	b.n	8004538 <HAL_DMA_Start_IT+0xc4>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	2101      	movs	r1, #1
 800449e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2225      	movs	r2, #37	; 0x25
 80044a4:	5c9b      	ldrb	r3, [r3, r2]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d13a      	bne.n	8004522 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2225      	movs	r2, #37	; 0x25
 80044b0:	2102      	movs	r1, #2
 80044b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	438a      	bics	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f835 	bl	8004540 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	210e      	movs	r1, #14
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e00f      	b.n	8004510 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2104      	movs	r1, #4
 80044fc:	438a      	bics	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	210a      	movs	r1, #10
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2101      	movs	r1, #1
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e007      	b.n	8004532 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2224      	movs	r2, #36	; 0x24
 8004526:	2100      	movs	r1, #0
 8004528:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800452a:	2317      	movs	r3, #23
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	2202      	movs	r2, #2
 8004530:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004532:	2317      	movs	r3, #23
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	781b      	ldrb	r3, [r3, #0]
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b006      	add	sp, #24
 800453e:	bd80      	pop	{r7, pc}

08004540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	221c      	movs	r2, #28
 8004554:	401a      	ands	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2101      	movs	r1, #1
 800455c:	4091      	lsls	r1, r2
 800455e:	000a      	movs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d108      	bne.n	8004584 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004582:	e007      	b.n	8004594 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b004      	add	sp, #16
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80045b2:	e14f      	b.n	8004854 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4091      	lsls	r1, r2
 80045be:	000a      	movs	r2, r1
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d100      	bne.n	80045cc <HAL_GPIO_Init+0x30>
 80045ca:	e140      	b.n	800484e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2203      	movs	r2, #3
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d005      	beq.n	80045e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2203      	movs	r2, #3
 80045de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d130      	bne.n	8004646 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	409a      	lsls	r2, r3
 80045f2:	0013      	movs	r3, r2
 80045f4:	43da      	mvns	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	409a      	lsls	r2, r3
 8004606:	0013      	movs	r3, r2
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800461a:	2201      	movs	r2, #1
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	409a      	lsls	r2, r3
 8004620:	0013      	movs	r3, r2
 8004622:	43da      	mvns	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	2201      	movs	r2, #1
 8004632:	401a      	ands	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	409a      	lsls	r2, r3
 8004638:	0013      	movs	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2203      	movs	r2, #3
 800464c:	4013      	ands	r3, r2
 800464e:	2b03      	cmp	r3, #3
 8004650:	d017      	beq.n	8004682 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	409a      	lsls	r2, r3
 8004660:	0013      	movs	r3, r2
 8004662:	43da      	mvns	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	0013      	movs	r3, r2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2203      	movs	r2, #3
 8004688:	4013      	ands	r3, r2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d123      	bne.n	80046d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	0092      	lsls	r2, r2, #2
 8004698:	58d3      	ldr	r3, [r2, r3]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2207      	movs	r2, #7
 80046a0:	4013      	ands	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	409a      	lsls	r2, r3
 80046a8:	0013      	movs	r3, r2
 80046aa:	43da      	mvns	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2107      	movs	r1, #7
 80046ba:	400b      	ands	r3, r1
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	409a      	lsls	r2, r3
 80046e4:	0013      	movs	r3, r2
 80046e6:	43da      	mvns	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2203      	movs	r2, #3
 80046f4:	401a      	ands	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	029b      	lsls	r3, r3, #10
 8004712:	4013      	ands	r3, r2
 8004714:	d100      	bne.n	8004718 <HAL_GPIO_Init+0x17c>
 8004716:	e09a      	b.n	800484e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004718:	4b54      	ldr	r3, [pc, #336]	; (800486c <HAL_GPIO_Init+0x2d0>)
 800471a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_GPIO_Init+0x2d0>)
 800471e:	2101      	movs	r1, #1
 8004720:	430a      	orrs	r2, r1
 8004722:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_GPIO_Init+0x2d4>)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	3302      	adds	r3, #2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	589b      	ldr	r3, [r3, r2]
 8004730:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2203      	movs	r2, #3
 8004736:	4013      	ands	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	409a      	lsls	r2, r3
 800473e:	0013      	movs	r3, r2
 8004740:	43da      	mvns	r2, r3
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	23a0      	movs	r3, #160	; 0xa0
 800474c:	05db      	lsls	r3, r3, #23
 800474e:	429a      	cmp	r2, r3
 8004750:	d019      	beq.n	8004786 <HAL_GPIO_Init+0x1ea>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a47      	ldr	r2, [pc, #284]	; (8004874 <HAL_GPIO_Init+0x2d8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_GPIO_Init+0x1e6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a46      	ldr	r2, [pc, #280]	; (8004878 <HAL_GPIO_Init+0x2dc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00d      	beq.n	800477e <HAL_GPIO_Init+0x1e2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a45      	ldr	r2, [pc, #276]	; (800487c <HAL_GPIO_Init+0x2e0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <HAL_GPIO_Init+0x1de>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a44      	ldr	r2, [pc, #272]	; (8004880 <HAL_GPIO_Init+0x2e4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d101      	bne.n	8004776 <HAL_GPIO_Init+0x1da>
 8004772:	2305      	movs	r3, #5
 8004774:	e008      	b.n	8004788 <HAL_GPIO_Init+0x1ec>
 8004776:	2306      	movs	r3, #6
 8004778:	e006      	b.n	8004788 <HAL_GPIO_Init+0x1ec>
 800477a:	2303      	movs	r3, #3
 800477c:	e004      	b.n	8004788 <HAL_GPIO_Init+0x1ec>
 800477e:	2302      	movs	r3, #2
 8004780:	e002      	b.n	8004788 <HAL_GPIO_Init+0x1ec>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_GPIO_Init+0x1ec>
 8004786:	2300      	movs	r3, #0
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	2103      	movs	r1, #3
 800478c:	400a      	ands	r2, r1
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	4093      	lsls	r3, r2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004798:	4935      	ldr	r1, [pc, #212]	; (8004870 <HAL_GPIO_Init+0x2d4>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	025b      	lsls	r3, r3, #9
 80047be:	4013      	ands	r3, r2
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047ca:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80047d0:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43da      	mvns	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	4013      	ands	r3, r2
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80047f4:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43da      	mvns	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	035b      	lsls	r3, r3, #13
 8004812:	4013      	ands	r3, r2
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800481e:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	43da      	mvns	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	039b      	lsls	r3, r3, #14
 800483c:	4013      	ands	r3, r2
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_GPIO_Init+0x2e8>)
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3301      	adds	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	40da      	lsrs	r2, r3
 800485c:	1e13      	subs	r3, r2, #0
 800485e:	d000      	beq.n	8004862 <HAL_GPIO_Init+0x2c6>
 8004860:	e6a8      	b.n	80045b4 <HAL_GPIO_Init+0x18>
  }
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b006      	add	sp, #24
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	40010000 	.word	0x40010000
 8004874:	50000400 	.word	0x50000400
 8004878:	50000800 	.word	0x50000800
 800487c:	50000c00 	.word	0x50000c00
 8004880:	50001c00 	.word	0x50001c00
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	0008      	movs	r0, r1
 8004892:	0011      	movs	r1, r2
 8004894:	1cbb      	adds	r3, r7, #2
 8004896:	1c02      	adds	r2, r0, #0
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	1c7b      	adds	r3, r7, #1
 800489c:	1c0a      	adds	r2, r1, #0
 800489e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048a0:	1c7b      	adds	r3, r7, #1
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a8:	1cbb      	adds	r3, r7, #2
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80048b0:	e003      	b.n	80048ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80048b2:	1cbb      	adds	r3, r7, #2
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	0002      	movs	r2, r0
 80048cc:	1dbb      	adds	r3, r7, #6
 80048ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	1dba      	adds	r2, r7, #6
 80048d6:	8812      	ldrh	r2, [r2, #0]
 80048d8:	4013      	ands	r3, r2
 80048da:	d008      	beq.n	80048ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80048de:	1dba      	adds	r2, r7, #6
 80048e0:	8812      	ldrh	r2, [r2, #0]
 80048e2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048e4:	1dbb      	adds	r3, r7, #6
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7fe fa15 	bl	8002d18 <HAL_GPIO_EXTI_Callback>
  }
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	40010400 	.word	0x40010400

080048fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b5b0      	push	{r4, r5, r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f000 fbaf 	bl	800506e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004910:	4bcf      	ldr	r3, [pc, #828]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	220c      	movs	r2, #12
 8004916:	4013      	ands	r3, r2
 8004918:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491a:	4bcd      	ldr	r3, [pc, #820]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	025b      	lsls	r3, r3, #9
 8004922:	4013      	ands	r3, r2
 8004924:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2201      	movs	r2, #1
 800492c:	4013      	ands	r3, r2
 800492e:	d100      	bne.n	8004932 <HAL_RCC_OscConfig+0x36>
 8004930:	e07e      	b.n	8004a30 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d007      	beq.n	8004948 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d112      	bne.n	8004964 <HAL_RCC_OscConfig+0x68>
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	025b      	lsls	r3, r3, #9
 8004944:	429a      	cmp	r2, r3
 8004946:	d10d      	bne.n	8004964 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	4bc1      	ldr	r3, [pc, #772]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	029b      	lsls	r3, r3, #10
 8004950:	4013      	ands	r3, r2
 8004952:	d100      	bne.n	8004956 <HAL_RCC_OscConfig+0x5a>
 8004954:	e06b      	b.n	8004a2e <HAL_RCC_OscConfig+0x132>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d167      	bne.n	8004a2e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f000 fb85 	bl	800506e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	025b      	lsls	r3, r3, #9
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x84>
 8004970:	4bb7      	ldr	r3, [pc, #732]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4bb6      	ldr	r3, [pc, #728]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	0249      	lsls	r1, r1, #9
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e027      	b.n	80049d0 <HAL_RCC_OscConfig+0xd4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	23a0      	movs	r3, #160	; 0xa0
 8004986:	02db      	lsls	r3, r3, #11
 8004988:	429a      	cmp	r2, r3
 800498a:	d10e      	bne.n	80049aa <HAL_RCC_OscConfig+0xae>
 800498c:	4bb0      	ldr	r3, [pc, #704]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4baf      	ldr	r3, [pc, #700]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	02c9      	lsls	r1, r1, #11
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	4bad      	ldr	r3, [pc, #692]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4bac      	ldr	r3, [pc, #688]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	0249      	lsls	r1, r1, #9
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e012      	b.n	80049d0 <HAL_RCC_OscConfig+0xd4>
 80049aa:	4ba9      	ldr	r3, [pc, #676]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4ba8      	ldr	r3, [pc, #672]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049b0:	49a8      	ldr	r1, [pc, #672]	; (8004c54 <HAL_RCC_OscConfig+0x358>)
 80049b2:	400a      	ands	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	4ba6      	ldr	r3, [pc, #664]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	025b      	lsls	r3, r3, #9
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4ba2      	ldr	r3, [pc, #648]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4ba1      	ldr	r3, [pc, #644]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049ca:	49a3      	ldr	r1, [pc, #652]	; (8004c58 <HAL_RCC_OscConfig+0x35c>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fe ff94 	bl	8003904 <HAL_GetTick>
 80049dc:	0003      	movs	r3, r0
 80049de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e0:	e009      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e2:	f7fe ff8f 	bl	8003904 <HAL_GetTick>
 80049e6:	0002      	movs	r2, r0
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	; 0x64
 80049ee:	d902      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	f000 fb3c 	bl	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049f6:	4b96      	ldr	r3, [pc, #600]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	4013      	ands	r3, r2
 8004a00:	d0ef      	beq.n	80049e2 <HAL_RCC_OscConfig+0xe6>
 8004a02:	e015      	b.n	8004a30 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fe ff7e 	bl	8003904 <HAL_GetTick>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a0e:	f7fe ff79 	bl	8003904 <HAL_GetTick>
 8004a12:	0002      	movs	r2, r0
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b64      	cmp	r3, #100	; 0x64
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e326      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a20:	4b8b      	ldr	r3, [pc, #556]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x112>
 8004a2c:	e000      	b.n	8004a30 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2202      	movs	r2, #2
 8004a36:	4013      	ands	r3, r2
 8004a38:	d100      	bne.n	8004a3c <HAL_RCC_OscConfig+0x140>
 8004a3a:	e08b      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d13e      	bne.n	8004acc <HAL_RCC_OscConfig+0x1d0>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d13b      	bne.n	8004acc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004a54:	4b7e      	ldr	r3, [pc, #504]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_RCC_OscConfig+0x16c>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e302      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b79      	ldr	r3, [pc, #484]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a7b      	ldr	r2, [pc, #492]	; (8004c5c <HAL_RCC_OscConfig+0x360>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	021a      	lsls	r2, r3, #8
 8004a78:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a7e:	4b74      	ldr	r3, [pc, #464]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2209      	movs	r2, #9
 8004a84:	4393      	bics	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	4b71      	ldr	r3, [pc, #452]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a90:	f000 fcc4 	bl	800541c <HAL_RCC_GetSysClockFreq>
 8004a94:	0001      	movs	r1, r0
 8004a96:	4b6e      	ldr	r3, [pc, #440]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	4a6f      	ldr	r2, [pc, #444]	; (8004c60 <HAL_RCC_OscConfig+0x364>)
 8004aa2:	5cd3      	ldrb	r3, [r2, r3]
 8004aa4:	000a      	movs	r2, r1
 8004aa6:	40da      	lsrs	r2, r3
 8004aa8:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x368>)
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004aac:	4b6e      	ldr	r3, [pc, #440]	; (8004c68 <HAL_RCC_OscConfig+0x36c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2513      	movs	r5, #19
 8004ab2:	197c      	adds	r4, r7, r5
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fe fedf 	bl	8003878 <HAL_InitTick>
 8004aba:	0003      	movs	r3, r0
 8004abc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004abe:	197b      	adds	r3, r7, r5
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d046      	beq.n	8004b54 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004ac6:	197b      	adds	r3, r7, r5
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	e2d0      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d027      	beq.n	8004b22 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ad2:	4b5f      	ldr	r3, [pc, #380]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2209      	movs	r2, #9
 8004ad8:	4393      	bics	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	4b5c      	ldr	r3, [pc, #368]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe ff0e 	bl	8003904 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aee:	f7fe ff09 	bl	8003904 <HAL_GetTick>
 8004af2:	0002      	movs	r2, r0
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e2b6      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2204      	movs	r2, #4
 8004b06:	4013      	ands	r3, r2
 8004b08:	d0f1      	beq.n	8004aee <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a53      	ldr	r2, [pc, #332]	; (8004c5c <HAL_RCC_OscConfig+0x360>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	4b4d      	ldr	r3, [pc, #308]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	e018      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b22:	4b4b      	ldr	r3, [pc, #300]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b28:	2101      	movs	r1, #1
 8004b2a:	438a      	bics	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fee9 	bl	8003904 <HAL_GetTick>
 8004b32:	0003      	movs	r3, r0
 8004b34:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b38:	f7fe fee4 	bl	8003904 <HAL_GetTick>
 8004b3c:	0002      	movs	r2, r0
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e291      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b4a:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	4013      	ands	r3, r2
 8004b52:	d1f1      	bne.n	8004b38 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2210      	movs	r2, #16
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d100      	bne.n	8004b60 <HAL_RCC_OscConfig+0x264>
 8004b5e:	e0a1      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d140      	bne.n	8004be8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b66:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d005      	beq.n	8004b7e <HAL_RCC_OscConfig+0x282>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e277      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b7e:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4a3a      	ldr	r2, [pc, #232]	; (8004c6c <HAL_RCC_OscConfig+0x370>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b8c:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	0a19      	lsrs	r1, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	061a      	lsls	r2, r3, #24
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	0b5b      	lsrs	r3, r3, #13
 8004bac:	3301      	adds	r3, #1
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	0212      	lsls	r2, r2, #8
 8004bb2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bb4:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	210f      	movs	r1, #15
 8004bbc:	400b      	ands	r3, r1
 8004bbe:	4928      	ldr	r1, [pc, #160]	; (8004c60 <HAL_RCC_OscConfig+0x364>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bc4:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <HAL_RCC_OscConfig+0x368>)
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_OscConfig+0x36c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2513      	movs	r5, #19
 8004bce:	197c      	adds	r4, r7, r5
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7fe fe51 	bl	8003878 <HAL_InitTick>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004bda:	197b      	adds	r3, r7, r5
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d060      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004be2:	197b      	adds	r3, r7, r5
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	e242      	b.n	800506e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d03f      	beq.n	8004c70 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bf0:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0049      	lsls	r1, r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fe fe81 	bl	8003904 <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c08:	f7fe fe7c 	bl	8003904 <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e229      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4013      	ands	r3, r2
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_RCC_OscConfig+0x370>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	0019      	movs	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	0a19      	lsrs	r1, r3, #8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	061a      	lsls	r2, r3, #24
 8004c48:	4b01      	ldr	r3, [pc, #4]	; (8004c50 <HAL_RCC_OscConfig+0x354>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	e029      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3a8>
 8004c50:	40021000 	.word	0x40021000
 8004c54:	fffeffff 	.word	0xfffeffff
 8004c58:	fffbffff 	.word	0xfffbffff
 8004c5c:	ffffe0ff 	.word	0xffffe0ff
 8004c60:	0800a5d4 	.word	0x0800a5d4
 8004c64:	20000014 	.word	0x20000014
 8004c68:	20000018 	.word	0x20000018
 8004c6c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c70:	4bbd      	ldr	r3, [pc, #756]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4bbc      	ldr	r3, [pc, #752]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004c76:	49bd      	ldr	r1, [pc, #756]	; (8004f6c <HAL_RCC_OscConfig+0x670>)
 8004c78:	400a      	ands	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fe42 	bl	8003904 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c86:	f7fe fe3d 	bl	8003904 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e1ea      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c98:	4bb3      	ldr	r3, [pc, #716]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	4013      	ands	r3, r2
 8004cac:	d036      	beq.n	8004d1c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d019      	beq.n	8004cea <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb6:	4bac      	ldr	r3, [pc, #688]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cba:	4bab      	ldr	r3, [pc, #684]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fe1f 	bl	8003904 <HAL_GetTick>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fe fe1a 	bl	8003904 <HAL_GetTick>
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1c7      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cde:	4ba2      	ldr	r3, [pc, #648]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d0f1      	beq.n	8004ccc <HAL_RCC_OscConfig+0x3d0>
 8004ce8:	e018      	b.n	8004d1c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cea:	4b9f      	ldr	r3, [pc, #636]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cee:	4b9e      	ldr	r3, [pc, #632]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fe fe05 	bl	8003904 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fe fe00 	bl	8003904 <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1ad      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d12:	4b95      	ldr	r3, [pc, #596]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d1f1      	bne.n	8004d00 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2204      	movs	r2, #4
 8004d22:	4013      	ands	r3, r2
 8004d24:	d100      	bne.n	8004d28 <HAL_RCC_OscConfig+0x42c>
 8004d26:	e0ae      	b.n	8004e86 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d28:	2027      	movs	r0, #39	; 0x27
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d30:	4b8d      	ldr	r3, [pc, #564]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	055b      	lsls	r3, r3, #21
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b8a      	ldr	r3, [pc, #552]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d40:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	0549      	lsls	r1, r1, #21
 8004d46:	430a      	orrs	r2, r1
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004d4a:	183b      	adds	r3, r7, r0
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b87      	ldr	r3, [pc, #540]	; (8004f70 <HAL_RCC_OscConfig+0x674>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d11a      	bne.n	8004d92 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5c:	4b84      	ldr	r3, [pc, #528]	; (8004f70 <HAL_RCC_OscConfig+0x674>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_RCC_OscConfig+0x674>)
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	0049      	lsls	r1, r1, #1
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe fdcb 	bl	8003904 <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d74:	f7fe fdc6 	bl	8003904 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e173      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d86:	4b7a      	ldr	r3, [pc, #488]	; (8004f70 <HAL_RCC_OscConfig+0x674>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_OscConfig+0x4b2>
 8004d9e:	4b72      	ldr	r3, [pc, #456]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da2:	4b71      	ldr	r3, [pc, #452]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0049      	lsls	r1, r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
 8004dac:	e031      	b.n	8004e12 <HAL_RCC_OscConfig+0x516>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x4d4>
 8004db6:	4b6c      	ldr	r3, [pc, #432]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dba:	4b6b      	ldr	r3, [pc, #428]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004dbc:	496b      	ldr	r1, [pc, #428]	; (8004f6c <HAL_RCC_OscConfig+0x670>)
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc2:	4b69      	ldr	r3, [pc, #420]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc6:	4b68      	ldr	r3, [pc, #416]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004dc8:	496a      	ldr	r1, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x678>)
 8004dca:	400a      	ands	r2, r1
 8004dcc:	651a      	str	r2, [r3, #80]	; 0x50
 8004dce:	e020      	b.n	8004e12 <HAL_RCC_OscConfig+0x516>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	23a0      	movs	r3, #160	; 0xa0
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d10e      	bne.n	8004dfa <HAL_RCC_OscConfig+0x4fe>
 8004ddc:	4b62      	ldr	r3, [pc, #392]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004de2:	2180      	movs	r1, #128	; 0x80
 8004de4:	00c9      	lsls	r1, r1, #3
 8004de6:	430a      	orrs	r2, r1
 8004de8:	651a      	str	r2, [r3, #80]	; 0x50
 8004dea:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dee:	4b5e      	ldr	r3, [pc, #376]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004df0:	2180      	movs	r1, #128	; 0x80
 8004df2:	0049      	lsls	r1, r1, #1
 8004df4:	430a      	orrs	r2, r1
 8004df6:	651a      	str	r2, [r3, #80]	; 0x50
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x516>
 8004dfa:	4b5b      	ldr	r3, [pc, #364]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dfe:	4b5a      	ldr	r3, [pc, #360]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e00:	495a      	ldr	r1, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x670>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	651a      	str	r2, [r3, #80]	; 0x50
 8004e06:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0a:	4b57      	ldr	r3, [pc, #348]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e0c:	4959      	ldr	r1, [pc, #356]	; (8004f74 <HAL_RCC_OscConfig+0x678>)
 8004e0e:	400a      	ands	r2, r1
 8004e10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fd73 	bl	8003904 <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e22:	e009      	b.n	8004e38 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe fd6e 	bl	8003904 <HAL_GetTick>
 8004e28:	0002      	movs	r2, r0
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	4a52      	ldr	r2, [pc, #328]	; (8004f78 <HAL_RCC_OscConfig+0x67c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e11a      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4013      	ands	r3, r2
 8004e42:	d0ef      	beq.n	8004e24 <HAL_RCC_OscConfig+0x528>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fe fd5d 	bl	8003904 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e4e:	e009      	b.n	8004e64 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fe fd58 	bl	8003904 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a47      	ldr	r2, [pc, #284]	; (8004f78 <HAL_RCC_OscConfig+0x67c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e104      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e64:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d1ef      	bne.n	8004e50 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e70:	2327      	movs	r3, #39	; 0x27
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e80:	493e      	ldr	r1, [pc, #248]	; (8004f7c <HAL_RCC_OscConfig+0x680>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d049      	beq.n	8004f24 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d026      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e98:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b32      	ldr	r3, [pc, #200]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea8:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004eaa:	2101      	movs	r1, #1
 8004eac:	430a      	orrs	r2, r1
 8004eae:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb0:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <HAL_RCC_OscConfig+0x684>)
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <HAL_RCC_OscConfig+0x684>)
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	0189      	lsls	r1, r1, #6
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fe fd21 	bl	8003904 <HAL_GetTick>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec8:	f7fe fd1c 	bl	8003904 <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0c9      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d0f1      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x5cc>
 8004ee4:	e01e      	b.n	8004f24 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004ee6:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b1f      	ldr	r3, [pc, #124]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004eec:	2101      	movs	r1, #1
 8004eee:	438a      	bics	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_RCC_OscConfig+0x684>)
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	4b22      	ldr	r3, [pc, #136]	; (8004f80 <HAL_RCC_OscConfig+0x684>)
 8004ef8:	4922      	ldr	r1, [pc, #136]	; (8004f84 <HAL_RCC_OscConfig+0x688>)
 8004efa:	400a      	ands	r2, r1
 8004efc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fe fd01 	bl	8003904 <HAL_GetTick>
 8004f02:	0003      	movs	r3, r0
 8004f04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f08:	f7fe fcfc 	bl	8003904 <HAL_GetTick>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e0a9      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	4013      	ands	r3, r2
 8004f22:	d1f1      	bne.n	8004f08 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d100      	bne.n	8004f2e <HAL_RCC_OscConfig+0x632>
 8004f2c:	e09e      	b.n	800506c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d100      	bne.n	8004f36 <HAL_RCC_OscConfig+0x63a>
 8004f34:	e077      	b.n	8005026 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d158      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_OscConfig+0x66c>)
 8004f44:	4910      	ldr	r1, [pc, #64]	; (8004f88 <HAL_RCC_OscConfig+0x68c>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fe fcdb 	bl	8003904 <HAL_GetTick>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f52:	e01b      	b.n	8004f8c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fe fcd6 	bl	8003904 <HAL_GetTick>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d914      	bls.n	8004f8c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e083      	b.n	800506e <HAL_RCC_OscConfig+0x772>
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	fffffeff 	.word	0xfffffeff
 8004f70:	40007000 	.word	0x40007000
 8004f74:	fffffbff 	.word	0xfffffbff
 8004f78:	00001388 	.word	0x00001388
 8004f7c:	efffffff 	.word	0xefffffff
 8004f80:	40010000 	.word	0x40010000
 8004f84:	ffffdfff 	.word	0xffffdfff
 8004f88:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f8c:	4b3a      	ldr	r3, [pc, #232]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	049b      	lsls	r3, r3, #18
 8004f94:	4013      	ands	r3, r2
 8004f96:	d1dd      	bne.n	8004f54 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f98:	4b37      	ldr	r3, [pc, #220]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a37      	ldr	r2, [pc, #220]	; (800507c <HAL_RCC_OscConfig+0x780>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	4b2e      	ldr	r3, [pc, #184]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	0449      	lsls	r1, r1, #17
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fe fc9d 	bl	8003904 <HAL_GetTick>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe fc98 	bl	8003904 <HAL_GetTick>
 8004fd4:	0002      	movs	r2, r0
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e045      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fe2:	4b25      	ldr	r3, [pc, #148]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	049b      	lsls	r3, r3, #18
 8004fea:	4013      	ands	r3, r2
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x6d4>
 8004fee:	e03d      	b.n	800506c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004ff6:	4922      	ldr	r1, [pc, #136]	; (8005080 <HAL_RCC_OscConfig+0x784>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fc82 	bl	8003904 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005006:	f7fe fc7d 	bl	8003904 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e02a      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005018:	4b17      	ldr	r3, [pc, #92]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	049b      	lsls	r3, r3, #18
 8005020:	4013      	ands	r3, r2
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x70a>
 8005024:	e022      	b.n	800506c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e01d      	b.n	800506e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	025b      	lsls	r3, r3, #9
 800503e:	401a      	ands	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d10f      	bne.n	8005068 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	23f0      	movs	r3, #240	; 0xf0
 800504c:	039b      	lsls	r3, r3, #14
 800504e:	401a      	ands	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	23c0      	movs	r3, #192	; 0xc0
 800505c:	041b      	lsls	r3, r3, #16
 800505e:	401a      	ands	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b00a      	add	sp, #40	; 0x28
 8005074:	bdb0      	pop	{r4, r5, r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	40021000 	.word	0x40021000
 800507c:	ff02ffff 	.word	0xff02ffff
 8005080:	feffffff 	.word	0xfeffffff

08005084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e128      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b96      	ldr	r3, [pc, #600]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	4013      	ands	r3, r2
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d91e      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b93      	ldr	r3, [pc, #588]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2201      	movs	r2, #1
 80050ac:	4393      	bics	r3, r2
 80050ae:	0019      	movs	r1, r3
 80050b0:	4b90      	ldr	r3, [pc, #576]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050b8:	f7fe fc24 	bl	8003904 <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c0:	e009      	b.n	80050d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c2:	f7fe fc1f 	bl	8003904 <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	4a8a      	ldr	r2, [pc, #552]	; (80052f8 <HAL_RCC_ClockConfig+0x274>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e109      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b87      	ldr	r3, [pc, #540]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2202      	movs	r2, #2
 80050ea:	4013      	ands	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ee:	4b83      	ldr	r3, [pc, #524]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	22f0      	movs	r2, #240	; 0xf0
 80050f4:	4393      	bics	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	4b7f      	ldr	r3, [pc, #508]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2201      	movs	r2, #1
 8005108:	4013      	ands	r3, r2
 800510a:	d100      	bne.n	800510e <HAL_RCC_ClockConfig+0x8a>
 800510c:	e089      	b.n	8005222 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005116:	4b79      	ldr	r3, [pc, #484]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	4013      	ands	r3, r2
 8005120:	d120      	bne.n	8005164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0e1      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800512e:	4b73      	ldr	r3, [pc, #460]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	049b      	lsls	r3, r3, #18
 8005136:	4013      	ands	r3, r2
 8005138:	d114      	bne.n	8005164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0d5      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d106      	bne.n	8005154 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005146:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	4013      	ands	r3, r2
 800514e:	d109      	bne.n	8005164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0ca      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005154:	4b69      	ldr	r3, [pc, #420]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4013      	ands	r3, r2
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0c2      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005164:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2203      	movs	r2, #3
 800516a:	4393      	bics	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	4b62      	ldr	r3, [pc, #392]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005174:	430a      	orrs	r2, r1
 8005176:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005178:	f7fe fbc4 	bl	8003904 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d111      	bne.n	80051ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005188:	e009      	b.n	800519e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518a:	f7fe fbbb 	bl	8003904 <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	4a58      	ldr	r2, [pc, #352]	; (80052f8 <HAL_RCC_ClockConfig+0x274>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e0a5      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800519e:	4b57      	ldr	r3, [pc, #348]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	220c      	movs	r2, #12
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d1ef      	bne.n	800518a <HAL_RCC_ClockConfig+0x106>
 80051aa:	e03a      	b.n	8005222 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d111      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b4:	e009      	b.n	80051ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b6:	f7fe fba5 	bl	8003904 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	4a4d      	ldr	r2, [pc, #308]	; (80052f8 <HAL_RCC_ClockConfig+0x274>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e08f      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ca:	4b4c      	ldr	r3, [pc, #304]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	220c      	movs	r2, #12
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d1ef      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x132>
 80051d6:	e024      	b.n	8005222 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d11b      	bne.n	8005218 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051e0:	e009      	b.n	80051f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e2:	f7fe fb8f 	bl	8003904 <HAL_GetTick>
 80051e6:	0002      	movs	r2, r0
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	4a42      	ldr	r2, [pc, #264]	; (80052f8 <HAL_RCC_ClockConfig+0x274>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e079      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051f6:	4b41      	ldr	r3, [pc, #260]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	220c      	movs	r2, #12
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d1ef      	bne.n	80051e2 <HAL_RCC_ClockConfig+0x15e>
 8005202:	e00e      	b.n	8005222 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fe fb7e 	bl	8003904 <HAL_GetTick>
 8005208:	0002      	movs	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_RCC_ClockConfig+0x274>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e068      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005218:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	220c      	movs	r2, #12
 800521e:	4013      	ands	r3, r2
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005222:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	4013      	ands	r3, r2
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d21e      	bcs.n	800526e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005230:	4b30      	ldr	r3, [pc, #192]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	4393      	bics	r3, r2
 8005238:	0019      	movs	r1, r3
 800523a:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005242:	f7fe fb5f 	bl	8003904 <HAL_GetTick>
 8005246:	0003      	movs	r3, r0
 8005248:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	e009      	b.n	8005260 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fe fb5a 	bl	8003904 <HAL_GetTick>
 8005250:	0002      	movs	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <HAL_RCC_ClockConfig+0x274>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e044      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_RCC_ClockConfig+0x270>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2201      	movs	r2, #1
 8005266:	4013      	ands	r3, r2
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d1ee      	bne.n	800524c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2204      	movs	r2, #4
 8005274:	4013      	ands	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_RCC_ClockConfig+0x27c>)
 800527e:	4013      	ands	r3, r2
 8005280:	0019      	movs	r1, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005288:	430a      	orrs	r2, r1
 800528a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	4013      	ands	r3, r2
 8005294:	d00a      	beq.n	80052ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005296:	4b19      	ldr	r3, [pc, #100]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <HAL_RCC_ClockConfig+0x280>)
 800529c:	4013      	ands	r3, r2
 800529e:	0019      	movs	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	00da      	lsls	r2, r3, #3
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80052a8:	430a      	orrs	r2, r1
 80052aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ac:	f000 f8b6 	bl	800541c <HAL_RCC_GetSysClockFreq>
 80052b0:	0001      	movs	r1, r0
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_ClockConfig+0x278>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	220f      	movs	r2, #15
 80052ba:	4013      	ands	r3, r2
 80052bc:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_RCC_ClockConfig+0x284>)
 80052be:	5cd3      	ldrb	r3, [r2, r3]
 80052c0:	000a      	movs	r2, r1
 80052c2:	40da      	lsrs	r2, r3
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_RCC_ClockConfig+0x288>)
 80052c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_RCC_ClockConfig+0x28c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	250b      	movs	r5, #11
 80052ce:	197c      	adds	r4, r7, r5
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fe fad1 	bl	8003878 <HAL_InitTick>
 80052d6:	0003      	movs	r3, r0
 80052d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052da:	197b      	adds	r3, r7, r5
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80052e2:	197b      	adds	r3, r7, r5
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	e000      	b.n	80052ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b004      	add	sp, #16
 80052f0:	bdb0      	pop	{r4, r5, r7, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	40022000 	.word	0x40022000
 80052f8:	00001388 	.word	0x00001388
 80052fc:	40021000 	.word	0x40021000
 8005300:	fffff8ff 	.word	0xfffff8ff
 8005304:	ffffc7ff 	.word	0xffffc7ff
 8005308:	0800a5d4 	.word	0x0800a5d4
 800530c:	20000014 	.word	0x20000014
 8005310:	20000018 	.word	0x20000018

08005314 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005314:	b590      	push	{r4, r7, lr}
 8005316:	b08d      	sub	sp, #52	; 0x34
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8005320:	241c      	movs	r4, #28
 8005322:	193b      	adds	r3, r7, r4
 8005324:	0018      	movs	r0, r3
 8005326:	2314      	movs	r3, #20
 8005328:	001a      	movs	r2, r3
 800532a:	2100      	movs	r1, #0
 800532c:	f002 fab4 	bl	8007898 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8005330:	0020      	movs	r0, r4
 8005332:	183b      	adds	r3, r7, r0
 8005334:	2202      	movs	r2, #2
 8005336:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005338:	183b      	adds	r3, r7, r0
 800533a:	2202      	movs	r2, #2
 800533c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800533e:	183b      	adds	r3, r7, r0
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11a      	bne.n	8005380 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800534a:	183b      	adds	r3, r7, r0
 800534c:	2280      	movs	r2, #128	; 0x80
 800534e:	0052      	lsls	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8005352:	183b      	adds	r3, r7, r0
 8005354:	2200      	movs	r2, #0
 8005356:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005358:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 800535e:	2101      	movs	r1, #1
 8005360:	430a      	orrs	r2, r1
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c
 8005364:	4b2a      	ldr	r3, [pc, #168]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	2201      	movs	r2, #1
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8005370:	183a      	adds	r2, r7, r0
 8005372:	23a0      	movs	r3, #160	; 0xa0
 8005374:	05db      	lsls	r3, r3, #23
 8005376:	0011      	movs	r1, r2
 8005378:	0018      	movs	r0, r3
 800537a:	f7ff f90f 	bl	800459c <HAL_GPIO_Init>
 800537e:	e038      	b.n	80053f2 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d11a      	bne.n	80053bc <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8005386:	201c      	movs	r0, #28
 8005388:	183b      	adds	r3, r7, r0
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	0192      	lsls	r2, r2, #6
 800538e:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8005390:	183b      	adds	r3, r7, r0
 8005392:	2200      	movs	r2, #0
 8005394:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 800539c:	2102      	movs	r1, #2
 800539e:	430a      	orrs	r2, r1
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_RCC_MCOConfig+0x100>)
 80053b2:	0019      	movs	r1, r3
 80053b4:	0010      	movs	r0, r2
 80053b6:	f7ff f8f1 	bl	800459c <HAL_GPIO_Init>
 80053ba:	e01a      	b.n	80053f2 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80053bc:	201c      	movs	r0, #28
 80053be:	183b      	adds	r3, r7, r0
 80053c0:	2280      	movs	r2, #128	; 0x80
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80053c6:	183b      	adds	r3, r7, r0
 80053c8:	2200      	movs	r2, #0
 80053ca:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 80053d2:	2101      	movs	r1, #1
 80053d4:	430a      	orrs	r2, r1
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	2201      	movs	r2, #1
 80053de:	4013      	ands	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80053e4:	183a      	adds	r2, r7, r0
 80053e6:	23a0      	movs	r3, #160	; 0xa0
 80053e8:	05db      	lsls	r3, r3, #23
 80053ea:	0011      	movs	r1, r2
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7ff f8d5 	bl	800459c <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <HAL_RCC_MCOConfig+0x104>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	431a      	orrs	r2, r3
 8005402:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_RCC_MCOConfig+0xfc>)
 8005404:	430a      	orrs	r2, r1
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	46bd      	mov	sp, r7
 800540c:	b00d      	add	sp, #52	; 0x34
 800540e:	bd90      	pop	{r4, r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	50000400 	.word	0x50000400
 8005418:	80ffffff 	.word	0x80ffffff

0800541c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800541c:	b5b0      	push	{r4, r5, r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005422:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	230c      	movs	r3, #12
 800542c:	4013      	ands	r3, r2
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d014      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x40>
 8005432:	d900      	bls.n	8005436 <HAL_RCC_GetSysClockFreq+0x1a>
 8005434:	e07b      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x112>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d002      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x24>
 800543a:	2b08      	cmp	r3, #8
 800543c:	d00b      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x3a>
 800543e:	e076      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005440:	4b44      	ldr	r3, [pc, #272]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2210      	movs	r2, #16
 8005446:	4013      	ands	r3, r2
 8005448:	d002      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCC_GetSysClockFreq+0x13c>)
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800544e:	e07c      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <HAL_RCC_GetSysClockFreq+0x140>)
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005454:	e079      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005456:	4b42      	ldr	r3, [pc, #264]	; (8005560 <HAL_RCC_GetSysClockFreq+0x144>)
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800545a:	e076      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	0c9a      	lsrs	r2, r3, #18
 8005460:	230f      	movs	r3, #15
 8005462:	401a      	ands	r2, r3
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_GetSysClockFreq+0x148>)
 8005466:	5c9b      	ldrb	r3, [r3, r2]
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	0d9a      	lsrs	r2, r3, #22
 800546e:	2303      	movs	r3, #3
 8005470:	4013      	ands	r3, r2
 8005472:	3301      	adds	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	4013      	ands	r3, r2
 8005480:	d01a      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	4a35      	ldr	r2, [pc, #212]	; (8005560 <HAL_RCC_GetSysClockFreq+0x144>)
 800548c:	2300      	movs	r3, #0
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	69f9      	ldr	r1, [r7, #28]
 8005492:	f7fb f833 	bl	80004fc <__aeabi_lmul>
 8005496:	0002      	movs	r2, r0
 8005498:	000b      	movs	r3, r1
 800549a:	0010      	movs	r0, r2
 800549c:	0019      	movs	r1, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f7fb f807 	bl	80004bc <__aeabi_uldivmod>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	0013      	movs	r3, r2
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
 80054b6:	e037      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054b8:	4b26      	ldr	r3, [pc, #152]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	4013      	ands	r3, r2
 80054c0:	d01a      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	4a23      	ldr	r2, [pc, #140]	; (8005558 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	68b8      	ldr	r0, [r7, #8]
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	f7fb f813 	bl	80004fc <__aeabi_lmul>
 80054d6:	0002      	movs	r2, r0
 80054d8:	000b      	movs	r3, r1
 80054da:	0010      	movs	r0, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f7fa ffe7 	bl	80004bc <__aeabi_uldivmod>
 80054ee:	0002      	movs	r2, r0
 80054f0:	000b      	movs	r3, r1
 80054f2:	0013      	movs	r3, r2
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	e017      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	0018      	movs	r0, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	0019      	movs	r1, r3
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_RCC_GetSysClockFreq+0x140>)
 8005502:	2300      	movs	r3, #0
 8005504:	f7fa fffa 	bl	80004fc <__aeabi_lmul>
 8005508:	0002      	movs	r2, r0
 800550a:	000b      	movs	r3, r1
 800550c:	0010      	movs	r0, r2
 800550e:	0019      	movs	r1, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	001c      	movs	r4, r3
 8005514:	2300      	movs	r3, #0
 8005516:	001d      	movs	r5, r3
 8005518:	0022      	movs	r2, r4
 800551a:	002b      	movs	r3, r5
 800551c:	f7fa ffce 	bl	80004bc <__aeabi_uldivmod>
 8005520:	0002      	movs	r2, r0
 8005522:	000b      	movs	r3, r1
 8005524:	0013      	movs	r3, r2
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800552c:	e00d      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <HAL_RCC_GetSysClockFreq+0x138>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	0b5b      	lsrs	r3, r3, #13
 8005534:	2207      	movs	r2, #7
 8005536:	4013      	ands	r3, r2
 8005538:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	3301      	adds	r3, #1
 800553e:	2280      	movs	r2, #128	; 0x80
 8005540:	0212      	lsls	r2, r2, #8
 8005542:	409a      	lsls	r2, r3
 8005544:	0013      	movs	r3, r2
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005548:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b00e      	add	sp, #56	; 0x38
 8005552:	bdb0      	pop	{r4, r5, r7, pc}
 8005554:	40021000 	.word	0x40021000
 8005558:	003d0900 	.word	0x003d0900
 800555c:	00f42400 	.word	0x00f42400
 8005560:	007a1200 	.word	0x007a1200
 8005564:	0800a5ec 	.word	0x0800a5ec

08005568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b02      	ldr	r3, [pc, #8]	; (8005578 <HAL_RCC_GetHCLKFreq+0x10>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	20000014 	.word	0x20000014

0800557c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005580:	f7ff fff2 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005584:	0001      	movs	r1, r0
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	2207      	movs	r2, #7
 800558e:	4013      	ands	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005592:	5cd3      	ldrb	r3, [r2, r3]
 8005594:	40d9      	lsrs	r1, r3
 8005596:	000b      	movs	r3, r1
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	40021000 	.word	0x40021000
 80055a4:	0800a5e4 	.word	0x0800a5e4

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ac:	f7ff ffdc 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80055b0:	0001      	movs	r1, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	0adb      	lsrs	r3, r3, #11
 80055b8:	2207      	movs	r2, #7
 80055ba:	4013      	ands	r3, r2
 80055bc:	4a04      	ldr	r2, [pc, #16]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055be:	5cd3      	ldrb	r3, [r2, r3]
 80055c0:	40d9      	lsrs	r1, r3
 80055c2:	000b      	movs	r3, r1
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800a5e4 	.word	0x0800a5e4

080055d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80055dc:	2317      	movs	r3, #23
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2220      	movs	r2, #32
 80055ea:	4013      	ands	r3, r2
 80055ec:	d106      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4013      	ands	r3, r2
 80055f8:	d100      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80055fa:	e0d9      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fc:	4b9c      	ldr	r3, [pc, #624]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	055b      	lsls	r3, r3, #21
 8005604:	4013      	ands	r3, r2
 8005606:	d10a      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005608:	4b99      	ldr	r3, [pc, #612]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800560a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560c:	4b98      	ldr	r3, [pc, #608]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	0549      	lsls	r1, r1, #21
 8005612:	430a      	orrs	r2, r1
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005616:	2317      	movs	r3, #23
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b95      	ldr	r3, [pc, #596]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4013      	ands	r3, r2
 8005628:	d11a      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562a:	4b92      	ldr	r3, [pc, #584]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b91      	ldr	r3, [pc, #580]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005630:	2180      	movs	r1, #128	; 0x80
 8005632:	0049      	lsls	r1, r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005638:	f7fe f964 	bl	8003904 <HAL_GetTick>
 800563c:	0003      	movs	r3, r0
 800563e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005640:	e008      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005642:	f7fe f95f 	bl	8003904 <HAL_GetTick>
 8005646:	0002      	movs	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b64      	cmp	r3, #100	; 0x64
 800564e:	d901      	bls.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e108      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005654:	4b87      	ldr	r3, [pc, #540]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4013      	ands	r3, r2
 800565e:	d0f0      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005660:	4b83      	ldr	r3, [pc, #524]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	23c0      	movs	r3, #192	; 0xc0
 8005666:	039b      	lsls	r3, r3, #14
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	23c0      	movs	r3, #192	; 0xc0
 8005672:	039b      	lsls	r3, r3, #14
 8005674:	4013      	ands	r3, r2
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d107      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	23c0      	movs	r3, #192	; 0xc0
 8005682:	039b      	lsls	r3, r3, #14
 8005684:	4013      	ands	r3, r2
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	429a      	cmp	r2, r3
 800568a:	d013      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	23c0      	movs	r3, #192	; 0xc0
 8005692:	029b      	lsls	r3, r3, #10
 8005694:	401a      	ands	r2, r3
 8005696:	23c0      	movs	r3, #192	; 0xc0
 8005698:	029b      	lsls	r3, r3, #10
 800569a:	429a      	cmp	r2, r3
 800569c:	d10a      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800569e:	4b74      	ldr	r3, [pc, #464]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	401a      	ands	r2, r3
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d101      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0d8      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80056b4:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b8:	23c0      	movs	r3, #192	; 0xc0
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d049      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	23c0      	movs	r3, #192	; 0xc0
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	4013      	ands	r3, r2
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d004      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2220      	movs	r2, #32
 80056dc:	4013      	ands	r3, r2
 80056de:	d10d      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	23c0      	movs	r3, #192	; 0xc0
 80056e6:	029b      	lsls	r3, r3, #10
 80056e8:	4013      	ands	r3, r2
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d034      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	4013      	ands	r3, r2
 80056fa:	d02e      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80056fc:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	4a5d      	ldr	r2, [pc, #372]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005702:	4013      	ands	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005706:	4b5a      	ldr	r3, [pc, #360]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800570a:	4b59      	ldr	r3, [pc, #356]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	0309      	lsls	r1, r1, #12
 8005710:	430a      	orrs	r2, r1
 8005712:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005714:	4b56      	ldr	r3, [pc, #344]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005718:	4b55      	ldr	r3, [pc, #340]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800571a:	4958      	ldr	r1, [pc, #352]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800571c:	400a      	ands	r2, r1
 800571e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005720:	4b53      	ldr	r3, [pc, #332]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4013      	ands	r3, r2
 800572e:	d014      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005730:	f7fe f8e8 	bl	8003904 <HAL_GetTick>
 8005734:	0003      	movs	r3, r0
 8005736:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005738:	e009      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573a:	f7fe f8e3 	bl	8003904 <HAL_GetTick>
 800573e:	0002      	movs	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	4a4e      	ldr	r2, [pc, #312]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e08b      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800574e:	4b48      	ldr	r3, [pc, #288]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005752:	2380      	movs	r3, #128	; 0x80
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4013      	ands	r3, r2
 8005758:	d0ef      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	23c0      	movs	r3, #192	; 0xc0
 8005760:	029b      	lsls	r3, r3, #10
 8005762:	401a      	ands	r2, r3
 8005764:	23c0      	movs	r3, #192	; 0xc0
 8005766:	029b      	lsls	r3, r3, #10
 8005768:	429a      	cmp	r2, r3
 800576a:	d10c      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800576c:	4b40      	ldr	r3, [pc, #256]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a44      	ldr	r2, [pc, #272]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005772:	4013      	ands	r3, r2
 8005774:	0019      	movs	r1, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	23c0      	movs	r3, #192	; 0xc0
 800577c:	039b      	lsls	r3, r3, #14
 800577e:	401a      	ands	r2, r3
 8005780:	4b3b      	ldr	r3, [pc, #236]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005788:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	23c0      	movs	r3, #192	; 0xc0
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	401a      	ands	r2, r3
 8005794:	4b36      	ldr	r3, [pc, #216]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005796:	430a      	orrs	r2, r1
 8005798:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800579a:	2317      	movs	r3, #23
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a4:	4b32      	ldr	r3, [pc, #200]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	4b31      	ldr	r3, [pc, #196]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057aa:	4937      	ldr	r1, [pc, #220]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80057ac:	400a      	ands	r2, r1
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2201      	movs	r2, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ba:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	2203      	movs	r2, #3
 80057c0:	4393      	bics	r3, r2
 80057c2:	0019      	movs	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	4b29      	ldr	r3, [pc, #164]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057ca:	430a      	orrs	r2, r1
 80057cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2202      	movs	r2, #2
 80057d4:	4013      	ands	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	220c      	movs	r2, #12
 80057de:	4393      	bics	r3, r2
 80057e0:	0019      	movs	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	4b22      	ldr	r3, [pc, #136]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057e8:	430a      	orrs	r2, r1
 80057ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2204      	movs	r2, #4
 80057f2:	4013      	ands	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057f6:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	4a24      	ldr	r2, [pc, #144]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	0019      	movs	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005806:	430a      	orrs	r2, r1
 8005808:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2208      	movs	r2, #8
 8005810:	4013      	ands	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800581a:	4013      	ands	r3, r2
 800581c:	0019      	movs	r1, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005824:	430a      	orrs	r2, r1
 8005826:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	4013      	ands	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	4a17      	ldr	r2, [pc, #92]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005838:	4013      	ands	r3, r2
 800583a:	0019      	movs	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005842:	430a      	orrs	r2, r1
 8005844:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	4013      	ands	r3, r2
 800584e:	d009      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	4a10      	ldr	r2, [pc, #64]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005856:	4013      	ands	r3, r2
 8005858:	0019      	movs	r1, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	4b04      	ldr	r3, [pc, #16]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005860:	430a      	orrs	r2, r1
 8005862:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	0018      	movs	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	b006      	add	sp, #24
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	40021000 	.word	0x40021000
 8005874:	40007000 	.word	0x40007000
 8005878:	fffcffff 	.word	0xfffcffff
 800587c:	fff7ffff 	.word	0xfff7ffff
 8005880:	00001388 	.word	0x00001388
 8005884:	ffcfffff 	.word	0xffcfffff
 8005888:	efffffff 	.word	0xefffffff
 800588c:	fffff3ff 	.word	0xfffff3ff
 8005890:	ffffcfff 	.word	0xffffcfff
 8005894:	fbffffff 	.word	0xfbffffff
 8005898:	fff3ffff 	.word	0xfff3ffff

0800589c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e032      	b.n	8005914 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2239      	movs	r2, #57	; 0x39
 80058b2:	5c9b      	ldrb	r3, [r3, r2]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2238      	movs	r2, #56	; 0x38
 80058be:	2100      	movs	r1, #0
 80058c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7fd fe6d 	bl	80035a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2239      	movs	r2, #57	; 0x39
 80058ce:	2102      	movs	r1, #2
 80058d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	0019      	movs	r1, r3
 80058dc:	0010      	movs	r0, r2
 80058de:	f000 fe53 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	223e      	movs	r2, #62	; 0x3e
 80058e6:	2101      	movs	r1, #1
 80058e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	223a      	movs	r2, #58	; 0x3a
 80058ee:	2101      	movs	r1, #1
 80058f0:	5499      	strb	r1, [r3, r2]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	223b      	movs	r2, #59	; 0x3b
 80058f6:	2101      	movs	r1, #1
 80058f8:	5499      	strb	r1, [r3, r2]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	223c      	movs	r2, #60	; 0x3c
 80058fe:	2101      	movs	r1, #1
 8005900:	5499      	strb	r1, [r3, r2]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	223d      	movs	r2, #61	; 0x3d
 8005906:	2101      	movs	r1, #1
 8005908:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2239      	movs	r2, #57	; 0x39
 800590e:	2101      	movs	r1, #1
 8005910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b002      	add	sp, #8
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2239      	movs	r2, #57	; 0x39
 8005928:	5c9b      	ldrb	r3, [r3, r2]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d001      	beq.n	8005934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e02e      	b.n	8005992 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2239      	movs	r2, #57	; 0x39
 8005938:	2102      	movs	r1, #2
 800593a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	05db      	lsls	r3, r3, #23
 8005944:	429a      	cmp	r2, r3
 8005946:	d009      	beq.n	800595c <HAL_TIM_Base_Start+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <HAL_TIM_Base_Start+0x80>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_TIM_Base_Start+0x40>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <HAL_TIM_Base_Start+0x84>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d111      	bne.n	8005980 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2207      	movs	r2, #7
 8005964:	4013      	ands	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b06      	cmp	r3, #6
 800596c:	d010      	beq.n	8005990 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	430a      	orrs	r2, r1
 800597c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	e007      	b.n	8005990 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2101      	movs	r1, #1
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b004      	add	sp, #16
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	40010800 	.word	0x40010800
 80059a0:	40011400 	.word	0x40011400

080059a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2239      	movs	r2, #57	; 0x39
 80059b0:	5c9b      	ldrb	r3, [r3, r2]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d001      	beq.n	80059bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e036      	b.n	8005a2a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2239      	movs	r2, #57	; 0x39
 80059c0:	2102      	movs	r1, #2
 80059c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2101      	movs	r1, #1
 80059d0:	430a      	orrs	r2, r1
 80059d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	05db      	lsls	r3, r3, #23
 80059dc:	429a      	cmp	r2, r3
 80059de:	d009      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x50>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_TIM_Base_Start_IT+0x90>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x50>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <HAL_TIM_Base_Start_IT+0x94>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d111      	bne.n	8005a18 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2207      	movs	r2, #7
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d010      	beq.n	8005a28 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2101      	movs	r1, #1
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	e007      	b.n	8005a28 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2101      	movs	r1, #1
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b004      	add	sp, #16
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	40010800 	.word	0x40010800
 8005a38:	40011400 	.word	0x40011400

08005a3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e032      	b.n	8005ab4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2239      	movs	r2, #57	; 0x39
 8005a52:	5c9b      	ldrb	r3, [r3, r2]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d107      	bne.n	8005a6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2238      	movs	r2, #56	; 0x38
 8005a5e:	2100      	movs	r1, #0
 8005a60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7fd fd87 	bl	8003578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2239      	movs	r2, #57	; 0x39
 8005a6e:	2102      	movs	r1, #2
 8005a70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	0010      	movs	r0, r2
 8005a7e:	f000 fd83 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	223e      	movs	r2, #62	; 0x3e
 8005a86:	2101      	movs	r1, #1
 8005a88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	223a      	movs	r2, #58	; 0x3a
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	223b      	movs	r2, #59	; 0x3b
 8005a96:	2101      	movs	r1, #1
 8005a98:	5499      	strb	r1, [r3, r2]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	223c      	movs	r2, #60	; 0x3c
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5499      	strb	r1, [r3, r2]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	223d      	movs	r2, #61	; 0x3d
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2239      	movs	r2, #57	; 0x39
 8005aae:	2101      	movs	r1, #1
 8005ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d108      	bne.n	8005ade <HAL_TIM_PWM_Start+0x22>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	223a      	movs	r2, #58	; 0x3a
 8005ad0:	5c9b      	ldrb	r3, [r3, r2]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	4193      	sbcs	r3, r2
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	e01f      	b.n	8005b1e <HAL_TIM_PWM_Start+0x62>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d108      	bne.n	8005af6 <HAL_TIM_PWM_Start+0x3a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	223b      	movs	r2, #59	; 0x3b
 8005ae8:	5c9b      	ldrb	r3, [r3, r2]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	1e5a      	subs	r2, r3, #1
 8005af0:	4193      	sbcs	r3, r2
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e013      	b.n	8005b1e <HAL_TIM_PWM_Start+0x62>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d108      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x52>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	223c      	movs	r2, #60	; 0x3c
 8005b00:	5c9b      	ldrb	r3, [r3, r2]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	1e5a      	subs	r2, r3, #1
 8005b08:	4193      	sbcs	r3, r2
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	e007      	b.n	8005b1e <HAL_TIM_PWM_Start+0x62>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	223d      	movs	r2, #61	; 0x3d
 8005b12:	5c9b      	ldrb	r3, [r3, r2]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	1e5a      	subs	r2, r3, #1
 8005b1a:	4193      	sbcs	r3, r2
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e04d      	b.n	8005bc2 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x7a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	223a      	movs	r2, #58	; 0x3a
 8005b30:	2102      	movs	r1, #2
 8005b32:	5499      	strb	r1, [r3, r2]
 8005b34:	e013      	b.n	8005b5e <HAL_TIM_PWM_Start+0xa2>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x8a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	223b      	movs	r2, #59	; 0x3b
 8005b40:	2102      	movs	r1, #2
 8005b42:	5499      	strb	r1, [r3, r2]
 8005b44:	e00b      	b.n	8005b5e <HAL_TIM_PWM_Start+0xa2>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIM_PWM_Start+0x9a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	223c      	movs	r2, #60	; 0x3c
 8005b50:	2102      	movs	r1, #2
 8005b52:	5499      	strb	r1, [r3, r2]
 8005b54:	e003      	b.n	8005b5e <HAL_TIM_PWM_Start+0xa2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	223d      	movs	r2, #61	; 0x3d
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	0018      	movs	r0, r3
 8005b68:	f001 f8b0 	bl	8006ccc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	05db      	lsls	r3, r3, #23
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d009      	beq.n	8005b8c <HAL_TIM_PWM_Start+0xd0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <HAL_TIM_PWM_Start+0x110>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_TIM_PWM_Start+0xd0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <HAL_TIM_PWM_Start+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d111      	bne.n	8005bb0 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2207      	movs	r2, #7
 8005b94:	4013      	ands	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d010      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2101      	movs	r1, #1
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bae:	e007      	b.n	8005bc0 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2101      	movs	r1, #1
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b004      	add	sp, #16
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	40010800 	.word	0x40010800
 8005bd0:	40011400 	.word	0x40011400

08005bd4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e032      	b.n	8005c4c <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2239      	movs	r2, #57	; 0x39
 8005bea:	5c9b      	ldrb	r3, [r3, r2]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2238      	movs	r2, #56	; 0x38
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 f829 	bl	8005c54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2239      	movs	r2, #57	; 0x39
 8005c06:	2102      	movs	r1, #2
 8005c08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3304      	adds	r3, #4
 8005c12:	0019      	movs	r1, r3
 8005c14:	0010      	movs	r0, r2
 8005c16:	f000 fcb7 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	223e      	movs	r2, #62	; 0x3e
 8005c1e:	2101      	movs	r1, #1
 8005c20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	223a      	movs	r2, #58	; 0x3a
 8005c26:	2101      	movs	r1, #1
 8005c28:	5499      	strb	r1, [r3, r2]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	223b      	movs	r2, #59	; 0x3b
 8005c2e:	2101      	movs	r1, #1
 8005c30:	5499      	strb	r1, [r3, r2]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	223c      	movs	r2, #60	; 0x3c
 8005c36:	2101      	movs	r1, #1
 8005c38:	5499      	strb	r1, [r3, r2]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	223d      	movs	r2, #61	; 0x3d
 8005c3e:	2101      	movs	r1, #1
 8005c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2239      	movs	r2, #57	; 0x39
 8005c46:	2101      	movs	r1, #1
 8005c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b002      	add	sp, #8
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	230f      	movs	r3, #15
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_IC_Start_IT+0x22>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	223a      	movs	r2, #58	; 0x3a
 8005c80:	5c9b      	ldrb	r3, [r3, r2]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	e013      	b.n	8005cae <HAL_TIM_IC_Start_IT+0x4a>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_IC_Start_IT+0x32>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	223b      	movs	r2, #59	; 0x3b
 8005c90:	5c9b      	ldrb	r3, [r3, r2]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	e00b      	b.n	8005cae <HAL_TIM_IC_Start_IT+0x4a>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_IC_Start_IT+0x42>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	223c      	movs	r2, #60	; 0x3c
 8005ca0:	5c9b      	ldrb	r3, [r3, r2]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e003      	b.n	8005cae <HAL_TIM_IC_Start_IT+0x4a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	223d      	movs	r2, #61	; 0x3d
 8005caa:	5c9b      	ldrb	r3, [r3, r2]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	210e      	movs	r1, #14
 8005cb0:	187a      	adds	r2, r7, r1
 8005cb2:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e090      	b.n	8005de2 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <HAL_TIM_IC_Start_IT+0x6c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	223a      	movs	r2, #58	; 0x3a
 8005cca:	2102      	movs	r1, #2
 8005ccc:	5499      	strb	r1, [r3, r2]
 8005cce:	e013      	b.n	8005cf8 <HAL_TIM_IC_Start_IT+0x94>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d104      	bne.n	8005ce0 <HAL_TIM_IC_Start_IT+0x7c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	223b      	movs	r2, #59	; 0x3b
 8005cda:	2102      	movs	r1, #2
 8005cdc:	5499      	strb	r1, [r3, r2]
 8005cde:	e00b      	b.n	8005cf8 <HAL_TIM_IC_Start_IT+0x94>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d104      	bne.n	8005cf0 <HAL_TIM_IC_Start_IT+0x8c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	223c      	movs	r2, #60	; 0x3c
 8005cea:	2102      	movs	r1, #2
 8005cec:	5499      	strb	r1, [r3, r2]
 8005cee:	e003      	b.n	8005cf8 <HAL_TIM_IC_Start_IT+0x94>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	223d      	movs	r2, #61	; 0x3d
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b0c      	cmp	r3, #12
 8005cfc:	d02a      	beq.n	8005d54 <HAL_TIM_IC_Start_IT+0xf0>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d830      	bhi.n	8005d66 <HAL_TIM_IC_Start_IT+0x102>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d01b      	beq.n	8005d42 <HAL_TIM_IC_Start_IT+0xde>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d82a      	bhi.n	8005d66 <HAL_TIM_IC_Start_IT+0x102>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IC_Start_IT+0xba>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d009      	beq.n	8005d30 <HAL_TIM_IC_Start_IT+0xcc>
 8005d1c:	e023      	b.n	8005d66 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2102      	movs	r1, #2
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	60da      	str	r2, [r3, #12]
      break;
 8005d2e:	e01f      	b.n	8005d70 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2104      	movs	r1, #4
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]
      break;
 8005d40:	e016      	b.n	8005d70 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2108      	movs	r1, #8
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	60da      	str	r2, [r3, #12]
      break;
 8005d52:	e00d      	b.n	8005d70 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2110      	movs	r1, #16
 8005d60:	430a      	orrs	r2, r1
 8005d62:	60da      	str	r2, [r3, #12]
      break;
 8005d64:	e004      	b.n	8005d70 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8005d66:	230f      	movs	r3, #15
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
      break;
 8005d6e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005d70:	230f      	movs	r3, #15
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d130      	bne.n	8005ddc <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	2201      	movs	r2, #1
 8005d82:	0018      	movs	r0, r3
 8005d84:	f000 ffa2 	bl	8006ccc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	05db      	lsls	r3, r3, #23
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d009      	beq.n	8005da8 <HAL_TIM_IC_Start_IT+0x144>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a14      	ldr	r2, [pc, #80]	; (8005dec <HAL_TIM_IC_Start_IT+0x188>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_IC_Start_IT+0x144>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <HAL_TIM_IC_Start_IT+0x18c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d111      	bne.n	8005dcc <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2207      	movs	r2, #7
 8005db0:	4013      	ands	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b06      	cmp	r3, #6
 8005db8:	d010      	beq.n	8005ddc <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dca:	e007      	b.n	8005ddc <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ddc:	230f      	movs	r3, #15
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	781b      	ldrb	r3, [r3, #0]
}
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b004      	add	sp, #16
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	40010800 	.word	0x40010800
 8005df0:	40011400 	.word	0x40011400

08005df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2202      	movs	r2, #2
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d124      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2202      	movs	r2, #2
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d11d      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	4252      	negs	r2, r2
 8005e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	4013      	ands	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7fc ff8c 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e007      	b.n	8005e4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 fb7f 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 fb83 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d125      	bne.n	8005eae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d11e      	bne.n	8005eae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2205      	movs	r2, #5
 8005e76:	4252      	negs	r2, r2
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	23c0      	movs	r3, #192	; 0xc0
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7fc ff5f 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8005e96:	e007      	b.n	8005ea8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f000 fb52 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 fb56 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d124      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d11d      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2209      	movs	r2, #9
 8005ed0:	4252      	negs	r2, r2
 8005ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7fc ff33 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8005eee:	e007      	b.n	8005f00 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 fb26 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 fb2a 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d125      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d11e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2211      	movs	r2, #17
 8005f28:	4252      	negs	r2, r2
 8005f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	23c0      	movs	r3, #192	; 0xc0
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fc ff06 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e007      	b.n	8005f5a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 faf9 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 fafd 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2201      	movs	r2, #1
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d10f      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2202      	movs	r2, #2
 8005f82:	4252      	negs	r2, r2
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 fad3 	bl	8006534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2240      	movs	r2, #64	; 0x40
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d10f      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2240      	movs	r2, #64	; 0x40
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d108      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2241      	movs	r2, #65	; 0x41
 8005fb0:	4252      	negs	r2, r2
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f000 fad4 	bl	8006564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd0:	2317      	movs	r3, #23
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2238      	movs	r2, #56	; 0x38
 8005fdc:	5c9b      	ldrb	r3, [r3, r2]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_IC_ConfigChannel+0x22>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e08c      	b.n	8006100 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2238      	movs	r2, #56	; 0x38
 8005fea:	2101      	movs	r1, #1
 8005fec:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d11b      	bne.n	800602c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6819      	ldr	r1, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f000 fcaa 	bl	800695c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	210c      	movs	r1, #12
 8006014:	438a      	bics	r2, r1
 8006016:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6999      	ldr	r1, [r3, #24]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	619a      	str	r2, [r3, #24]
 800602a:	e062      	b.n	80060f2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d11c      	bne.n	800606c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f000 fd0f 	bl	8006a64 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	492d      	ldr	r1, [pc, #180]	; (8006108 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006052:	400a      	ands	r2, r1
 8006054:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6999      	ldr	r1, [r3, #24]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	021a      	lsls	r2, r3, #8
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	619a      	str	r2, [r3, #24]
 800606a:	e042      	b.n	80060f2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11b      	bne.n	80060aa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f000 fd63 	bl	8006b4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	210c      	movs	r1, #12
 8006092:	438a      	bics	r2, r1
 8006094:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69d9      	ldr	r1, [r3, #28]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	61da      	str	r2, [r3, #28]
 80060a8:	e023      	b.n	80060f2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b0c      	cmp	r3, #12
 80060ae:	d11c      	bne.n	80060ea <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6819      	ldr	r1, [r3, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f000 fd84 	bl	8006bcc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69da      	ldr	r2, [r3, #28]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	490e      	ldr	r1, [pc, #56]	; (8006108 <HAL_TIM_IC_ConfigChannel+0x144>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69d9      	ldr	r1, [r3, #28]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	021a      	lsls	r2, r3, #8
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	61da      	str	r2, [r3, #28]
 80060e8:	e003      	b.n	80060f2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80060ea:	2317      	movs	r3, #23
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2238      	movs	r2, #56	; 0x38
 80060f6:	2100      	movs	r1, #0
 80060f8:	5499      	strb	r1, [r3, r2]

  return status;
 80060fa:	2317      	movs	r3, #23
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	781b      	ldrb	r3, [r3, #0]
}
 8006100:	0018      	movs	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	b006      	add	sp, #24
 8006106:	bd80      	pop	{r7, pc}
 8006108:	fffff3ff 	.word	0xfffff3ff

0800610c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2317      	movs	r3, #23
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2238      	movs	r2, #56	; 0x38
 8006124:	5c9b      	ldrb	r3, [r3, r2]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_TIM_PWM_ConfigChannel+0x22>
 800612a:	2302      	movs	r3, #2
 800612c:	e0ad      	b.n	800628a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2238      	movs	r2, #56	; 0x38
 8006132:	2101      	movs	r1, #1
 8006134:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d100      	bne.n	800613e <HAL_TIM_PWM_ConfigChannel+0x32>
 800613c:	e076      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x120>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d900      	bls.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006144:	e095      	b.n	8006272 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d04e      	beq.n	80061ea <HAL_TIM_PWM_ConfigChannel+0xde>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b08      	cmp	r3, #8
 8006150:	d900      	bls.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006152:	e08e      	b.n	8006272 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_PWM_ConfigChannel+0x56>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d021      	beq.n	80061a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006160:	e087      	b.n	8006272 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f000 fa60 	bl	8006630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2108      	movs	r1, #8
 800617c:	430a      	orrs	r2, r1
 800617e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2104      	movs	r1, #4
 800618c:	438a      	bics	r2, r1
 800618e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6999      	ldr	r1, [r3, #24]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	619a      	str	r2, [r3, #24]
      break;
 80061a2:	e06b      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	0011      	movs	r1, r2
 80061ac:	0018      	movs	r0, r3
 80061ae:	f000 fa7b 	bl	80066a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2180      	movs	r1, #128	; 0x80
 80061be:	0109      	lsls	r1, r1, #4
 80061c0:	430a      	orrs	r2, r1
 80061c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4931      	ldr	r1, [pc, #196]	; (8006294 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80061d0:	400a      	ands	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6999      	ldr	r1, [r3, #24]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	619a      	str	r2, [r3, #24]
      break;
 80061e8:	e048      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 fa9a 	bl	800672c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2108      	movs	r1, #8
 8006204:	430a      	orrs	r2, r1
 8006206:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2104      	movs	r1, #4
 8006214:	438a      	bics	r2, r1
 8006216:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69d9      	ldr	r1, [r3, #28]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	61da      	str	r2, [r3, #28]
      break;
 800622a:	e027      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	0011      	movs	r1, r2
 8006234:	0018      	movs	r0, r3
 8006236:	f000 fab9 	bl	80067ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2180      	movs	r1, #128	; 0x80
 8006246:	0109      	lsls	r1, r1, #4
 8006248:	430a      	orrs	r2, r1
 800624a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	490f      	ldr	r1, [pc, #60]	; (8006294 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006258:	400a      	ands	r2, r1
 800625a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69d9      	ldr	r1, [r3, #28]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	61da      	str	r2, [r3, #28]
      break;
 8006270:	e004      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006272:	2317      	movs	r3, #23
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
      break;
 800627a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2238      	movs	r2, #56	; 0x38
 8006280:	2100      	movs	r1, #0
 8006282:	5499      	strb	r1, [r3, r2]

  return status;
 8006284:	2317      	movs	r3, #23
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	781b      	ldrb	r3, [r3, #0]
}
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b006      	add	sp, #24
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	fffffbff 	.word	0xfffffbff

08006298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	230f      	movs	r3, #15
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2238      	movs	r2, #56	; 0x38
 80062ae:	5c9b      	ldrb	r3, [r3, r2]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_ConfigClockSource+0x20>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0bc      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x19a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2238      	movs	r2, #56	; 0x38
 80062bc:	2101      	movs	r1, #1
 80062be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2239      	movs	r2, #57	; 0x39
 80062c4:	2102      	movs	r1, #2
 80062c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2277      	movs	r2, #119	; 0x77
 80062d4:	4393      	bics	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a58      	ldr	r2, [pc, #352]	; (800643c <HAL_TIM_ConfigClockSource+0x1a4>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2280      	movs	r2, #128	; 0x80
 80062ee:	0192      	lsls	r2, r2, #6
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xde>
 80062f4:	2280      	movs	r2, #128	; 0x80
 80062f6:	0192      	lsls	r2, r2, #6
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d900      	bls.n	80062fe <HAL_TIM_ConfigClockSource+0x66>
 80062fc:	e088      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	0152      	lsls	r2, r2, #5
 8006302:	4293      	cmp	r3, r2
 8006304:	d100      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x70>
 8006306:	e088      	b.n	800641a <HAL_TIM_ConfigClockSource+0x182>
 8006308:	2280      	movs	r2, #128	; 0x80
 800630a:	0152      	lsls	r2, r2, #5
 800630c:	4293      	cmp	r3, r2
 800630e:	d900      	bls.n	8006312 <HAL_TIM_ConfigClockSource+0x7a>
 8006310:	e07e      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 8006312:	2b70      	cmp	r3, #112	; 0x70
 8006314:	d018      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0xb0>
 8006316:	d900      	bls.n	800631a <HAL_TIM_ConfigClockSource+0x82>
 8006318:	e07a      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 800631a:	2b60      	cmp	r3, #96	; 0x60
 800631c:	d04f      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x126>
 800631e:	d900      	bls.n	8006322 <HAL_TIM_ConfigClockSource+0x8a>
 8006320:	e076      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 8006322:	2b50      	cmp	r3, #80	; 0x50
 8006324:	d03b      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x106>
 8006326:	d900      	bls.n	800632a <HAL_TIM_ConfigClockSource+0x92>
 8006328:	e072      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	d057      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x146>
 800632e:	d900      	bls.n	8006332 <HAL_TIM_ConfigClockSource+0x9a>
 8006330:	e06e      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 8006332:	2b30      	cmp	r3, #48	; 0x30
 8006334:	d063      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x166>
 8006336:	d86b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d060      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x166>
 800633c:	d868      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d05d      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x166>
 8006342:	2b10      	cmp	r3, #16
 8006344:	d05b      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x166>
 8006346:	e063      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f000 fc98 	bl	8006c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2277      	movs	r2, #119	; 0x77
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
      break;
 8006374:	e052      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6899      	ldr	r1, [r3, #8]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f000 fc81 	bl	8006c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	01c9      	lsls	r1, r1, #7
 8006398:	430a      	orrs	r2, r1
 800639a:	609a      	str	r2, [r3, #8]
      break;
 800639c:	e03e      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	001a      	movs	r2, r3
 80063ac:	f000 fb2c 	bl	8006a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2150      	movs	r1, #80	; 0x50
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 fc4e 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 80063bc:	e02e      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	001a      	movs	r2, r3
 80063cc:	f000 fb8c 	bl	8006ae8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2160      	movs	r1, #96	; 0x60
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 fc3e 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 80063dc:	e01e      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	001a      	movs	r2, r3
 80063ec:	f000 fb0c 	bl	8006a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	0018      	movs	r0, r3
 80063f8:	f000 fc2e 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 80063fc:	e00e      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	0019      	movs	r1, r3
 8006408:	0010      	movs	r0, r2
 800640a:	f000 fc25 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 800640e:	e005      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006410:	230f      	movs	r3, #15
 8006412:	18fb      	adds	r3, r7, r3
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
      break;
 8006418:	e000      	b.n	800641c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800641a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2239      	movs	r2, #57	; 0x39
 8006420:	2101      	movs	r1, #1
 8006422:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2238      	movs	r2, #56	; 0x38
 8006428:	2100      	movs	r1, #0
 800642a:	5499      	strb	r1, [r3, r2]

  return status;
 800642c:	230f      	movs	r3, #15
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	781b      	ldrb	r3, [r3, #0]
}
 8006432:	0018      	movs	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	b004      	add	sp, #16
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	ffff00ff 	.word	0xffff00ff

08006440 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2238      	movs	r2, #56	; 0x38
 800644e:	5c9b      	ldrb	r3, [r3, r2]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006454:	2302      	movs	r3, #2
 8006456:	e032      	b.n	80064be <HAL_TIM_SlaveConfigSynchro+0x7e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2238      	movs	r2, #56	; 0x38
 800645c:	2101      	movs	r1, #1
 800645e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2239      	movs	r2, #57	; 0x39
 8006464:	2102      	movs	r1, #2
 8006466:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f000 f9e2 	bl	8006838 <TIM_SlaveTimer_SetConfig>
 8006474:	1e03      	subs	r3, r0, #0
 8006476:	d009      	beq.n	800648c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2239      	movs	r2, #57	; 0x39
 800647c:	2101      	movs	r1, #1
 800647e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2238      	movs	r2, #56	; 0x38
 8006484:	2100      	movs	r1, #0
 8006486:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e018      	b.n	80064be <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2140      	movs	r1, #64	; 0x40
 8006498:	438a      	bics	r2, r1
 800649a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4908      	ldr	r1, [pc, #32]	; (80064c8 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80064a8:	400a      	ands	r2, r1
 80064aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2239      	movs	r2, #57	; 0x39
 80064b0:	2101      	movs	r1, #1
 80064b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2238      	movs	r2, #56	; 0x38
 80064b8:	2100      	movs	r1, #0
 80064ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	0018      	movs	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b002      	add	sp, #8
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	ffffbfff 	.word	0xffffbfff

080064cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b0c      	cmp	r3, #12
 80064de:	d01e      	beq.n	800651e <HAL_TIM_ReadCapturedValue+0x52>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d820      	bhi.n	8006528 <HAL_TIM_ReadCapturedValue+0x5c>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d013      	beq.n	8006514 <HAL_TIM_ReadCapturedValue+0x48>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d81a      	bhi.n	8006528 <HAL_TIM_ReadCapturedValue+0x5c>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_TIM_ReadCapturedValue+0x34>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d005      	beq.n	800650a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80064fe:	e013      	b.n	8006528 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006506:	60fb      	str	r3, [r7, #12]
      break;
 8006508:	e00f      	b.n	800652a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	60fb      	str	r3, [r7, #12]
      break;
 8006512:	e00a      	b.n	800652a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	60fb      	str	r3, [r7, #12]
      break;
 800651c:	e005      	b.n	800652a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	60fb      	str	r3, [r7, #12]
      break;
 8006526:	e000      	b.n	800652a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8006528:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800652a:	68fb      	ldr	r3, [r7, #12]
}
 800652c:	0018      	movs	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	b004      	add	sp, #16
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46bd      	mov	sp, r7
 8006540:	b002      	add	sp, #8
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800654c:	46c0      	nop			; (mov r8, r8)
 800654e:	46bd      	mov	sp, r7
 8006550:	b002      	add	sp, #8
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b002      	add	sp, #8
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	46bd      	mov	sp, r7
 8006570:	b002      	add	sp, #8
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7e1b      	ldrb	r3, [r3, #24]
}
 8006580:	0018      	movs	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}

08006588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	2380      	movs	r3, #128	; 0x80
 800659c:	05db      	lsls	r3, r3, #23
 800659e:	429a      	cmp	r2, r3
 80065a0:	d007      	beq.n	80065b2 <TIM_Base_SetConfig+0x2a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <TIM_Base_SetConfig+0x9c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d003      	beq.n	80065b2 <TIM_Base_SetConfig+0x2a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <TIM_Base_SetConfig+0xa0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d108      	bne.n	80065c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2270      	movs	r2, #112	; 0x70
 80065b6:	4393      	bics	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	05db      	lsls	r3, r3, #23
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d007      	beq.n	80065de <TIM_Base_SetConfig+0x56>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <TIM_Base_SetConfig+0x9c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_Base_SetConfig+0x56>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <TIM_Base_SetConfig+0xa0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d108      	bne.n	80065f0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a12      	ldr	r2, [pc, #72]	; (800662c <TIM_Base_SetConfig+0xa4>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	4393      	bics	r3, r2
 80065f6:	001a      	movs	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	615a      	str	r2, [r3, #20]
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	46bd      	mov	sp, r7
 8006620:	b004      	add	sp, #16
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40010800 	.word	0x40010800
 8006628:	40011400 	.word	0x40011400
 800662c:	fffffcff 	.word	0xfffffcff

08006630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	2201      	movs	r2, #1
 8006640:	4393      	bics	r3, r2
 8006642:	001a      	movs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2270      	movs	r2, #112	; 0x70
 800665e:	4393      	bics	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2203      	movs	r2, #3
 8006666:	4393      	bics	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2202      	movs	r2, #2
 8006678:	4393      	bics	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	621a      	str	r2, [r3, #32]
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b006      	add	sp, #24
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	2210      	movs	r2, #16
 80066b8:	4393      	bics	r3, r2
 80066ba:	001a      	movs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a13      	ldr	r2, [pc, #76]	; (8006724 <TIM_OC2_SetConfig+0x7c>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4a12      	ldr	r2, [pc, #72]	; (8006728 <TIM_OC2_SetConfig+0x80>)
 80066de:	4013      	ands	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2220      	movs	r2, #32
 80066f2:	4393      	bics	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b006      	add	sp, #24
 8006722:	bd80      	pop	{r7, pc}
 8006724:	ffff8fff 	.word	0xffff8fff
 8006728:	fffffcff 	.word	0xfffffcff

0800672c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	4a1a      	ldr	r2, [pc, #104]	; (80067a4 <TIM_OC3_SetConfig+0x78>)
 800673c:	401a      	ands	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2270      	movs	r2, #112	; 0x70
 8006758:	4393      	bics	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2203      	movs	r2, #3
 8006760:	4393      	bics	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <TIM_OC3_SetConfig+0x7c>)
 8006772:	4013      	ands	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	46c0      	nop			; (mov r8, r8)
 800679e:	46bd      	mov	sp, r7
 80067a0:	b006      	add	sp, #24
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	fffffeff 	.word	0xfffffeff
 80067a8:	fffffdff 	.word	0xfffffdff

080067ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <TIM_OC4_SetConfig+0x7c>)
 80067bc:	401a      	ands	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a15      	ldr	r2, [pc, #84]	; (800682c <TIM_OC4_SetConfig+0x80>)
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a14      	ldr	r2, [pc, #80]	; (8006830 <TIM_OC4_SetConfig+0x84>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_OC4_SetConfig+0x88>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	031b      	lsls	r3, r3, #12
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b006      	add	sp, #24
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	ffffefff 	.word	0xffffefff
 800682c:	ffff8fff 	.word	0xffff8fff
 8006830:	fffffcff 	.word	0xfffffcff
 8006834:	ffffdfff 	.word	0xffffdfff

08006838 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006842:	2317      	movs	r3, #23
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	2200      	movs	r2, #0
 8006848:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2270      	movs	r2, #112	; 0x70
 8006856:	4393      	bics	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2207      	movs	r2, #7
 8006868:	4393      	bics	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b70      	cmp	r3, #112	; 0x70
 8006884:	d015      	beq.n	80068b2 <TIM_SlaveTimer_SetConfig+0x7a>
 8006886:	d900      	bls.n	800688a <TIM_SlaveTimer_SetConfig+0x52>
 8006888:	e05b      	b.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
 800688a:	2b60      	cmp	r3, #96	; 0x60
 800688c:	d04f      	beq.n	800692e <TIM_SlaveTimer_SetConfig+0xf6>
 800688e:	d858      	bhi.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
 8006890:	2b50      	cmp	r3, #80	; 0x50
 8006892:	d042      	beq.n	800691a <TIM_SlaveTimer_SetConfig+0xe2>
 8006894:	d855      	bhi.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d016      	beq.n	80068c8 <TIM_SlaveTimer_SetConfig+0x90>
 800689a:	d852      	bhi.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
 800689c:	2b30      	cmp	r3, #48	; 0x30
 800689e:	d055      	beq.n	800694c <TIM_SlaveTimer_SetConfig+0x114>
 80068a0:	d84f      	bhi.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d052      	beq.n	800694c <TIM_SlaveTimer_SetConfig+0x114>
 80068a6:	d84c      	bhi.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d04f      	beq.n	800694c <TIM_SlaveTimer_SetConfig+0x114>
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	d04d      	beq.n	800694c <TIM_SlaveTimer_SetConfig+0x114>
 80068b0:	e047      	b.n	8006942 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68d9      	ldr	r1, [r3, #12]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f000 f9e3 	bl	8006c8c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80068c6:	e042      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b05      	cmp	r3, #5
 80068ce:	d101      	bne.n	80068d4 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e03f      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2101      	movs	r1, #1
 80068e8:	438a      	bics	r2, r1
 80068ea:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	22f0      	movs	r2, #240	; 0xf0
 80068f8:	4393      	bics	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	621a      	str	r2, [r3, #32]
      break;
 8006918:	e019      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	001a      	movs	r2, r3
 8006928:	f000 f86e 	bl	8006a08 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800692c:	e00f      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	001a      	movs	r2, r3
 800693c:	f000 f8d4 	bl	8006ae8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006940:	e005      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006942:	2317      	movs	r3, #23
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
      break;
 800694a:	e000      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800694c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800694e:	2317      	movs	r3, #23
 8006950:	18fb      	adds	r3, r7, r3
 8006952:	781b      	ldrb	r3, [r3, #0]
}
 8006954:	0018      	movs	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	b006      	add	sp, #24
 800695a:	bd80      	pop	{r7, pc}

0800695c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	2201      	movs	r2, #1
 8006970:	4393      	bics	r3, r2
 8006972:	001a      	movs	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	2380      	movs	r3, #128	; 0x80
 8006988:	05db      	lsls	r3, r3, #23
 800698a:	429a      	cmp	r2, r3
 800698c:	d007      	beq.n	800699e <TIM_TI1_SetConfig+0x42>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a1b      	ldr	r2, [pc, #108]	; (8006a00 <TIM_TI1_SetConfig+0xa4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_TI1_SetConfig+0x42>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a1a      	ldr	r2, [pc, #104]	; (8006a04 <TIM_TI1_SetConfig+0xa8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <TIM_TI1_SetConfig+0x46>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <TIM_TI1_SetConfig+0x48>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2203      	movs	r2, #3
 80069ac:	4393      	bics	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e003      	b.n	80069c2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2201      	movs	r2, #1
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	22f0      	movs	r2, #240	; 0xf0
 80069c6:	4393      	bics	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	4013      	ands	r3, r2
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	220a      	movs	r2, #10
 80069dc:	4393      	bics	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	220a      	movs	r2, #10
 80069e4:	4013      	ands	r3, r2
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b006      	add	sp, #24
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40010800 	.word	0x40010800
 8006a04:	40011400 	.word	0x40011400

08006a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4393      	bics	r3, r2
 8006a22:	001a      	movs	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	22f0      	movs	r2, #240	; 0xf0
 8006a32:	4393      	bics	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	220a      	movs	r2, #10
 8006a44:	4393      	bics	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	46c0      	nop			; (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b006      	add	sp, #24
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	2210      	movs	r2, #16
 8006a78:	4393      	bics	r3, r2
 8006a7a:	001a      	movs	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <TIM_TI2_SetConfig+0x7c>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <TIM_TI2_SetConfig+0x80>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	031b      	lsls	r3, r3, #12
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	22a0      	movs	r2, #160	; 0xa0
 8006ab8:	4393      	bics	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	22a0      	movs	r2, #160	; 0xa0
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b006      	add	sp, #24
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	fffffcff 	.word	0xfffffcff
 8006ae4:	ffff0fff 	.word	0xffff0fff

08006ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	2210      	movs	r2, #16
 8006afa:	4393      	bics	r3, r2
 8006afc:	001a      	movs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4a0d      	ldr	r2, [pc, #52]	; (8006b48 <TIM_TI2_ConfigInputStage+0x60>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	22a0      	movs	r2, #160	; 0xa0
 8006b24:	4393      	bics	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b006      	add	sp, #24
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	ffff0fff 	.word	0xffff0fff

08006b4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <TIM_TI3_SetConfig+0x78>)
 8006b60:	401a      	ands	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2203      	movs	r2, #3
 8006b76:	4393      	bics	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	22f0      	movs	r2, #240	; 0xf0
 8006b86:	4393      	bics	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	22ff      	movs	r2, #255	; 0xff
 8006b90:	4013      	ands	r3, r2
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4a0b      	ldr	r2, [pc, #44]	; (8006bc8 <TIM_TI3_SetConfig+0x7c>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	23a0      	movs	r3, #160	; 0xa0
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	4013      	ands	r3, r2
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	621a      	str	r2, [r3, #32]
}
 8006bbc:	46c0      	nop			; (mov r8, r8)
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b006      	add	sp, #24
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	fffffeff 	.word	0xfffffeff
 8006bc8:	fffff5ff 	.word	0xfffff5ff

08006bcc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <TIM_TI4_SetConfig+0x7c>)
 8006be0:	401a      	ands	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <TIM_TI4_SetConfig+0x80>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <TIM_TI4_SetConfig+0x84>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	031b      	lsls	r3, r3, #12
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4a0d      	ldr	r2, [pc, #52]	; (8006c54 <TIM_TI4_SetConfig+0x88>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	031a      	lsls	r2, r3, #12
 8006c26:	23a0      	movs	r3, #160	; 0xa0
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b006      	add	sp, #24
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	ffffefff 	.word	0xffffefff
 8006c4c:	fffffcff 	.word	0xfffffcff
 8006c50:	ffff0fff 	.word	0xffff0fff
 8006c54:	ffff5fff 	.word	0xffff5fff

08006c58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2270      	movs	r2, #112	; 0x70
 8006c6c:	4393      	bics	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	2207      	movs	r2, #7
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	609a      	str	r2, [r3, #8]
}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b004      	add	sp, #16
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <TIM_ETR_SetConfig+0x3c>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	021a      	lsls	r2, r3, #8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b006      	add	sp, #24
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	ffff00ff 	.word	0xffff00ff

08006ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	221f      	movs	r2, #31
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2201      	movs	r2, #1
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	0013      	movs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	43d2      	mvns	r2, r2
 8006cee:	401a      	ands	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1a      	ldr	r2, [r3, #32]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	211f      	movs	r1, #31
 8006cfc:	400b      	ands	r3, r1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4099      	lsls	r1, r3
 8006d02:	000b      	movs	r3, r1
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b006      	add	sp, #24
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2238      	movs	r2, #56	; 0x38
 8006d22:	5c9b      	ldrb	r3, [r3, r2]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e042      	b.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2238      	movs	r2, #56	; 0x38
 8006d30:	2101      	movs	r1, #1
 8006d32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2239      	movs	r2, #57	; 0x39
 8006d38:	2102      	movs	r1, #2
 8006d3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2270      	movs	r2, #112	; 0x70
 8006d50:	4393      	bics	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	2380      	movs	r3, #128	; 0x80
 8006d6c:	05db      	lsls	r3, r3, #23
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d009      	beq.n	8006d86 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d10c      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2280      	movs	r2, #128	; 0x80
 8006d8a:	4393      	bics	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2239      	movs	r2, #57	; 0x39
 8006da4:	2101      	movs	r1, #1
 8006da6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2238      	movs	r2, #56	; 0x38
 8006dac:	2100      	movs	r1, #0
 8006dae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	0018      	movs	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b004      	add	sp, #16
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	40010800 	.word	0x40010800
 8006dc0:	40011400 	.word	0x40011400

08006dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e044      	b.n	8006e60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d107      	bne.n	8006dee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2274      	movs	r2, #116	; 0x74
 8006de2:	2100      	movs	r1, #0
 8006de4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7fc fcb7 	bl	800375c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2224      	movs	r2, #36	; 0x24
 8006df2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2101      	movs	r1, #1
 8006e00:	438a      	bics	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	0018      	movs	r0, r3
 8006e08:	f000 f8d8 	bl	8006fbc <UART_SetConfig>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e024      	b.n	8006e60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 fb4f 	bl	80074c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	490d      	ldr	r1, [pc, #52]	; (8006e68 <HAL_UART_Init+0xa4>)
 8006e32:	400a      	ands	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	212a      	movs	r1, #42	; 0x2a
 8006e42:	438a      	bics	r2, r1
 8006e44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2101      	movs	r1, #1
 8006e52:	430a      	orrs	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 fbe7 	bl	800762c <UART_CheckIdleState>
 8006e5e:	0003      	movs	r3, r0
}
 8006e60:	0018      	movs	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	b002      	add	sp, #8
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	ffffb7ff 	.word	0xffffb7ff

08006e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	1dbb      	adds	r3, r7, #6
 8006e7a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d000      	beq.n	8006e86 <HAL_UART_Transmit+0x1a>
 8006e84:	e095      	b.n	8006fb2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_UART_Transmit+0x28>
 8006e8c:	1dbb      	adds	r3, r7, #6
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e08d      	b.n	8006fb4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	015b      	lsls	r3, r3, #5
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d109      	bne.n	8006eb8 <HAL_UART_Transmit+0x4c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d105      	bne.n	8006eb8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	d001      	beq.n	8006eb8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e07d      	b.n	8006fb4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2274      	movs	r2, #116	; 0x74
 8006ebc:	5c9b      	ldrb	r3, [r3, r2]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Transmit+0x5a>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e076      	b.n	8006fb4 <HAL_UART_Transmit+0x148>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2274      	movs	r2, #116	; 0x74
 8006eca:	2101      	movs	r1, #1
 8006ecc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2221      	movs	r2, #33	; 0x21
 8006eda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006edc:	f7fc fd12 	bl	8003904 <HAL_GetTick>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1dba      	adds	r2, r7, #6
 8006ee8:	2150      	movs	r1, #80	; 0x50
 8006eea:	8812      	ldrh	r2, [r2, #0]
 8006eec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1dba      	adds	r2, r7, #6
 8006ef2:	2152      	movs	r1, #82	; 0x52
 8006ef4:	8812      	ldrh	r2, [r2, #0]
 8006ef6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	015b      	lsls	r3, r3, #5
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d108      	bne.n	8006f16 <HAL_UART_Transmit+0xaa>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	e003      	b.n	8006f1e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2274      	movs	r2, #116	; 0x74
 8006f22:	2100      	movs	r1, #0
 8006f24:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006f26:	e02c      	b.n	8006f82 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	0013      	movs	r3, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	2180      	movs	r1, #128	; 0x80
 8006f36:	f000 fbc1 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e038      	b.n	8006fb4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	05d2      	lsls	r2, r2, #23
 8006f54:	0dd2      	lsrs	r2, r2, #23
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e007      	b.n	8006f70 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2252      	movs	r2, #82	; 0x52
 8006f74:	5a9b      	ldrh	r3, [r3, r2]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b299      	uxth	r1, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2252      	movs	r2, #82	; 0x52
 8006f80:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2252      	movs	r2, #82	; 0x52
 8006f86:	5a9b      	ldrh	r3, [r3, r2]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1cc      	bne.n	8006f28 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	0013      	movs	r3, r2
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2140      	movs	r1, #64	; 0x40
 8006f9c:	f000 fb8e 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 8006fa0:	1e03      	subs	r3, r0, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e005      	b.n	8006fb4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b008      	add	sp, #32
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	b5b0      	push	{r4, r5, r7, lr}
 8006fbe:	b08e      	sub	sp, #56	; 0x38
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc4:	231a      	movs	r3, #26
 8006fc6:	2218      	movs	r2, #24
 8006fc8:	189b      	adds	r3, r3, r2
 8006fca:	19db      	adds	r3, r3, r7
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4ac6      	ldr	r2, [pc, #792]	; (8007308 <UART_SetConfig+0x34c>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	0019      	movs	r1, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4ac1      	ldr	r2, [pc, #772]	; (800730c <UART_SetConfig+0x350>)
 8007006:	4013      	ands	r3, r2
 8007008:	0019      	movs	r1, r3
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4abb      	ldr	r2, [pc, #748]	; (8007310 <UART_SetConfig+0x354>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800702c:	4313      	orrs	r3, r2
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	4ab7      	ldr	r2, [pc, #732]	; (8007314 <UART_SetConfig+0x358>)
 8007038:	4013      	ands	r3, r2
 800703a:	0019      	movs	r1, r3
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007042:	430a      	orrs	r2, r1
 8007044:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4ab3      	ldr	r2, [pc, #716]	; (8007318 <UART_SetConfig+0x35c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d131      	bne.n	80070b4 <UART_SetConfig+0xf8>
 8007050:	4bb2      	ldr	r3, [pc, #712]	; (800731c <UART_SetConfig+0x360>)
 8007052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007054:	2203      	movs	r2, #3
 8007056:	4013      	ands	r3, r2
 8007058:	2b03      	cmp	r3, #3
 800705a:	d01d      	beq.n	8007098 <UART_SetConfig+0xdc>
 800705c:	d823      	bhi.n	80070a6 <UART_SetConfig+0xea>
 800705e:	2b02      	cmp	r3, #2
 8007060:	d00c      	beq.n	800707c <UART_SetConfig+0xc0>
 8007062:	d820      	bhi.n	80070a6 <UART_SetConfig+0xea>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <UART_SetConfig+0xb2>
 8007068:	2b01      	cmp	r3, #1
 800706a:	d00e      	beq.n	800708a <UART_SetConfig+0xce>
 800706c:	e01b      	b.n	80070a6 <UART_SetConfig+0xea>
 800706e:	231b      	movs	r3, #27
 8007070:	2218      	movs	r2, #24
 8007072:	189b      	adds	r3, r3, r2
 8007074:	19db      	adds	r3, r3, r7
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e09c      	b.n	80071b6 <UART_SetConfig+0x1fa>
 800707c:	231b      	movs	r3, #27
 800707e:	2218      	movs	r2, #24
 8007080:	189b      	adds	r3, r3, r2
 8007082:	19db      	adds	r3, r3, r7
 8007084:	2202      	movs	r2, #2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e095      	b.n	80071b6 <UART_SetConfig+0x1fa>
 800708a:	231b      	movs	r3, #27
 800708c:	2218      	movs	r2, #24
 800708e:	189b      	adds	r3, r3, r2
 8007090:	19db      	adds	r3, r3, r7
 8007092:	2204      	movs	r2, #4
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e08e      	b.n	80071b6 <UART_SetConfig+0x1fa>
 8007098:	231b      	movs	r3, #27
 800709a:	2218      	movs	r2, #24
 800709c:	189b      	adds	r3, r3, r2
 800709e:	19db      	adds	r3, r3, r7
 80070a0:	2208      	movs	r2, #8
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e087      	b.n	80071b6 <UART_SetConfig+0x1fa>
 80070a6:	231b      	movs	r3, #27
 80070a8:	2218      	movs	r2, #24
 80070aa:	189b      	adds	r3, r3, r2
 80070ac:	19db      	adds	r3, r3, r7
 80070ae:	2210      	movs	r2, #16
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e080      	b.n	80071b6 <UART_SetConfig+0x1fa>
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a99      	ldr	r2, [pc, #612]	; (8007320 <UART_SetConfig+0x364>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d131      	bne.n	8007122 <UART_SetConfig+0x166>
 80070be:	4b97      	ldr	r3, [pc, #604]	; (800731c <UART_SetConfig+0x360>)
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	220c      	movs	r2, #12
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b0c      	cmp	r3, #12
 80070c8:	d01d      	beq.n	8007106 <UART_SetConfig+0x14a>
 80070ca:	d823      	bhi.n	8007114 <UART_SetConfig+0x158>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d00c      	beq.n	80070ea <UART_SetConfig+0x12e>
 80070d0:	d820      	bhi.n	8007114 <UART_SetConfig+0x158>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <UART_SetConfig+0x120>
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d00e      	beq.n	80070f8 <UART_SetConfig+0x13c>
 80070da:	e01b      	b.n	8007114 <UART_SetConfig+0x158>
 80070dc:	231b      	movs	r3, #27
 80070de:	2218      	movs	r2, #24
 80070e0:	189b      	adds	r3, r3, r2
 80070e2:	19db      	adds	r3, r3, r7
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e065      	b.n	80071b6 <UART_SetConfig+0x1fa>
 80070ea:	231b      	movs	r3, #27
 80070ec:	2218      	movs	r2, #24
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	19db      	adds	r3, r3, r7
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	e05e      	b.n	80071b6 <UART_SetConfig+0x1fa>
 80070f8:	231b      	movs	r3, #27
 80070fa:	2218      	movs	r2, #24
 80070fc:	189b      	adds	r3, r3, r2
 80070fe:	19db      	adds	r3, r3, r7
 8007100:	2204      	movs	r2, #4
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e057      	b.n	80071b6 <UART_SetConfig+0x1fa>
 8007106:	231b      	movs	r3, #27
 8007108:	2218      	movs	r2, #24
 800710a:	189b      	adds	r3, r3, r2
 800710c:	19db      	adds	r3, r3, r7
 800710e:	2208      	movs	r2, #8
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	e050      	b.n	80071b6 <UART_SetConfig+0x1fa>
 8007114:	231b      	movs	r3, #27
 8007116:	2218      	movs	r2, #24
 8007118:	189b      	adds	r3, r3, r2
 800711a:	19db      	adds	r3, r3, r7
 800711c:	2210      	movs	r2, #16
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e049      	b.n	80071b6 <UART_SetConfig+0x1fa>
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a7a      	ldr	r2, [pc, #488]	; (8007310 <UART_SetConfig+0x354>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d13e      	bne.n	80071aa <UART_SetConfig+0x1ee>
 800712c:	4b7b      	ldr	r3, [pc, #492]	; (800731c <UART_SetConfig+0x360>)
 800712e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007130:	23c0      	movs	r3, #192	; 0xc0
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4013      	ands	r3, r2
 8007136:	22c0      	movs	r2, #192	; 0xc0
 8007138:	0112      	lsls	r2, r2, #4
 800713a:	4293      	cmp	r3, r2
 800713c:	d027      	beq.n	800718e <UART_SetConfig+0x1d2>
 800713e:	22c0      	movs	r2, #192	; 0xc0
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	4293      	cmp	r3, r2
 8007144:	d82a      	bhi.n	800719c <UART_SetConfig+0x1e0>
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	0112      	lsls	r2, r2, #4
 800714a:	4293      	cmp	r3, r2
 800714c:	d011      	beq.n	8007172 <UART_SetConfig+0x1b6>
 800714e:	2280      	movs	r2, #128	; 0x80
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	4293      	cmp	r3, r2
 8007154:	d822      	bhi.n	800719c <UART_SetConfig+0x1e0>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <UART_SetConfig+0x1a8>
 800715a:	2280      	movs	r2, #128	; 0x80
 800715c:	00d2      	lsls	r2, r2, #3
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <UART_SetConfig+0x1c4>
 8007162:	e01b      	b.n	800719c <UART_SetConfig+0x1e0>
 8007164:	231b      	movs	r3, #27
 8007166:	2218      	movs	r2, #24
 8007168:	189b      	adds	r3, r3, r2
 800716a:	19db      	adds	r3, r3, r7
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e021      	b.n	80071b6 <UART_SetConfig+0x1fa>
 8007172:	231b      	movs	r3, #27
 8007174:	2218      	movs	r2, #24
 8007176:	189b      	adds	r3, r3, r2
 8007178:	19db      	adds	r3, r3, r7
 800717a:	2202      	movs	r2, #2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e01a      	b.n	80071b6 <UART_SetConfig+0x1fa>
 8007180:	231b      	movs	r3, #27
 8007182:	2218      	movs	r2, #24
 8007184:	189b      	adds	r3, r3, r2
 8007186:	19db      	adds	r3, r3, r7
 8007188:	2204      	movs	r2, #4
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	e013      	b.n	80071b6 <UART_SetConfig+0x1fa>
 800718e:	231b      	movs	r3, #27
 8007190:	2218      	movs	r2, #24
 8007192:	189b      	adds	r3, r3, r2
 8007194:	19db      	adds	r3, r3, r7
 8007196:	2208      	movs	r2, #8
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	e00c      	b.n	80071b6 <UART_SetConfig+0x1fa>
 800719c:	231b      	movs	r3, #27
 800719e:	2218      	movs	r2, #24
 80071a0:	189b      	adds	r3, r3, r2
 80071a2:	19db      	adds	r3, r3, r7
 80071a4:	2210      	movs	r2, #16
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e005      	b.n	80071b6 <UART_SetConfig+0x1fa>
 80071aa:	231b      	movs	r3, #27
 80071ac:	2218      	movs	r2, #24
 80071ae:	189b      	adds	r3, r3, r2
 80071b0:	19db      	adds	r3, r3, r7
 80071b2:	2210      	movs	r2, #16
 80071b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a55      	ldr	r2, [pc, #340]	; (8007310 <UART_SetConfig+0x354>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d000      	beq.n	80071c2 <UART_SetConfig+0x206>
 80071c0:	e084      	b.n	80072cc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071c2:	231b      	movs	r3, #27
 80071c4:	2218      	movs	r2, #24
 80071c6:	189b      	adds	r3, r3, r2
 80071c8:	19db      	adds	r3, r3, r7
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d01d      	beq.n	800720c <UART_SetConfig+0x250>
 80071d0:	dc20      	bgt.n	8007214 <UART_SetConfig+0x258>
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d015      	beq.n	8007202 <UART_SetConfig+0x246>
 80071d6:	dc1d      	bgt.n	8007214 <UART_SetConfig+0x258>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <UART_SetConfig+0x226>
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d005      	beq.n	80071ec <UART_SetConfig+0x230>
 80071e0:	e018      	b.n	8007214 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fe f9cb 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 80071e6:	0003      	movs	r3, r0
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071ea:	e01c      	b.n	8007226 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ec:	4b4b      	ldr	r3, [pc, #300]	; (800731c <UART_SetConfig+0x360>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2210      	movs	r2, #16
 80071f2:	4013      	ands	r3, r2
 80071f4:	d002      	beq.n	80071fc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80071f6:	4b4b      	ldr	r3, [pc, #300]	; (8007324 <UART_SetConfig+0x368>)
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071fa:	e014      	b.n	8007226 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80071fc:	4b4a      	ldr	r3, [pc, #296]	; (8007328 <UART_SetConfig+0x36c>)
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007200:	e011      	b.n	8007226 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007202:	f7fe f90b 	bl	800541c <HAL_RCC_GetSysClockFreq>
 8007206:	0003      	movs	r3, r0
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800720a:	e00c      	b.n	8007226 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007212:	e008      	b.n	8007226 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007218:	231a      	movs	r3, #26
 800721a:	2218      	movs	r2, #24
 800721c:	189b      	adds	r3, r3, r2
 800721e:	19db      	adds	r3, r3, r7
 8007220:	2201      	movs	r2, #1
 8007222:	701a      	strb	r2, [r3, #0]
        break;
 8007224:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d100      	bne.n	800722e <UART_SetConfig+0x272>
 800722c:	e133      	b.n	8007496 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	0013      	movs	r3, r2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	189b      	adds	r3, r3, r2
 8007238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800723a:	429a      	cmp	r2, r3
 800723c:	d305      	bcc.n	800724a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007246:	429a      	cmp	r2, r3
 8007248:	d906      	bls.n	8007258 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800724a:	231a      	movs	r3, #26
 800724c:	2218      	movs	r2, #24
 800724e:	189b      	adds	r3, r3, r2
 8007250:	19db      	adds	r3, r3, r7
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e11e      	b.n	8007496 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	6939      	ldr	r1, [r7, #16]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	000b      	movs	r3, r1
 8007266:	0e1b      	lsrs	r3, r3, #24
 8007268:	0010      	movs	r0, r2
 800726a:	0205      	lsls	r5, r0, #8
 800726c:	431d      	orrs	r5, r3
 800726e:	000b      	movs	r3, r1
 8007270:	021c      	lsls	r4, r3, #8
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68b8      	ldr	r0, [r7, #8]
 8007280:	68f9      	ldr	r1, [r7, #12]
 8007282:	1900      	adds	r0, r0, r4
 8007284:	4169      	adcs	r1, r5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	2300      	movs	r3, #0
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f7f9 f912 	bl	80004bc <__aeabi_uldivmod>
 8007298:	0002      	movs	r2, r0
 800729a:	000b      	movs	r3, r1
 800729c:	0013      	movs	r3, r2
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a2:	23c0      	movs	r3, #192	; 0xc0
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d309      	bcc.n	80072be <UART_SetConfig+0x302>
 80072aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	035b      	lsls	r3, r3, #13
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d204      	bcs.n	80072be <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ba:	60da      	str	r2, [r3, #12]
 80072bc:	e0eb      	b.n	8007496 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 80072be:	231a      	movs	r3, #26
 80072c0:	2218      	movs	r2, #24
 80072c2:	189b      	adds	r3, r3, r2
 80072c4:	19db      	adds	r3, r3, r7
 80072c6:	2201      	movs	r2, #1
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	e0e4      	b.n	8007496 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	2380      	movs	r3, #128	; 0x80
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d000      	beq.n	80072da <UART_SetConfig+0x31e>
 80072d8:	e086      	b.n	80073e8 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 80072da:	231b      	movs	r3, #27
 80072dc:	2218      	movs	r2, #24
 80072de:	189b      	adds	r3, r3, r2
 80072e0:	19db      	adds	r3, r3, r7
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d837      	bhi.n	8007358 <UART_SetConfig+0x39c>
 80072e8:	009a      	lsls	r2, r3, #2
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <UART_SetConfig+0x370>)
 80072ec:	18d3      	adds	r3, r2, r3
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f2:	f7fe f943 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 80072f6:	0003      	movs	r3, r0
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072fa:	e036      	b.n	800736a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072fc:	f7fe f954 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8007300:	0003      	movs	r3, r0
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007304:	e031      	b.n	800736a <UART_SetConfig+0x3ae>
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	efff69f3 	.word	0xefff69f3
 800730c:	ffffcfff 	.word	0xffffcfff
 8007310:	40004800 	.word	0x40004800
 8007314:	fffff4ff 	.word	0xfffff4ff
 8007318:	40013800 	.word	0x40013800
 800731c:	40021000 	.word	0x40021000
 8007320:	40004400 	.word	0x40004400
 8007324:	003d0900 	.word	0x003d0900
 8007328:	00f42400 	.word	0x00f42400
 800732c:	0800a5f8 	.word	0x0800a5f8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007330:	4b60      	ldr	r3, [pc, #384]	; (80074b4 <UART_SetConfig+0x4f8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2210      	movs	r2, #16
 8007336:	4013      	ands	r3, r2
 8007338:	d002      	beq.n	8007340 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800733a:	4b5f      	ldr	r3, [pc, #380]	; (80074b8 <UART_SetConfig+0x4fc>)
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800733e:	e014      	b.n	800736a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8007340:	4b5e      	ldr	r3, [pc, #376]	; (80074bc <UART_SetConfig+0x500>)
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007344:	e011      	b.n	800736a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7fe f869 	bl	800541c <HAL_RCC_GetSysClockFreq>
 800734a:	0003      	movs	r3, r0
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800734e:	e00c      	b.n	800736a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007350:	2380      	movs	r3, #128	; 0x80
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007356:	e008      	b.n	800736a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800735c:	231a      	movs	r3, #26
 800735e:	2218      	movs	r2, #24
 8007360:	189b      	adds	r3, r3, r2
 8007362:	19db      	adds	r3, r3, r7
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
        break;
 8007368:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d100      	bne.n	8007372 <UART_SetConfig+0x3b6>
 8007370:	e091      	b.n	8007496 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	005a      	lsls	r2, r3, #1
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	18d2      	adds	r2, r2, r3
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	0019      	movs	r1, r3
 8007384:	0010      	movs	r0, r2
 8007386:	f7f8 fee5 	bl	8000154 <__udivsi3>
 800738a:	0003      	movs	r3, r0
 800738c:	b29b      	uxth	r3, r3
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d921      	bls.n	80073da <UART_SetConfig+0x41e>
 8007396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	025b      	lsls	r3, r3, #9
 800739c:	429a      	cmp	r2, r3
 800739e:	d21c      	bcs.n	80073da <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	200e      	movs	r0, #14
 80073a6:	2418      	movs	r4, #24
 80073a8:	1903      	adds	r3, r0, r4
 80073aa:	19db      	adds	r3, r3, r7
 80073ac:	210f      	movs	r1, #15
 80073ae:	438a      	bics	r2, r1
 80073b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2207      	movs	r2, #7
 80073ba:	4013      	ands	r3, r2
 80073bc:	b299      	uxth	r1, r3
 80073be:	1903      	adds	r3, r0, r4
 80073c0:	19db      	adds	r3, r3, r7
 80073c2:	1902      	adds	r2, r0, r4
 80073c4:	19d2      	adds	r2, r2, r7
 80073c6:	8812      	ldrh	r2, [r2, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	1902      	adds	r2, r0, r4
 80073d2:	19d2      	adds	r2, r2, r7
 80073d4:	8812      	ldrh	r2, [r2, #0]
 80073d6:	60da      	str	r2, [r3, #12]
 80073d8:	e05d      	b.n	8007496 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80073da:	231a      	movs	r3, #26
 80073dc:	2218      	movs	r2, #24
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	19db      	adds	r3, r3, r7
 80073e2:	2201      	movs	r2, #1
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	e056      	b.n	8007496 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073e8:	231b      	movs	r3, #27
 80073ea:	2218      	movs	r2, #24
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	19db      	adds	r3, r3, r7
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d822      	bhi.n	800743c <UART_SetConfig+0x480>
 80073f6:	009a      	lsls	r2, r3, #2
 80073f8:	4b31      	ldr	r3, [pc, #196]	; (80074c0 <UART_SetConfig+0x504>)
 80073fa:	18d3      	adds	r3, r2, r3
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fe f8bc 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8007404:	0003      	movs	r3, r0
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007408:	e021      	b.n	800744e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800740a:	f7fe f8cd 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 800740e:	0003      	movs	r3, r0
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007412:	e01c      	b.n	800744e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007414:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <UART_SetConfig+0x4f8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2210      	movs	r2, #16
 800741a:	4013      	ands	r3, r2
 800741c:	d002      	beq.n	8007424 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800741e:	4b26      	ldr	r3, [pc, #152]	; (80074b8 <UART_SetConfig+0x4fc>)
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007422:	e014      	b.n	800744e <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8007424:	4b25      	ldr	r3, [pc, #148]	; (80074bc <UART_SetConfig+0x500>)
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007428:	e011      	b.n	800744e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742a:	f7fd fff7 	bl	800541c <HAL_RCC_GetSysClockFreq>
 800742e:	0003      	movs	r3, r0
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007432:	e00c      	b.n	800744e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800743a:	e008      	b.n	800744e <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007440:	231a      	movs	r3, #26
 8007442:	2218      	movs	r2, #24
 8007444:	189b      	adds	r3, r3, r2
 8007446:	19db      	adds	r3, r3, r7
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
        break;
 800744c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d020      	beq.n	8007496 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	085a      	lsrs	r2, r3, #1
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	18d2      	adds	r2, r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	0019      	movs	r1, r3
 8007464:	0010      	movs	r0, r2
 8007466:	f7f8 fe75 	bl	8000154 <__udivsi3>
 800746a:	0003      	movs	r3, r0
 800746c:	b29b      	uxth	r3, r3
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b0f      	cmp	r3, #15
 8007474:	d909      	bls.n	800748a <UART_SetConfig+0x4ce>
 8007476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	025b      	lsls	r3, r3, #9
 800747c:	429a      	cmp	r2, r3
 800747e:	d204      	bcs.n	800748a <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007486:	60da      	str	r2, [r3, #12]
 8007488:	e005      	b.n	8007496 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800748a:	231a      	movs	r3, #26
 800748c:	2218      	movs	r2, #24
 800748e:	189b      	adds	r3, r3, r2
 8007490:	19db      	adds	r3, r3, r7
 8007492:	2201      	movs	r2, #1
 8007494:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	2200      	movs	r2, #0
 800749a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	2200      	movs	r2, #0
 80074a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80074a2:	231a      	movs	r3, #26
 80074a4:	2218      	movs	r2, #24
 80074a6:	189b      	adds	r3, r3, r2
 80074a8:	19db      	adds	r3, r3, r7
 80074aa:	781b      	ldrb	r3, [r3, #0]
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b00e      	add	sp, #56	; 0x38
 80074b2:	bdb0      	pop	{r4, r5, r7, pc}
 80074b4:	40021000 	.word	0x40021000
 80074b8:	003d0900 	.word	0x003d0900
 80074bc:	00f42400 	.word	0x00f42400
 80074c0:	0800a61c 	.word	0x0800a61c

080074c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2201      	movs	r2, #1
 80074d2:	4013      	ands	r3, r2
 80074d4:	d00b      	beq.n	80074ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	4a4a      	ldr	r2, [pc, #296]	; (8007608 <UART_AdvFeatureConfig+0x144>)
 80074de:	4013      	ands	r3, r2
 80074e0:	0019      	movs	r1, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2202      	movs	r2, #2
 80074f4:	4013      	ands	r3, r2
 80074f6:	d00b      	beq.n	8007510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4a43      	ldr	r2, [pc, #268]	; (800760c <UART_AdvFeatureConfig+0x148>)
 8007500:	4013      	ands	r3, r2
 8007502:	0019      	movs	r1, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2204      	movs	r2, #4
 8007516:	4013      	ands	r3, r2
 8007518:	d00b      	beq.n	8007532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	4a3b      	ldr	r2, [pc, #236]	; (8007610 <UART_AdvFeatureConfig+0x14c>)
 8007522:	4013      	ands	r3, r2
 8007524:	0019      	movs	r1, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2208      	movs	r2, #8
 8007538:	4013      	ands	r3, r2
 800753a:	d00b      	beq.n	8007554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4a34      	ldr	r2, [pc, #208]	; (8007614 <UART_AdvFeatureConfig+0x150>)
 8007544:	4013      	ands	r3, r2
 8007546:	0019      	movs	r1, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2210      	movs	r2, #16
 800755a:	4013      	ands	r3, r2
 800755c:	d00b      	beq.n	8007576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4a2c      	ldr	r2, [pc, #176]	; (8007618 <UART_AdvFeatureConfig+0x154>)
 8007566:	4013      	ands	r3, r2
 8007568:	0019      	movs	r1, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2220      	movs	r2, #32
 800757c:	4013      	ands	r3, r2
 800757e:	d00b      	beq.n	8007598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	4a25      	ldr	r2, [pc, #148]	; (800761c <UART_AdvFeatureConfig+0x158>)
 8007588:	4013      	ands	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2240      	movs	r2, #64	; 0x40
 800759e:	4013      	ands	r3, r2
 80075a0:	d01d      	beq.n	80075de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	4a1d      	ldr	r2, [pc, #116]	; (8007620 <UART_AdvFeatureConfig+0x15c>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	0019      	movs	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075be:	2380      	movs	r3, #128	; 0x80
 80075c0:	035b      	lsls	r3, r3, #13
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d10b      	bne.n	80075de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a15      	ldr	r2, [pc, #84]	; (8007624 <UART_AdvFeatureConfig+0x160>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	0019      	movs	r1, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2280      	movs	r2, #128	; 0x80
 80075e4:	4013      	ands	r3, r2
 80075e6:	d00b      	beq.n	8007600 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4a0e      	ldr	r2, [pc, #56]	; (8007628 <UART_AdvFeatureConfig+0x164>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	0019      	movs	r1, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	605a      	str	r2, [r3, #4]
  }
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}
 8007608:	fffdffff 	.word	0xfffdffff
 800760c:	fffeffff 	.word	0xfffeffff
 8007610:	fffbffff 	.word	0xfffbffff
 8007614:	ffff7fff 	.word	0xffff7fff
 8007618:	ffffefff 	.word	0xffffefff
 800761c:	ffffdfff 	.word	0xffffdfff
 8007620:	ffefffff 	.word	0xffefffff
 8007624:	ff9fffff 	.word	0xff9fffff
 8007628:	fff7ffff 	.word	0xfff7ffff

0800762c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af02      	add	r7, sp, #8
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	2100      	movs	r1, #0
 800763a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800763c:	f7fc f962 	bl	8003904 <HAL_GetTick>
 8007640:	0003      	movs	r3, r0
 8007642:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2208      	movs	r2, #8
 800764c:	4013      	ands	r3, r2
 800764e:	2b08      	cmp	r3, #8
 8007650:	d10c      	bne.n	800766c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2280      	movs	r2, #128	; 0x80
 8007656:	0391      	lsls	r1, r2, #14
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <UART_CheckIdleState+0x8c>)
 800765c:	9200      	str	r2, [sp, #0]
 800765e:	2200      	movs	r2, #0
 8007660:	f000 f82c 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d001      	beq.n	800766c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e021      	b.n	80076b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2204      	movs	r2, #4
 8007674:	4013      	ands	r3, r2
 8007676:	2b04      	cmp	r3, #4
 8007678:	d10c      	bne.n	8007694 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2280      	movs	r2, #128	; 0x80
 800767e:	03d1      	lsls	r1, r2, #15
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4a0d      	ldr	r2, [pc, #52]	; (80076b8 <UART_CheckIdleState+0x8c>)
 8007684:	9200      	str	r2, [sp, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	f000 f818 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 800768c:	1e03      	subs	r3, r0, #0
 800768e:	d001      	beq.n	8007694 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e00d      	b.n	80076b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2274      	movs	r2, #116	; 0x74
 80076aa:	2100      	movs	r1, #0
 80076ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b004      	add	sp, #16
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	01ffffff 	.word	0x01ffffff

080076bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b094      	sub	sp, #80	; 0x50
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	1dfb      	adds	r3, r7, #7
 80076ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076cc:	e0a3      	b.n	8007816 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076d0:	3301      	adds	r3, #1
 80076d2:	d100      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80076d4:	e09f      	b.n	8007816 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fc f915 	bl	8003904 <HAL_GetTick>
 80076da:	0002      	movs	r2, r0
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <UART_WaitOnFlagUntilTimeout+0x30>
 80076e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d13d      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ec:	f3ef 8310 	mrs	r3, PRIMASK
 80076f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076f4:	647b      	str	r3, [r7, #68]	; 0x44
 80076f6:	2301      	movs	r3, #1
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	f383 8810 	msr	PRIMASK, r3
}
 8007700:	46c0      	nop			; (mov r8, r8)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	494c      	ldr	r1, [pc, #304]	; (8007840 <UART_WaitOnFlagUntilTimeout+0x184>)
 800770e:	400a      	ands	r2, r1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007714:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	f383 8810 	msr	PRIMASK, r3
}
 800771c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800771e:	f3ef 8310 	mrs	r3, PRIMASK
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	643b      	str	r3, [r7, #64]	; 0x40
 8007728:	2301      	movs	r3, #1
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	f383 8810 	msr	PRIMASK, r3
}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2101      	movs	r1, #1
 8007740:	438a      	bics	r2, r1
 8007742:	609a      	str	r2, [r3, #8]
 8007744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774a:	f383 8810 	msr	PRIMASK, r3
}
 800774e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2274      	movs	r2, #116	; 0x74
 8007760:	2100      	movs	r1, #0
 8007762:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e067      	b.n	8007838 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2204      	movs	r2, #4
 8007770:	4013      	ands	r3, r2
 8007772:	d050      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	69da      	ldr	r2, [r3, #28]
 800777a:	2380      	movs	r3, #128	; 0x80
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	401a      	ands	r2, r3
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	429a      	cmp	r2, r3
 8007786:	d146      	bne.n	8007816 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2280      	movs	r2, #128	; 0x80
 800778e:	0112      	lsls	r2, r2, #4
 8007790:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007792:	f3ef 8310 	mrs	r3, PRIMASK
 8007796:	613b      	str	r3, [r7, #16]
  return(result);
 8007798:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800779a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800779c:	2301      	movs	r3, #1
 800779e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f383 8810 	msr	PRIMASK, r3
}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4923      	ldr	r1, [pc, #140]	; (8007840 <UART_WaitOnFlagUntilTimeout+0x184>)
 80077b4:	400a      	ands	r2, r1
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f383 8810 	msr	PRIMASK, r3
}
 80077c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c4:	f3ef 8310 	mrs	r3, PRIMASK
 80077c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80077ca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ce:	2301      	movs	r3, #1
 80077d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	f383 8810 	msr	PRIMASK, r3
}
 80077d8:	46c0      	nop			; (mov r8, r8)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2101      	movs	r1, #1
 80077e6:	438a      	bics	r2, r1
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	f383 8810 	msr	PRIMASK, r3
}
 80077f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2280      	movs	r2, #128	; 0x80
 8007806:	2120      	movs	r1, #32
 8007808:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2274      	movs	r2, #116	; 0x74
 800780e:	2100      	movs	r1, #0
 8007810:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e010      	b.n	8007838 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	4013      	ands	r3, r2
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	425a      	negs	r2, r3
 8007826:	4153      	adcs	r3, r2
 8007828:	b2db      	uxtb	r3, r3
 800782a:	001a      	movs	r2, r3
 800782c:	1dfb      	adds	r3, r7, #7
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d100      	bne.n	8007836 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007834:	e74b      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b014      	add	sp, #80	; 0x50
 800783e:	bd80      	pop	{r7, pc}
 8007840:	fffffe5f 	.word	0xfffffe5f

08007844 <__errno>:
 8007844:	4b01      	ldr	r3, [pc, #4]	; (800784c <__errno+0x8>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	4770      	bx	lr
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	20000020 	.word	0x20000020

08007850 <__libc_init_array>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	2600      	movs	r6, #0
 8007854:	4d0c      	ldr	r5, [pc, #48]	; (8007888 <__libc_init_array+0x38>)
 8007856:	4c0d      	ldr	r4, [pc, #52]	; (800788c <__libc_init_array+0x3c>)
 8007858:	1b64      	subs	r4, r4, r5
 800785a:	10a4      	asrs	r4, r4, #2
 800785c:	42a6      	cmp	r6, r4
 800785e:	d109      	bne.n	8007874 <__libc_init_array+0x24>
 8007860:	2600      	movs	r6, #0
 8007862:	f002 fe07 	bl	800a474 <_init>
 8007866:	4d0a      	ldr	r5, [pc, #40]	; (8007890 <__libc_init_array+0x40>)
 8007868:	4c0a      	ldr	r4, [pc, #40]	; (8007894 <__libc_init_array+0x44>)
 800786a:	1b64      	subs	r4, r4, r5
 800786c:	10a4      	asrs	r4, r4, #2
 800786e:	42a6      	cmp	r6, r4
 8007870:	d105      	bne.n	800787e <__libc_init_array+0x2e>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	00b3      	lsls	r3, r6, #2
 8007876:	58eb      	ldr	r3, [r5, r3]
 8007878:	4798      	blx	r3
 800787a:	3601      	adds	r6, #1
 800787c:	e7ee      	b.n	800785c <__libc_init_array+0xc>
 800787e:	00b3      	lsls	r3, r6, #2
 8007880:	58eb      	ldr	r3, [r5, r3]
 8007882:	4798      	blx	r3
 8007884:	3601      	adds	r6, #1
 8007886:	e7f2      	b.n	800786e <__libc_init_array+0x1e>
 8007888:	0800aa24 	.word	0x0800aa24
 800788c:	0800aa24 	.word	0x0800aa24
 8007890:	0800aa24 	.word	0x0800aa24
 8007894:	0800aa28 	.word	0x0800aa28

08007898 <memset>:
 8007898:	0003      	movs	r3, r0
 800789a:	1882      	adds	r2, r0, r2
 800789c:	4293      	cmp	r3, r2
 800789e:	d100      	bne.n	80078a2 <memset+0xa>
 80078a0:	4770      	bx	lr
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	e7f9      	b.n	800789c <memset+0x4>

080078a8 <__cvt>:
 80078a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078aa:	001e      	movs	r6, r3
 80078ac:	2300      	movs	r3, #0
 80078ae:	0014      	movs	r4, r2
 80078b0:	b08b      	sub	sp, #44	; 0x2c
 80078b2:	429e      	cmp	r6, r3
 80078b4:	da04      	bge.n	80078c0 <__cvt+0x18>
 80078b6:	2180      	movs	r1, #128	; 0x80
 80078b8:	0609      	lsls	r1, r1, #24
 80078ba:	1873      	adds	r3, r6, r1
 80078bc:	001e      	movs	r6, r3
 80078be:	232d      	movs	r3, #45	; 0x2d
 80078c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078c4:	7013      	strb	r3, [r2, #0]
 80078c6:	2320      	movs	r3, #32
 80078c8:	2203      	movs	r2, #3
 80078ca:	439f      	bics	r7, r3
 80078cc:	2f46      	cmp	r7, #70	; 0x46
 80078ce:	d007      	beq.n	80078e0 <__cvt+0x38>
 80078d0:	003b      	movs	r3, r7
 80078d2:	3b45      	subs	r3, #69	; 0x45
 80078d4:	4259      	negs	r1, r3
 80078d6:	414b      	adcs	r3, r1
 80078d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80078da:	3a01      	subs	r2, #1
 80078dc:	18cb      	adds	r3, r1, r3
 80078de:	9310      	str	r3, [sp, #64]	; 0x40
 80078e0:	ab09      	add	r3, sp, #36	; 0x24
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	ab08      	add	r3, sp, #32
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078ea:	9200      	str	r2, [sp, #0]
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f0:	0022      	movs	r2, r4
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	0033      	movs	r3, r6
 80078f6:	f000 fceb 	bl	80082d0 <_dtoa_r>
 80078fa:	0005      	movs	r5, r0
 80078fc:	2f47      	cmp	r7, #71	; 0x47
 80078fe:	d102      	bne.n	8007906 <__cvt+0x5e>
 8007900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007902:	07db      	lsls	r3, r3, #31
 8007904:	d528      	bpl.n	8007958 <__cvt+0xb0>
 8007906:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007908:	18eb      	adds	r3, r5, r3
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	2f46      	cmp	r7, #70	; 0x46
 800790e:	d114      	bne.n	800793a <__cvt+0x92>
 8007910:	782b      	ldrb	r3, [r5, #0]
 8007912:	2b30      	cmp	r3, #48	; 0x30
 8007914:	d10c      	bne.n	8007930 <__cvt+0x88>
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	0020      	movs	r0, r4
 800791c:	0031      	movs	r1, r6
 800791e:	f7f8 fd9f 	bl	8000460 <__aeabi_dcmpeq>
 8007922:	2800      	cmp	r0, #0
 8007924:	d104      	bne.n	8007930 <__cvt+0x88>
 8007926:	2301      	movs	r3, #1
 8007928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	18d3      	adds	r3, r2, r3
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	0020      	movs	r0, r4
 8007940:	0031      	movs	r1, r6
 8007942:	f7f8 fd8d 	bl	8000460 <__aeabi_dcmpeq>
 8007946:	2800      	cmp	r0, #0
 8007948:	d001      	beq.n	800794e <__cvt+0xa6>
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	9309      	str	r3, [sp, #36]	; 0x24
 800794e:	2230      	movs	r2, #48	; 0x30
 8007950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007952:	9907      	ldr	r1, [sp, #28]
 8007954:	428b      	cmp	r3, r1
 8007956:	d306      	bcc.n	8007966 <__cvt+0xbe>
 8007958:	0028      	movs	r0, r5
 800795a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800795e:	1b5b      	subs	r3, r3, r5
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	b00b      	add	sp, #44	; 0x2c
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007966:	1c59      	adds	r1, r3, #1
 8007968:	9109      	str	r1, [sp, #36]	; 0x24
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e7f0      	b.n	8007950 <__cvt+0xa8>

0800796e <__exponent>:
 800796e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007970:	1c83      	adds	r3, r0, #2
 8007972:	b087      	sub	sp, #28
 8007974:	9303      	str	r3, [sp, #12]
 8007976:	0005      	movs	r5, r0
 8007978:	000c      	movs	r4, r1
 800797a:	232b      	movs	r3, #43	; 0x2b
 800797c:	7002      	strb	r2, [r0, #0]
 800797e:	2900      	cmp	r1, #0
 8007980:	da01      	bge.n	8007986 <__exponent+0x18>
 8007982:	424c      	negs	r4, r1
 8007984:	3302      	adds	r3, #2
 8007986:	706b      	strb	r3, [r5, #1]
 8007988:	2c09      	cmp	r4, #9
 800798a:	dd31      	ble.n	80079f0 <__exponent+0x82>
 800798c:	270a      	movs	r7, #10
 800798e:	ab04      	add	r3, sp, #16
 8007990:	1dde      	adds	r6, r3, #7
 8007992:	0020      	movs	r0, r4
 8007994:	0039      	movs	r1, r7
 8007996:	9601      	str	r6, [sp, #4]
 8007998:	f7f8 fd4c 	bl	8000434 <__aeabi_idivmod>
 800799c:	3e01      	subs	r6, #1
 800799e:	3130      	adds	r1, #48	; 0x30
 80079a0:	0020      	movs	r0, r4
 80079a2:	7031      	strb	r1, [r6, #0]
 80079a4:	0039      	movs	r1, r7
 80079a6:	9402      	str	r4, [sp, #8]
 80079a8:	f7f8 fc5e 	bl	8000268 <__divsi3>
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	0004      	movs	r4, r0
 80079b0:	2b63      	cmp	r3, #99	; 0x63
 80079b2:	dcee      	bgt.n	8007992 <__exponent+0x24>
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	3430      	adds	r4, #48	; 0x30
 80079b8:	1e9a      	subs	r2, r3, #2
 80079ba:	0013      	movs	r3, r2
 80079bc:	9903      	ldr	r1, [sp, #12]
 80079be:	7014      	strb	r4, [r2, #0]
 80079c0:	a804      	add	r0, sp, #16
 80079c2:	3007      	adds	r0, #7
 80079c4:	4298      	cmp	r0, r3
 80079c6:	d80e      	bhi.n	80079e6 <__exponent+0x78>
 80079c8:	ab04      	add	r3, sp, #16
 80079ca:	3307      	adds	r3, #7
 80079cc:	2000      	movs	r0, #0
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d804      	bhi.n	80079dc <__exponent+0x6e>
 80079d2:	ab04      	add	r3, sp, #16
 80079d4:	3009      	adds	r0, #9
 80079d6:	18c0      	adds	r0, r0, r3
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	1ac0      	subs	r0, r0, r3
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	1818      	adds	r0, r3, r0
 80079e0:	1b40      	subs	r0, r0, r5
 80079e2:	b007      	add	sp, #28
 80079e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e6:	7818      	ldrb	r0, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	7008      	strb	r0, [r1, #0]
 80079ec:	3101      	adds	r1, #1
 80079ee:	e7e7      	b.n	80079c0 <__exponent+0x52>
 80079f0:	2330      	movs	r3, #48	; 0x30
 80079f2:	18e4      	adds	r4, r4, r3
 80079f4:	70ab      	strb	r3, [r5, #2]
 80079f6:	1d28      	adds	r0, r5, #4
 80079f8:	70ec      	strb	r4, [r5, #3]
 80079fa:	e7f1      	b.n	80079e0 <__exponent+0x72>

080079fc <_printf_float>:
 80079fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fe:	b095      	sub	sp, #84	; 0x54
 8007a00:	000c      	movs	r4, r1
 8007a02:	9209      	str	r2, [sp, #36]	; 0x24
 8007a04:	001e      	movs	r6, r3
 8007a06:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007a08:	0007      	movs	r7, r0
 8007a0a:	f001 fb7d 	bl	8009108 <_localeconv_r>
 8007a0e:	6803      	ldr	r3, [r0, #0]
 8007a10:	0018      	movs	r0, r3
 8007a12:	930c      	str	r3, [sp, #48]	; 0x30
 8007a14:	f7f8 fb82 	bl	800011c <strlen>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9312      	str	r3, [sp, #72]	; 0x48
 8007a1c:	7e23      	ldrb	r3, [r4, #24]
 8007a1e:	2207      	movs	r2, #7
 8007a20:	930a      	str	r3, [sp, #40]	; 0x28
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	900e      	str	r0, [sp, #56]	; 0x38
 8007a26:	930d      	str	r3, [sp, #52]	; 0x34
 8007a28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	05c9      	lsls	r1, r1, #23
 8007a2e:	d547      	bpl.n	8007ac0 <_printf_float+0xc4>
 8007a30:	189b      	adds	r3, r3, r2
 8007a32:	4393      	bics	r3, r2
 8007a34:	001a      	movs	r2, r3
 8007a36:	3208      	adds	r2, #8
 8007a38:	602a      	str	r2, [r5, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	64a2      	str	r2, [r4, #72]	; 0x48
 8007a40:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a42:	2201      	movs	r2, #1
 8007a44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a4a:	006b      	lsls	r3, r5, #1
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a52:	4ba7      	ldr	r3, [pc, #668]	; (8007cf0 <_printf_float+0x2f4>)
 8007a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a56:	4252      	negs	r2, r2
 8007a58:	f7fa fb86 	bl	8002168 <__aeabi_dcmpun>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d131      	bne.n	8007ac4 <_printf_float+0xc8>
 8007a60:	2201      	movs	r2, #1
 8007a62:	4ba3      	ldr	r3, [pc, #652]	; (8007cf0 <_printf_float+0x2f4>)
 8007a64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a68:	4252      	negs	r2, r2
 8007a6a:	f7f8 fd09 	bl	8000480 <__aeabi_dcmple>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d128      	bne.n	8007ac4 <_printf_float+0xc8>
 8007a72:	2200      	movs	r2, #0
 8007a74:	2300      	movs	r3, #0
 8007a76:	0029      	movs	r1, r5
 8007a78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a7a:	f7f8 fcf7 	bl	800046c <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d003      	beq.n	8007a8a <_printf_float+0x8e>
 8007a82:	0023      	movs	r3, r4
 8007a84:	222d      	movs	r2, #45	; 0x2d
 8007a86:	3343      	adds	r3, #67	; 0x43
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8c:	4d99      	ldr	r5, [pc, #612]	; (8007cf4 <_printf_float+0x2f8>)
 8007a8e:	2b47      	cmp	r3, #71	; 0x47
 8007a90:	d900      	bls.n	8007a94 <_printf_float+0x98>
 8007a92:	4d99      	ldr	r5, [pc, #612]	; (8007cf8 <_printf_float+0x2fc>)
 8007a94:	2303      	movs	r3, #3
 8007a96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a98:	6123      	str	r3, [r4, #16]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	439a      	bics	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	0021      	movs	r1, r4
 8007aa8:	0038      	movs	r0, r7
 8007aaa:	9600      	str	r6, [sp, #0]
 8007aac:	aa13      	add	r2, sp, #76	; 0x4c
 8007aae:	f000 f9e7 	bl	8007e80 <_printf_common>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d000      	beq.n	8007ab8 <_printf_float+0xbc>
 8007ab6:	e0a2      	b.n	8007bfe <_printf_float+0x202>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	4240      	negs	r0, r0
 8007abc:	b015      	add	sp, #84	; 0x54
 8007abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	e7b6      	b.n	8007a32 <_printf_float+0x36>
 8007ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac6:	002b      	movs	r3, r5
 8007ac8:	0010      	movs	r0, r2
 8007aca:	0029      	movs	r1, r5
 8007acc:	f7fa fb4c 	bl	8002168 <__aeabi_dcmpun>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d00b      	beq.n	8007aec <_printf_float+0xf0>
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	da03      	bge.n	8007ae0 <_printf_float+0xe4>
 8007ad8:	0023      	movs	r3, r4
 8007ada:	222d      	movs	r2, #45	; 0x2d
 8007adc:	3343      	adds	r3, #67	; 0x43
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae2:	4d86      	ldr	r5, [pc, #536]	; (8007cfc <_printf_float+0x300>)
 8007ae4:	2b47      	cmp	r3, #71	; 0x47
 8007ae6:	d9d5      	bls.n	8007a94 <_printf_float+0x98>
 8007ae8:	4d85      	ldr	r5, [pc, #532]	; (8007d00 <_printf_float+0x304>)
 8007aea:	e7d3      	b.n	8007a94 <_printf_float+0x98>
 8007aec:	2220      	movs	r2, #32
 8007aee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	4391      	bics	r1, r2
 8007af4:	910f      	str	r1, [sp, #60]	; 0x3c
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	d149      	bne.n	8007b8e <_printf_float+0x192>
 8007afa:	3307      	adds	r3, #7
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	2380      	movs	r3, #128	; 0x80
 8007b00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4313      	orrs	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	9206      	str	r2, [sp, #24]
 8007b0a:	aa12      	add	r2, sp, #72	; 0x48
 8007b0c:	9205      	str	r2, [sp, #20]
 8007b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b10:	a908      	add	r1, sp, #32
 8007b12:	9204      	str	r2, [sp, #16]
 8007b14:	aa11      	add	r2, sp, #68	; 0x44
 8007b16:	9203      	str	r2, [sp, #12]
 8007b18:	2223      	movs	r2, #35	; 0x23
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	6863      	ldr	r3, [r4, #4]
 8007b20:	1852      	adds	r2, r2, r1
 8007b22:	9202      	str	r2, [sp, #8]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	0038      	movs	r0, r7
 8007b28:	002b      	movs	r3, r5
 8007b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b2c:	f7ff febc 	bl	80078a8 <__cvt>
 8007b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b32:	0005      	movs	r5, r0
 8007b34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b36:	2b47      	cmp	r3, #71	; 0x47
 8007b38:	d108      	bne.n	8007b4c <_printf_float+0x150>
 8007b3a:	1ccb      	adds	r3, r1, #3
 8007b3c:	db02      	blt.n	8007b44 <_printf_float+0x148>
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	4299      	cmp	r1, r3
 8007b42:	dd48      	ble.n	8007bd6 <_printf_float+0x1da>
 8007b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b46:	3b02      	subs	r3, #2
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4e:	2b65      	cmp	r3, #101	; 0x65
 8007b50:	d824      	bhi.n	8007b9c <_printf_float+0x1a0>
 8007b52:	0020      	movs	r0, r4
 8007b54:	001a      	movs	r2, r3
 8007b56:	3901      	subs	r1, #1
 8007b58:	3050      	adds	r0, #80	; 0x50
 8007b5a:	9111      	str	r1, [sp, #68]	; 0x44
 8007b5c:	f7ff ff07 	bl	800796e <__exponent>
 8007b60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b62:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b64:	1813      	adds	r3, r2, r0
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	2a01      	cmp	r2, #1
 8007b6a:	dc02      	bgt.n	8007b72 <_printf_float+0x176>
 8007b6c:	6822      	ldr	r2, [r4, #0]
 8007b6e:	07d2      	lsls	r2, r2, #31
 8007b70:	d501      	bpl.n	8007b76 <_printf_float+0x17a>
 8007b72:	3301      	adds	r3, #1
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	2323      	movs	r3, #35	; 0x23
 8007b78:	aa08      	add	r2, sp, #32
 8007b7a:	189b      	adds	r3, r3, r2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d100      	bne.n	8007b84 <_printf_float+0x188>
 8007b82:	e78f      	b.n	8007aa4 <_printf_float+0xa8>
 8007b84:	0023      	movs	r3, r4
 8007b86:	222d      	movs	r2, #45	; 0x2d
 8007b88:	3343      	adds	r3, #67	; 0x43
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e78a      	b.n	8007aa4 <_printf_float+0xa8>
 8007b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b90:	2a47      	cmp	r2, #71	; 0x47
 8007b92:	d1b4      	bne.n	8007afe <_printf_float+0x102>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1b2      	bne.n	8007afe <_printf_float+0x102>
 8007b98:	3301      	adds	r3, #1
 8007b9a:	e7af      	b.n	8007afc <_printf_float+0x100>
 8007b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9e:	2b66      	cmp	r3, #102	; 0x66
 8007ba0:	d11b      	bne.n	8007bda <_printf_float+0x1de>
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	dd0d      	ble.n	8007bc4 <_printf_float+0x1c8>
 8007ba8:	6121      	str	r1, [r4, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <_printf_float+0x1b8>
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	07d2      	lsls	r2, r2, #31
 8007bb2:	d502      	bpl.n	8007bba <_printf_float+0x1be>
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	1859      	adds	r1, r3, r1
 8007bb8:	6121      	str	r1, [r4, #16]
 8007bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc2:	e7d8      	b.n	8007b76 <_printf_float+0x17a>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <_printf_float+0x1d4>
 8007bc8:	2201      	movs	r2, #1
 8007bca:	6821      	ldr	r1, [r4, #0]
 8007bcc:	4211      	tst	r1, r2
 8007bce:	d000      	beq.n	8007bd2 <_printf_float+0x1d6>
 8007bd0:	1c9a      	adds	r2, r3, #2
 8007bd2:	6122      	str	r2, [r4, #16]
 8007bd4:	e7f1      	b.n	8007bba <_printf_float+0x1be>
 8007bd6:	2367      	movs	r3, #103	; 0x67
 8007bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bde:	4293      	cmp	r3, r2
 8007be0:	db06      	blt.n	8007bf0 <_printf_float+0x1f4>
 8007be2:	6822      	ldr	r2, [r4, #0]
 8007be4:	6123      	str	r3, [r4, #16]
 8007be6:	07d2      	lsls	r2, r2, #31
 8007be8:	d5e7      	bpl.n	8007bba <_printf_float+0x1be>
 8007bea:	3301      	adds	r3, #1
 8007bec:	6123      	str	r3, [r4, #16]
 8007bee:	e7e4      	b.n	8007bba <_printf_float+0x1be>
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dc01      	bgt.n	8007bfa <_printf_float+0x1fe>
 8007bf6:	1849      	adds	r1, r1, r1
 8007bf8:	1ac9      	subs	r1, r1, r3
 8007bfa:	1852      	adds	r2, r2, r1
 8007bfc:	e7e9      	b.n	8007bd2 <_printf_float+0x1d6>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	0553      	lsls	r3, r2, #21
 8007c02:	d407      	bmi.n	8007c14 <_printf_float+0x218>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	002a      	movs	r2, r5
 8007c08:	0038      	movs	r0, r7
 8007c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c0c:	47b0      	blx	r6
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d128      	bne.n	8007c64 <_printf_float+0x268>
 8007c12:	e751      	b.n	8007ab8 <_printf_float+0xbc>
 8007c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c16:	2b65      	cmp	r3, #101	; 0x65
 8007c18:	d800      	bhi.n	8007c1c <_printf_float+0x220>
 8007c1a:	e0e1      	b.n	8007de0 <_printf_float+0x3e4>
 8007c1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007c1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	f7f8 fc1c 	bl	8000460 <__aeabi_dcmpeq>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d031      	beq.n	8007c90 <_printf_float+0x294>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	0038      	movs	r0, r7
 8007c30:	4a34      	ldr	r2, [pc, #208]	; (8007d04 <_printf_float+0x308>)
 8007c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c34:	47b0      	blx	r6
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d100      	bne.n	8007c3c <_printf_float+0x240>
 8007c3a:	e73d      	b.n	8007ab8 <_printf_float+0xbc>
 8007c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c40:	4293      	cmp	r3, r2
 8007c42:	db02      	blt.n	8007c4a <_printf_float+0x24e>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d50c      	bpl.n	8007c64 <_printf_float+0x268>
 8007c4a:	0038      	movs	r0, r7
 8007c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c52:	47b0      	blx	r6
 8007c54:	2500      	movs	r5, #0
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d100      	bne.n	8007c5c <_printf_float+0x260>
 8007c5a:	e72d      	b.n	8007ab8 <_printf_float+0xbc>
 8007c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dc0a      	bgt.n	8007c7a <_printf_float+0x27e>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	079b      	lsls	r3, r3, #30
 8007c68:	d500      	bpl.n	8007c6c <_printf_float+0x270>
 8007c6a:	e106      	b.n	8007e7a <_printf_float+0x47e>
 8007c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c6e:	68e0      	ldr	r0, [r4, #12]
 8007c70:	4298      	cmp	r0, r3
 8007c72:	db00      	blt.n	8007c76 <_printf_float+0x27a>
 8007c74:	e722      	b.n	8007abc <_printf_float+0xc0>
 8007c76:	0018      	movs	r0, r3
 8007c78:	e720      	b.n	8007abc <_printf_float+0xc0>
 8007c7a:	0022      	movs	r2, r4
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	0038      	movs	r0, r7
 8007c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c82:	321a      	adds	r2, #26
 8007c84:	47b0      	blx	r6
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	d100      	bne.n	8007c8c <_printf_float+0x290>
 8007c8a:	e715      	b.n	8007ab8 <_printf_float+0xbc>
 8007c8c:	3501      	adds	r5, #1
 8007c8e:	e7e5      	b.n	8007c5c <_printf_float+0x260>
 8007c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dc38      	bgt.n	8007d08 <_printf_float+0x30c>
 8007c96:	2301      	movs	r3, #1
 8007c98:	0038      	movs	r0, r7
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	; (8007d04 <_printf_float+0x308>)
 8007c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c9e:	47b0      	blx	r6
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d100      	bne.n	8007ca6 <_printf_float+0x2aa>
 8007ca4:	e708      	b.n	8007ab8 <_printf_float+0xbc>
 8007ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007caa:	4313      	orrs	r3, r2
 8007cac:	d102      	bne.n	8007cb4 <_printf_float+0x2b8>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	07db      	lsls	r3, r3, #31
 8007cb2:	d5d7      	bpl.n	8007c64 <_printf_float+0x268>
 8007cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cb6:	0038      	movs	r0, r7
 8007cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cbc:	47b0      	blx	r6
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d100      	bne.n	8007cc4 <_printf_float+0x2c8>
 8007cc2:	e6f9      	b.n	8007ab8 <_printf_float+0xbc>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ccc:	425b      	negs	r3, r3
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	dc01      	bgt.n	8007cd6 <_printf_float+0x2da>
 8007cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cd4:	e797      	b.n	8007c06 <_printf_float+0x20a>
 8007cd6:	0022      	movs	r2, r4
 8007cd8:	2301      	movs	r3, #1
 8007cda:	0038      	movs	r0, r7
 8007cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cde:	321a      	adds	r2, #26
 8007ce0:	47b0      	blx	r6
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	d100      	bne.n	8007ce8 <_printf_float+0x2ec>
 8007ce6:	e6e7      	b.n	8007ab8 <_printf_float+0xbc>
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	3301      	adds	r3, #1
 8007cec:	e7eb      	b.n	8007cc6 <_printf_float+0x2ca>
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	7fefffff 	.word	0x7fefffff
 8007cf4:	0800a644 	.word	0x0800a644
 8007cf8:	0800a648 	.word	0x0800a648
 8007cfc:	0800a64c 	.word	0x0800a64c
 8007d00:	0800a650 	.word	0x0800a650
 8007d04:	0800a654 	.word	0x0800a654
 8007d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	dd00      	ble.n	8007d14 <_printf_float+0x318>
 8007d12:	930a      	str	r3, [sp, #40]	; 0x28
 8007d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	dc3c      	bgt.n	8007d94 <_printf_float+0x398>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d20:	43db      	mvns	r3, r3
 8007d22:	17db      	asrs	r3, r3, #31
 8007d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2e:	4013      	ands	r3, r2
 8007d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d36:	4293      	cmp	r3, r2
 8007d38:	dc34      	bgt.n	8007da4 <_printf_float+0x3a8>
 8007d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	db3d      	blt.n	8007dbe <_printf_float+0x3c2>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	07db      	lsls	r3, r3, #31
 8007d46:	d43a      	bmi.n	8007dbe <_printf_float+0x3c2>
 8007d48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	1a52      	subs	r2, r2, r1
 8007d52:	920a      	str	r2, [sp, #40]	; 0x28
 8007d54:	429a      	cmp	r2, r3
 8007d56:	dd00      	ble.n	8007d5a <_printf_float+0x35e>
 8007d58:	930a      	str	r3, [sp, #40]	; 0x28
 8007d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc36      	bgt.n	8007dce <_printf_float+0x3d2>
 8007d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d62:	2500      	movs	r5, #0
 8007d64:	43db      	mvns	r3, r3
 8007d66:	17db      	asrs	r3, r3, #31
 8007d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d74:	400a      	ands	r2, r1
 8007d76:	1a9b      	subs	r3, r3, r2
 8007d78:	42ab      	cmp	r3, r5
 8007d7a:	dc00      	bgt.n	8007d7e <_printf_float+0x382>
 8007d7c:	e772      	b.n	8007c64 <_printf_float+0x268>
 8007d7e:	0022      	movs	r2, r4
 8007d80:	2301      	movs	r3, #1
 8007d82:	0038      	movs	r0, r7
 8007d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d86:	321a      	adds	r2, #26
 8007d88:	47b0      	blx	r6
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	d100      	bne.n	8007d90 <_printf_float+0x394>
 8007d8e:	e693      	b.n	8007ab8 <_printf_float+0xbc>
 8007d90:	3501      	adds	r5, #1
 8007d92:	e7ea      	b.n	8007d6a <_printf_float+0x36e>
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	002a      	movs	r2, r5
 8007d98:	0038      	movs	r0, r7
 8007d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d9c:	47b0      	blx	r6
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	d1bb      	bne.n	8007d1a <_printf_float+0x31e>
 8007da2:	e689      	b.n	8007ab8 <_printf_float+0xbc>
 8007da4:	0022      	movs	r2, r4
 8007da6:	2301      	movs	r3, #1
 8007da8:	0038      	movs	r0, r7
 8007daa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dac:	321a      	adds	r2, #26
 8007dae:	47b0      	blx	r6
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d100      	bne.n	8007db6 <_printf_float+0x3ba>
 8007db4:	e680      	b.n	8007ab8 <_printf_float+0xbc>
 8007db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db8:	3301      	adds	r3, #1
 8007dba:	930d      	str	r3, [sp, #52]	; 0x34
 8007dbc:	e7b3      	b.n	8007d26 <_printf_float+0x32a>
 8007dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc0:	0038      	movs	r0, r7
 8007dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dc6:	47b0      	blx	r6
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d1bd      	bne.n	8007d48 <_printf_float+0x34c>
 8007dcc:	e674      	b.n	8007ab8 <_printf_float+0xbc>
 8007dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd0:	0038      	movs	r0, r7
 8007dd2:	18ea      	adds	r2, r5, r3
 8007dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd8:	47b0      	blx	r6
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d1c0      	bne.n	8007d60 <_printf_float+0x364>
 8007dde:	e66b      	b.n	8007ab8 <_printf_float+0xbc>
 8007de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	dc02      	bgt.n	8007dec <_printf_float+0x3f0>
 8007de6:	2301      	movs	r3, #1
 8007de8:	421a      	tst	r2, r3
 8007dea:	d034      	beq.n	8007e56 <_printf_float+0x45a>
 8007dec:	2301      	movs	r3, #1
 8007dee:	002a      	movs	r2, r5
 8007df0:	0038      	movs	r0, r7
 8007df2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df4:	47b0      	blx	r6
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d100      	bne.n	8007dfc <_printf_float+0x400>
 8007dfa:	e65d      	b.n	8007ab8 <_printf_float+0xbc>
 8007dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dfe:	0038      	movs	r0, r7
 8007e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e04:	47b0      	blx	r6
 8007e06:	1c43      	adds	r3, r0, #1
 8007e08:	d100      	bne.n	8007e0c <_printf_float+0x410>
 8007e0a:	e655      	b.n	8007ab8 <_printf_float+0xbc>
 8007e0c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007e0e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	f7f8 fb24 	bl	8000460 <__aeabi_dcmpeq>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d11a      	bne.n	8007e52 <_printf_float+0x456>
 8007e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e1e:	1c6a      	adds	r2, r5, #1
 8007e20:	3b01      	subs	r3, #1
 8007e22:	0038      	movs	r0, r7
 8007e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e26:	47b0      	blx	r6
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d10e      	bne.n	8007e4a <_printf_float+0x44e>
 8007e2c:	e644      	b.n	8007ab8 <_printf_float+0xbc>
 8007e2e:	0022      	movs	r2, r4
 8007e30:	2301      	movs	r3, #1
 8007e32:	0038      	movs	r0, r7
 8007e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e36:	321a      	adds	r2, #26
 8007e38:	47b0      	blx	r6
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	d100      	bne.n	8007e40 <_printf_float+0x444>
 8007e3e:	e63b      	b.n	8007ab8 <_printf_float+0xbc>
 8007e40:	3501      	adds	r5, #1
 8007e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e44:	3b01      	subs	r3, #1
 8007e46:	42ab      	cmp	r3, r5
 8007e48:	dcf1      	bgt.n	8007e2e <_printf_float+0x432>
 8007e4a:	0022      	movs	r2, r4
 8007e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4e:	3250      	adds	r2, #80	; 0x50
 8007e50:	e6da      	b.n	8007c08 <_printf_float+0x20c>
 8007e52:	2500      	movs	r5, #0
 8007e54:	e7f5      	b.n	8007e42 <_printf_float+0x446>
 8007e56:	002a      	movs	r2, r5
 8007e58:	e7e3      	b.n	8007e22 <_printf_float+0x426>
 8007e5a:	0022      	movs	r2, r4
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	0038      	movs	r0, r7
 8007e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e62:	3219      	adds	r2, #25
 8007e64:	47b0      	blx	r6
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d100      	bne.n	8007e6c <_printf_float+0x470>
 8007e6a:	e625      	b.n	8007ab8 <_printf_float+0xbc>
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dcf0      	bgt.n	8007e5a <_printf_float+0x45e>
 8007e78:	e6f8      	b.n	8007c6c <_printf_float+0x270>
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	e7f7      	b.n	8007e6e <_printf_float+0x472>
 8007e7e:	46c0      	nop			; (mov r8, r8)

08007e80 <_printf_common>:
 8007e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e82:	0015      	movs	r5, r2
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	688a      	ldr	r2, [r1, #8]
 8007e88:	690b      	ldr	r3, [r1, #16]
 8007e8a:	000c      	movs	r4, r1
 8007e8c:	9000      	str	r0, [sp, #0]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	da00      	bge.n	8007e94 <_printf_common+0x14>
 8007e92:	0013      	movs	r3, r2
 8007e94:	0022      	movs	r2, r4
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	3243      	adds	r2, #67	; 0x43
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	d001      	beq.n	8007ea4 <_printf_common+0x24>
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	602b      	str	r3, [r5, #0]
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	069b      	lsls	r3, r3, #26
 8007ea8:	d502      	bpl.n	8007eb0 <_printf_common+0x30>
 8007eaa:	682b      	ldr	r3, [r5, #0]
 8007eac:	3302      	adds	r3, #2
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	6822      	ldr	r2, [r4, #0]
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	0017      	movs	r7, r2
 8007eb6:	401f      	ands	r7, r3
 8007eb8:	421a      	tst	r2, r3
 8007eba:	d027      	beq.n	8007f0c <_printf_common+0x8c>
 8007ebc:	0023      	movs	r3, r4
 8007ebe:	3343      	adds	r3, #67	; 0x43
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	1e5a      	subs	r2, r3, #1
 8007ec4:	4193      	sbcs	r3, r2
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	0692      	lsls	r2, r2, #26
 8007eca:	d430      	bmi.n	8007f2e <_printf_common+0xae>
 8007ecc:	0022      	movs	r2, r4
 8007ece:	9901      	ldr	r1, [sp, #4]
 8007ed0:	9800      	ldr	r0, [sp, #0]
 8007ed2:	9e08      	ldr	r6, [sp, #32]
 8007ed4:	3243      	adds	r2, #67	; 0x43
 8007ed6:	47b0      	blx	r6
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d025      	beq.n	8007f28 <_printf_common+0xa8>
 8007edc:	2306      	movs	r3, #6
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	682a      	ldr	r2, [r5, #0]
 8007ee2:	68e1      	ldr	r1, [r4, #12]
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	4003      	ands	r3, r0
 8007ee8:	2b04      	cmp	r3, #4
 8007eea:	d103      	bne.n	8007ef4 <_printf_common+0x74>
 8007eec:	1a8d      	subs	r5, r1, r2
 8007eee:	43eb      	mvns	r3, r5
 8007ef0:	17db      	asrs	r3, r3, #31
 8007ef2:	401d      	ands	r5, r3
 8007ef4:	68a3      	ldr	r3, [r4, #8]
 8007ef6:	6922      	ldr	r2, [r4, #16]
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	dd01      	ble.n	8007f00 <_printf_common+0x80>
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	18ed      	adds	r5, r5, r3
 8007f00:	2700      	movs	r7, #0
 8007f02:	42bd      	cmp	r5, r7
 8007f04:	d120      	bne.n	8007f48 <_printf_common+0xc8>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e010      	b.n	8007f2c <_printf_common+0xac>
 8007f0a:	3701      	adds	r7, #1
 8007f0c:	68e3      	ldr	r3, [r4, #12]
 8007f0e:	682a      	ldr	r2, [r5, #0]
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	42bb      	cmp	r3, r7
 8007f14:	ddd2      	ble.n	8007ebc <_printf_common+0x3c>
 8007f16:	0022      	movs	r2, r4
 8007f18:	2301      	movs	r3, #1
 8007f1a:	9901      	ldr	r1, [sp, #4]
 8007f1c:	9800      	ldr	r0, [sp, #0]
 8007f1e:	9e08      	ldr	r6, [sp, #32]
 8007f20:	3219      	adds	r2, #25
 8007f22:	47b0      	blx	r6
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d1f0      	bne.n	8007f0a <_printf_common+0x8a>
 8007f28:	2001      	movs	r0, #1
 8007f2a:	4240      	negs	r0, r0
 8007f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f2e:	2030      	movs	r0, #48	; 0x30
 8007f30:	18e1      	adds	r1, r4, r3
 8007f32:	3143      	adds	r1, #67	; 0x43
 8007f34:	7008      	strb	r0, [r1, #0]
 8007f36:	0021      	movs	r1, r4
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	3145      	adds	r1, #69	; 0x45
 8007f3c:	7809      	ldrb	r1, [r1, #0]
 8007f3e:	18a2      	adds	r2, r4, r2
 8007f40:	3243      	adds	r2, #67	; 0x43
 8007f42:	3302      	adds	r3, #2
 8007f44:	7011      	strb	r1, [r2, #0]
 8007f46:	e7c1      	b.n	8007ecc <_printf_common+0x4c>
 8007f48:	0022      	movs	r2, r4
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	9901      	ldr	r1, [sp, #4]
 8007f4e:	9800      	ldr	r0, [sp, #0]
 8007f50:	9e08      	ldr	r6, [sp, #32]
 8007f52:	321a      	adds	r2, #26
 8007f54:	47b0      	blx	r6
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d0e6      	beq.n	8007f28 <_printf_common+0xa8>
 8007f5a:	3701      	adds	r7, #1
 8007f5c:	e7d1      	b.n	8007f02 <_printf_common+0x82>
	...

08007f60 <_printf_i>:
 8007f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f62:	b08b      	sub	sp, #44	; 0x2c
 8007f64:	9206      	str	r2, [sp, #24]
 8007f66:	000a      	movs	r2, r1
 8007f68:	3243      	adds	r2, #67	; 0x43
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	9005      	str	r0, [sp, #20]
 8007f6e:	9204      	str	r2, [sp, #16]
 8007f70:	7e0a      	ldrb	r2, [r1, #24]
 8007f72:	000c      	movs	r4, r1
 8007f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f76:	2a78      	cmp	r2, #120	; 0x78
 8007f78:	d807      	bhi.n	8007f8a <_printf_i+0x2a>
 8007f7a:	2a62      	cmp	r2, #98	; 0x62
 8007f7c:	d809      	bhi.n	8007f92 <_printf_i+0x32>
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	d100      	bne.n	8007f84 <_printf_i+0x24>
 8007f82:	e0c1      	b.n	8008108 <_printf_i+0x1a8>
 8007f84:	2a58      	cmp	r2, #88	; 0x58
 8007f86:	d100      	bne.n	8007f8a <_printf_i+0x2a>
 8007f88:	e08c      	b.n	80080a4 <_printf_i+0x144>
 8007f8a:	0026      	movs	r6, r4
 8007f8c:	3642      	adds	r6, #66	; 0x42
 8007f8e:	7032      	strb	r2, [r6, #0]
 8007f90:	e022      	b.n	8007fd8 <_printf_i+0x78>
 8007f92:	0010      	movs	r0, r2
 8007f94:	3863      	subs	r0, #99	; 0x63
 8007f96:	2815      	cmp	r0, #21
 8007f98:	d8f7      	bhi.n	8007f8a <_printf_i+0x2a>
 8007f9a:	f7f8 f8d1 	bl	8000140 <__gnu_thumb1_case_shi>
 8007f9e:	0016      	.short	0x0016
 8007fa0:	fff6001f 	.word	0xfff6001f
 8007fa4:	fff6fff6 	.word	0xfff6fff6
 8007fa8:	001ffff6 	.word	0x001ffff6
 8007fac:	fff6fff6 	.word	0xfff6fff6
 8007fb0:	fff6fff6 	.word	0xfff6fff6
 8007fb4:	003600a8 	.word	0x003600a8
 8007fb8:	fff6009a 	.word	0xfff6009a
 8007fbc:	00b9fff6 	.word	0x00b9fff6
 8007fc0:	0036fff6 	.word	0x0036fff6
 8007fc4:	fff6fff6 	.word	0xfff6fff6
 8007fc8:	009e      	.short	0x009e
 8007fca:	0026      	movs	r6, r4
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	3642      	adds	r6, #66	; 0x42
 8007fd0:	1d11      	adds	r1, r2, #4
 8007fd2:	6019      	str	r1, [r3, #0]
 8007fd4:	6813      	ldr	r3, [r2, #0]
 8007fd6:	7033      	strb	r3, [r6, #0]
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0a7      	b.n	800812c <_printf_i+0x1cc>
 8007fdc:	6808      	ldr	r0, [r1, #0]
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	1d0a      	adds	r2, r1, #4
 8007fe2:	0605      	lsls	r5, r0, #24
 8007fe4:	d50b      	bpl.n	8007ffe <_printf_i+0x9e>
 8007fe6:	680d      	ldr	r5, [r1, #0]
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	2d00      	cmp	r5, #0
 8007fec:	da03      	bge.n	8007ff6 <_printf_i+0x96>
 8007fee:	232d      	movs	r3, #45	; 0x2d
 8007ff0:	9a04      	ldr	r2, [sp, #16]
 8007ff2:	426d      	negs	r5, r5
 8007ff4:	7013      	strb	r3, [r2, #0]
 8007ff6:	4b61      	ldr	r3, [pc, #388]	; (800817c <_printf_i+0x21c>)
 8007ff8:	270a      	movs	r7, #10
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	e01b      	b.n	8008036 <_printf_i+0xd6>
 8007ffe:	680d      	ldr	r5, [r1, #0]
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	0641      	lsls	r1, r0, #25
 8008004:	d5f1      	bpl.n	8007fea <_printf_i+0x8a>
 8008006:	b22d      	sxth	r5, r5
 8008008:	e7ef      	b.n	8007fea <_printf_i+0x8a>
 800800a:	680d      	ldr	r5, [r1, #0]
 800800c:	6819      	ldr	r1, [r3, #0]
 800800e:	1d08      	adds	r0, r1, #4
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	062e      	lsls	r6, r5, #24
 8008014:	d501      	bpl.n	800801a <_printf_i+0xba>
 8008016:	680d      	ldr	r5, [r1, #0]
 8008018:	e003      	b.n	8008022 <_printf_i+0xc2>
 800801a:	066d      	lsls	r5, r5, #25
 800801c:	d5fb      	bpl.n	8008016 <_printf_i+0xb6>
 800801e:	680d      	ldr	r5, [r1, #0]
 8008020:	b2ad      	uxth	r5, r5
 8008022:	4b56      	ldr	r3, [pc, #344]	; (800817c <_printf_i+0x21c>)
 8008024:	2708      	movs	r7, #8
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	2a6f      	cmp	r2, #111	; 0x6f
 800802a:	d000      	beq.n	800802e <_printf_i+0xce>
 800802c:	3702      	adds	r7, #2
 800802e:	0023      	movs	r3, r4
 8008030:	2200      	movs	r2, #0
 8008032:	3343      	adds	r3, #67	; 0x43
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	db03      	blt.n	8008046 <_printf_i+0xe6>
 800803e:	2204      	movs	r2, #4
 8008040:	6821      	ldr	r1, [r4, #0]
 8008042:	4391      	bics	r1, r2
 8008044:	6021      	str	r1, [r4, #0]
 8008046:	2d00      	cmp	r5, #0
 8008048:	d102      	bne.n	8008050 <_printf_i+0xf0>
 800804a:	9e04      	ldr	r6, [sp, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <_printf_i+0x10a>
 8008050:	9e04      	ldr	r6, [sp, #16]
 8008052:	0028      	movs	r0, r5
 8008054:	0039      	movs	r1, r7
 8008056:	f7f8 f903 	bl	8000260 <__aeabi_uidivmod>
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	3e01      	subs	r6, #1
 800805e:	5c5b      	ldrb	r3, [r3, r1]
 8008060:	7033      	strb	r3, [r6, #0]
 8008062:	002b      	movs	r3, r5
 8008064:	0005      	movs	r5, r0
 8008066:	429f      	cmp	r7, r3
 8008068:	d9f3      	bls.n	8008052 <_printf_i+0xf2>
 800806a:	2f08      	cmp	r7, #8
 800806c:	d109      	bne.n	8008082 <_printf_i+0x122>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	07db      	lsls	r3, r3, #31
 8008072:	d506      	bpl.n	8008082 <_printf_i+0x122>
 8008074:	6863      	ldr	r3, [r4, #4]
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	4293      	cmp	r3, r2
 800807a:	dc02      	bgt.n	8008082 <_printf_i+0x122>
 800807c:	2330      	movs	r3, #48	; 0x30
 800807e:	3e01      	subs	r6, #1
 8008080:	7033      	strb	r3, [r6, #0]
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	1b9b      	subs	r3, r3, r6
 8008086:	6123      	str	r3, [r4, #16]
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	0021      	movs	r1, r4
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	9805      	ldr	r0, [sp, #20]
 8008090:	9b06      	ldr	r3, [sp, #24]
 8008092:	aa09      	add	r2, sp, #36	; 0x24
 8008094:	f7ff fef4 	bl	8007e80 <_printf_common>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d14c      	bne.n	8008136 <_printf_i+0x1d6>
 800809c:	2001      	movs	r0, #1
 800809e:	4240      	negs	r0, r0
 80080a0:	b00b      	add	sp, #44	; 0x2c
 80080a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a4:	3145      	adds	r1, #69	; 0x45
 80080a6:	700a      	strb	r2, [r1, #0]
 80080a8:	4a34      	ldr	r2, [pc, #208]	; (800817c <_printf_i+0x21c>)
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	6821      	ldr	r1, [r4, #0]
 80080b0:	ca20      	ldmia	r2!, {r5}
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	0608      	lsls	r0, r1, #24
 80080b6:	d516      	bpl.n	80080e6 <_printf_i+0x186>
 80080b8:	07cb      	lsls	r3, r1, #31
 80080ba:	d502      	bpl.n	80080c2 <_printf_i+0x162>
 80080bc:	2320      	movs	r3, #32
 80080be:	4319      	orrs	r1, r3
 80080c0:	6021      	str	r1, [r4, #0]
 80080c2:	2710      	movs	r7, #16
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	d1b2      	bne.n	800802e <_printf_i+0xce>
 80080c8:	2320      	movs	r3, #32
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	439a      	bics	r2, r3
 80080ce:	6022      	str	r2, [r4, #0]
 80080d0:	e7ad      	b.n	800802e <_printf_i+0xce>
 80080d2:	2220      	movs	r2, #32
 80080d4:	6809      	ldr	r1, [r1, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	0022      	movs	r2, r4
 80080dc:	2178      	movs	r1, #120	; 0x78
 80080de:	3245      	adds	r2, #69	; 0x45
 80080e0:	7011      	strb	r1, [r2, #0]
 80080e2:	4a27      	ldr	r2, [pc, #156]	; (8008180 <_printf_i+0x220>)
 80080e4:	e7e1      	b.n	80080aa <_printf_i+0x14a>
 80080e6:	0648      	lsls	r0, r1, #25
 80080e8:	d5e6      	bpl.n	80080b8 <_printf_i+0x158>
 80080ea:	b2ad      	uxth	r5, r5
 80080ec:	e7e4      	b.n	80080b8 <_printf_i+0x158>
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	680d      	ldr	r5, [r1, #0]
 80080f2:	1d10      	adds	r0, r2, #4
 80080f4:	6949      	ldr	r1, [r1, #20]
 80080f6:	6018      	str	r0, [r3, #0]
 80080f8:	6813      	ldr	r3, [r2, #0]
 80080fa:	062e      	lsls	r6, r5, #24
 80080fc:	d501      	bpl.n	8008102 <_printf_i+0x1a2>
 80080fe:	6019      	str	r1, [r3, #0]
 8008100:	e002      	b.n	8008108 <_printf_i+0x1a8>
 8008102:	066d      	lsls	r5, r5, #25
 8008104:	d5fb      	bpl.n	80080fe <_printf_i+0x19e>
 8008106:	8019      	strh	r1, [r3, #0]
 8008108:	2300      	movs	r3, #0
 800810a:	9e04      	ldr	r6, [sp, #16]
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	e7bb      	b.n	8008088 <_printf_i+0x128>
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	1d11      	adds	r1, r2, #4
 8008114:	6019      	str	r1, [r3, #0]
 8008116:	6816      	ldr	r6, [r2, #0]
 8008118:	2100      	movs	r1, #0
 800811a:	0030      	movs	r0, r6
 800811c:	6862      	ldr	r2, [r4, #4]
 800811e:	f001 f805 	bl	800912c <memchr>
 8008122:	2800      	cmp	r0, #0
 8008124:	d001      	beq.n	800812a <_printf_i+0x1ca>
 8008126:	1b80      	subs	r0, r0, r6
 8008128:	6060      	str	r0, [r4, #4]
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	2300      	movs	r3, #0
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	7013      	strb	r3, [r2, #0]
 8008134:	e7a8      	b.n	8008088 <_printf_i+0x128>
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	0032      	movs	r2, r6
 800813a:	9906      	ldr	r1, [sp, #24]
 800813c:	9805      	ldr	r0, [sp, #20]
 800813e:	9d07      	ldr	r5, [sp, #28]
 8008140:	47a8      	blx	r5
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d0aa      	beq.n	800809c <_printf_i+0x13c>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	079b      	lsls	r3, r3, #30
 800814a:	d415      	bmi.n	8008178 <_printf_i+0x218>
 800814c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814e:	68e0      	ldr	r0, [r4, #12]
 8008150:	4298      	cmp	r0, r3
 8008152:	daa5      	bge.n	80080a0 <_printf_i+0x140>
 8008154:	0018      	movs	r0, r3
 8008156:	e7a3      	b.n	80080a0 <_printf_i+0x140>
 8008158:	0022      	movs	r2, r4
 800815a:	2301      	movs	r3, #1
 800815c:	9906      	ldr	r1, [sp, #24]
 800815e:	9805      	ldr	r0, [sp, #20]
 8008160:	9e07      	ldr	r6, [sp, #28]
 8008162:	3219      	adds	r2, #25
 8008164:	47b0      	blx	r6
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d098      	beq.n	800809c <_printf_i+0x13c>
 800816a:	3501      	adds	r5, #1
 800816c:	68e3      	ldr	r3, [r4, #12]
 800816e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	42ab      	cmp	r3, r5
 8008174:	dcf0      	bgt.n	8008158 <_printf_i+0x1f8>
 8008176:	e7e9      	b.n	800814c <_printf_i+0x1ec>
 8008178:	2500      	movs	r5, #0
 800817a:	e7f7      	b.n	800816c <_printf_i+0x20c>
 800817c:	0800a656 	.word	0x0800a656
 8008180:	0800a667 	.word	0x0800a667

08008184 <iprintf>:
 8008184:	b40f      	push	{r0, r1, r2, r3}
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <iprintf+0x30>)
 8008188:	b513      	push	{r0, r1, r4, lr}
 800818a:	681c      	ldr	r4, [r3, #0]
 800818c:	2c00      	cmp	r4, #0
 800818e:	d005      	beq.n	800819c <iprintf+0x18>
 8008190:	69a3      	ldr	r3, [r4, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <iprintf+0x18>
 8008196:	0020      	movs	r0, r4
 8008198:	f000 ff16 	bl	8008fc8 <__sinit>
 800819c:	ab05      	add	r3, sp, #20
 800819e:	0020      	movs	r0, r4
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	68a1      	ldr	r1, [r4, #8]
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	f001 fca7 	bl	8009af8 <_vfiprintf_r>
 80081aa:	bc16      	pop	{r1, r2, r4}
 80081ac:	bc08      	pop	{r3}
 80081ae:	b004      	add	sp, #16
 80081b0:	4718      	bx	r3
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	20000020 	.word	0x20000020

080081b8 <quorem>:
 80081b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ba:	0006      	movs	r6, r0
 80081bc:	690b      	ldr	r3, [r1, #16]
 80081be:	6932      	ldr	r2, [r6, #16]
 80081c0:	b087      	sub	sp, #28
 80081c2:	2000      	movs	r0, #0
 80081c4:	9103      	str	r1, [sp, #12]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	db65      	blt.n	8008296 <quorem+0xde>
 80081ca:	3b01      	subs	r3, #1
 80081cc:	009c      	lsls	r4, r3, #2
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	000b      	movs	r3, r1
 80081d2:	3314      	adds	r3, #20
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	191b      	adds	r3, r3, r4
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	0033      	movs	r3, r6
 80081dc:	3314      	adds	r3, #20
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	191c      	adds	r4, r3, r4
 80081e2:	9b04      	ldr	r3, [sp, #16]
 80081e4:	6827      	ldr	r7, [r4, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	0038      	movs	r0, r7
 80081ea:	1c5d      	adds	r5, r3, #1
 80081ec:	0029      	movs	r1, r5
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	f7f7 ffb0 	bl	8000154 <__udivsi3>
 80081f4:	9001      	str	r0, [sp, #4]
 80081f6:	42af      	cmp	r7, r5
 80081f8:	d324      	bcc.n	8008244 <quorem+0x8c>
 80081fa:	2500      	movs	r5, #0
 80081fc:	46ac      	mov	ip, r5
 80081fe:	9802      	ldr	r0, [sp, #8]
 8008200:	9f05      	ldr	r7, [sp, #20]
 8008202:	cf08      	ldmia	r7!, {r3}
 8008204:	9a01      	ldr	r2, [sp, #4]
 8008206:	b299      	uxth	r1, r3
 8008208:	4351      	muls	r1, r2
 800820a:	0c1b      	lsrs	r3, r3, #16
 800820c:	4353      	muls	r3, r2
 800820e:	1949      	adds	r1, r1, r5
 8008210:	0c0a      	lsrs	r2, r1, #16
 8008212:	189b      	adds	r3, r3, r2
 8008214:	6802      	ldr	r2, [r0, #0]
 8008216:	b289      	uxth	r1, r1
 8008218:	b292      	uxth	r2, r2
 800821a:	4462      	add	r2, ip
 800821c:	1a52      	subs	r2, r2, r1
 800821e:	6801      	ldr	r1, [r0, #0]
 8008220:	0c1d      	lsrs	r5, r3, #16
 8008222:	0c09      	lsrs	r1, r1, #16
 8008224:	b29b      	uxth	r3, r3
 8008226:	1acb      	subs	r3, r1, r3
 8008228:	1411      	asrs	r1, r2, #16
 800822a:	185b      	adds	r3, r3, r1
 800822c:	1419      	asrs	r1, r3, #16
 800822e:	b292      	uxth	r2, r2
 8008230:	041b      	lsls	r3, r3, #16
 8008232:	431a      	orrs	r2, r3
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	468c      	mov	ip, r1
 8008238:	c004      	stmia	r0!, {r2}
 800823a:	42bb      	cmp	r3, r7
 800823c:	d2e1      	bcs.n	8008202 <quorem+0x4a>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d030      	beq.n	80082a6 <quorem+0xee>
 8008244:	0030      	movs	r0, r6
 8008246:	9903      	ldr	r1, [sp, #12]
 8008248:	f001 fa08 	bl	800965c <__mcmp>
 800824c:	2800      	cmp	r0, #0
 800824e:	db21      	blt.n	8008294 <quorem+0xdc>
 8008250:	0030      	movs	r0, r6
 8008252:	2400      	movs	r4, #0
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	9903      	ldr	r1, [sp, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	3014      	adds	r0, #20
 800825e:	3114      	adds	r1, #20
 8008260:	6803      	ldr	r3, [r0, #0]
 8008262:	c920      	ldmia	r1!, {r5}
 8008264:	b29a      	uxth	r2, r3
 8008266:	1914      	adds	r4, r2, r4
 8008268:	b2aa      	uxth	r2, r5
 800826a:	1aa2      	subs	r2, r4, r2
 800826c:	0c1b      	lsrs	r3, r3, #16
 800826e:	0c2d      	lsrs	r5, r5, #16
 8008270:	1414      	asrs	r4, r2, #16
 8008272:	1b5b      	subs	r3, r3, r5
 8008274:	191b      	adds	r3, r3, r4
 8008276:	141c      	asrs	r4, r3, #16
 8008278:	b292      	uxth	r2, r2
 800827a:	041b      	lsls	r3, r3, #16
 800827c:	4313      	orrs	r3, r2
 800827e:	c008      	stmia	r0!, {r3}
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	428b      	cmp	r3, r1
 8008284:	d2ec      	bcs.n	8008260 <quorem+0xa8>
 8008286:	9b00      	ldr	r3, [sp, #0]
 8008288:	9a02      	ldr	r2, [sp, #8]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	18d3      	adds	r3, r2, r3
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	2a00      	cmp	r2, #0
 8008292:	d015      	beq.n	80082c0 <quorem+0x108>
 8008294:	9801      	ldr	r0, [sp, #4]
 8008296:	b007      	add	sp, #28
 8008298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <quorem+0xf6>
 80082a0:	9b00      	ldr	r3, [sp, #0]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	9b02      	ldr	r3, [sp, #8]
 80082a8:	3c04      	subs	r4, #4
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	d3f5      	bcc.n	800829a <quorem+0xe2>
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	6133      	str	r3, [r6, #16]
 80082b2:	e7c7      	b.n	8008244 <quorem+0x8c>
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d106      	bne.n	80082c8 <quorem+0x110>
 80082ba:	9a00      	ldr	r2, [sp, #0]
 80082bc:	3a01      	subs	r2, #1
 80082be:	9200      	str	r2, [sp, #0]
 80082c0:	9a02      	ldr	r2, [sp, #8]
 80082c2:	3b04      	subs	r3, #4
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d3f5      	bcc.n	80082b4 <quorem+0xfc>
 80082c8:	9b00      	ldr	r3, [sp, #0]
 80082ca:	6133      	str	r3, [r6, #16]
 80082cc:	e7e2      	b.n	8008294 <quorem+0xdc>
	...

080082d0 <_dtoa_r>:
 80082d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d2:	b09d      	sub	sp, #116	; 0x74
 80082d4:	9202      	str	r2, [sp, #8]
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	9c03      	ldr	r4, [sp, #12]
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	9409      	str	r4, [sp, #36]	; 0x24
 80082e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082e2:	0007      	movs	r7, r0
 80082e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80082e6:	2c00      	cmp	r4, #0
 80082e8:	d10e      	bne.n	8008308 <_dtoa_r+0x38>
 80082ea:	2010      	movs	r0, #16
 80082ec:	f000 ff14 	bl	8009118 <malloc>
 80082f0:	1e02      	subs	r2, r0, #0
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24
 80082f4:	d104      	bne.n	8008300 <_dtoa_r+0x30>
 80082f6:	21ea      	movs	r1, #234	; 0xea
 80082f8:	4bc7      	ldr	r3, [pc, #796]	; (8008618 <_dtoa_r+0x348>)
 80082fa:	48c8      	ldr	r0, [pc, #800]	; (800861c <_dtoa_r+0x34c>)
 80082fc:	f001 fe76 	bl	8009fec <__assert_func>
 8008300:	6044      	str	r4, [r0, #4]
 8008302:	6084      	str	r4, [r0, #8]
 8008304:	6004      	str	r4, [r0, #0]
 8008306:	60c4      	str	r4, [r0, #12]
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	6819      	ldr	r1, [r3, #0]
 800830c:	2900      	cmp	r1, #0
 800830e:	d00a      	beq.n	8008326 <_dtoa_r+0x56>
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	2301      	movs	r3, #1
 8008314:	4093      	lsls	r3, r2
 8008316:	604a      	str	r2, [r1, #4]
 8008318:	608b      	str	r3, [r1, #8]
 800831a:	0038      	movs	r0, r7
 800831c:	f000 ff5e 	bl	80091dc <_Bfree>
 8008320:	2200      	movs	r2, #0
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	da20      	bge.n	800836e <_dtoa_r+0x9e>
 800832c:	2301      	movs	r3, #1
 800832e:	602b      	str	r3, [r5, #0]
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	085b      	lsrs	r3, r3, #1
 8008336:	9309      	str	r3, [sp, #36]	; 0x24
 8008338:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800833a:	4bb9      	ldr	r3, [pc, #740]	; (8008620 <_dtoa_r+0x350>)
 800833c:	4ab8      	ldr	r2, [pc, #736]	; (8008620 <_dtoa_r+0x350>)
 800833e:	402b      	ands	r3, r5
 8008340:	4293      	cmp	r3, r2
 8008342:	d117      	bne.n	8008374 <_dtoa_r+0xa4>
 8008344:	4bb7      	ldr	r3, [pc, #732]	; (8008624 <_dtoa_r+0x354>)
 8008346:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008348:	0328      	lsls	r0, r5, #12
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	0b00      	lsrs	r0, r0, #12
 8008350:	4318      	orrs	r0, r3
 8008352:	d101      	bne.n	8008358 <_dtoa_r+0x88>
 8008354:	f000 fdbf 	bl	8008ed6 <_dtoa_r+0xc06>
 8008358:	48b3      	ldr	r0, [pc, #716]	; (8008628 <_dtoa_r+0x358>)
 800835a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800835c:	9006      	str	r0, [sp, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <_dtoa_r+0x98>
 8008362:	4bb2      	ldr	r3, [pc, #712]	; (800862c <_dtoa_r+0x35c>)
 8008364:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	9806      	ldr	r0, [sp, #24]
 800836a:	b01d      	add	sp, #116	; 0x74
 800836c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800836e:	2300      	movs	r3, #0
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7e1      	b.n	8008338 <_dtoa_r+0x68>
 8008374:	9b08      	ldr	r3, [sp, #32]
 8008376:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008378:	9312      	str	r3, [sp, #72]	; 0x48
 800837a:	9413      	str	r4, [sp, #76]	; 0x4c
 800837c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800837e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008380:	2200      	movs	r2, #0
 8008382:	2300      	movs	r3, #0
 8008384:	f7f8 f86c 	bl	8000460 <__aeabi_dcmpeq>
 8008388:	1e04      	subs	r4, r0, #0
 800838a:	d009      	beq.n	80083a0 <_dtoa_r+0xd0>
 800838c:	2301      	movs	r3, #1
 800838e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	4ba7      	ldr	r3, [pc, #668]	; (8008630 <_dtoa_r+0x360>)
 8008394:	9306      	str	r3, [sp, #24]
 8008396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0e5      	beq.n	8008368 <_dtoa_r+0x98>
 800839c:	4ba5      	ldr	r3, [pc, #660]	; (8008634 <_dtoa_r+0x364>)
 800839e:	e7e1      	b.n	8008364 <_dtoa_r+0x94>
 80083a0:	ab1a      	add	r3, sp, #104	; 0x68
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	0038      	movs	r0, r7
 80083aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083ae:	f001 fa09 	bl	80097c4 <__d2b>
 80083b2:	006e      	lsls	r6, r5, #1
 80083b4:	9005      	str	r0, [sp, #20]
 80083b6:	0d76      	lsrs	r6, r6, #21
 80083b8:	d100      	bne.n	80083bc <_dtoa_r+0xec>
 80083ba:	e07c      	b.n	80084b6 <_dtoa_r+0x1e6>
 80083bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083c2:	4a9d      	ldr	r2, [pc, #628]	; (8008638 <_dtoa_r+0x368>)
 80083c4:	031b      	lsls	r3, r3, #12
 80083c6:	0b1b      	lsrs	r3, r3, #12
 80083c8:	431a      	orrs	r2, r3
 80083ca:	0011      	movs	r1, r2
 80083cc:	4b9b      	ldr	r3, [pc, #620]	; (800863c <_dtoa_r+0x36c>)
 80083ce:	9418      	str	r4, [sp, #96]	; 0x60
 80083d0:	18f6      	adds	r6, r6, r3
 80083d2:	2200      	movs	r2, #0
 80083d4:	4b9a      	ldr	r3, [pc, #616]	; (8008640 <_dtoa_r+0x370>)
 80083d6:	f7f9 fb35 	bl	8001a44 <__aeabi_dsub>
 80083da:	4a9a      	ldr	r2, [pc, #616]	; (8008644 <_dtoa_r+0x374>)
 80083dc:	4b9a      	ldr	r3, [pc, #616]	; (8008648 <_dtoa_r+0x378>)
 80083de:	f7f9 f8c5 	bl	800156c <__aeabi_dmul>
 80083e2:	4a9a      	ldr	r2, [pc, #616]	; (800864c <_dtoa_r+0x37c>)
 80083e4:	4b9a      	ldr	r3, [pc, #616]	; (8008650 <_dtoa_r+0x380>)
 80083e6:	f7f8 f983 	bl	80006f0 <__aeabi_dadd>
 80083ea:	0004      	movs	r4, r0
 80083ec:	0030      	movs	r0, r6
 80083ee:	000d      	movs	r5, r1
 80083f0:	f7f9 ff0e 	bl	8002210 <__aeabi_i2d>
 80083f4:	4a97      	ldr	r2, [pc, #604]	; (8008654 <_dtoa_r+0x384>)
 80083f6:	4b98      	ldr	r3, [pc, #608]	; (8008658 <_dtoa_r+0x388>)
 80083f8:	f7f9 f8b8 	bl	800156c <__aeabi_dmul>
 80083fc:	0002      	movs	r2, r0
 80083fe:	000b      	movs	r3, r1
 8008400:	0020      	movs	r0, r4
 8008402:	0029      	movs	r1, r5
 8008404:	f7f8 f974 	bl	80006f0 <__aeabi_dadd>
 8008408:	0004      	movs	r4, r0
 800840a:	000d      	movs	r5, r1
 800840c:	f7f9 feca 	bl	80021a4 <__aeabi_d2iz>
 8008410:	2200      	movs	r2, #0
 8008412:	9002      	str	r0, [sp, #8]
 8008414:	2300      	movs	r3, #0
 8008416:	0020      	movs	r0, r4
 8008418:	0029      	movs	r1, r5
 800841a:	f7f8 f827 	bl	800046c <__aeabi_dcmplt>
 800841e:	2800      	cmp	r0, #0
 8008420:	d00b      	beq.n	800843a <_dtoa_r+0x16a>
 8008422:	9802      	ldr	r0, [sp, #8]
 8008424:	f7f9 fef4 	bl	8002210 <__aeabi_i2d>
 8008428:	002b      	movs	r3, r5
 800842a:	0022      	movs	r2, r4
 800842c:	f7f8 f818 	bl	8000460 <__aeabi_dcmpeq>
 8008430:	4243      	negs	r3, r0
 8008432:	4158      	adcs	r0, r3
 8008434:	9b02      	ldr	r3, [sp, #8]
 8008436:	1a1b      	subs	r3, r3, r0
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	2301      	movs	r3, #1
 800843c:	9316      	str	r3, [sp, #88]	; 0x58
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	2b16      	cmp	r3, #22
 8008442:	d80f      	bhi.n	8008464 <_dtoa_r+0x194>
 8008444:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008446:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008448:	00da      	lsls	r2, r3, #3
 800844a:	4b84      	ldr	r3, [pc, #528]	; (800865c <_dtoa_r+0x38c>)
 800844c:	189b      	adds	r3, r3, r2
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f7f8 f80b 	bl	800046c <__aeabi_dcmplt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d049      	beq.n	80084ee <_dtoa_r+0x21e>
 800845a:	9b02      	ldr	r3, [sp, #8]
 800845c:	3b01      	subs	r3, #1
 800845e:	9302      	str	r3, [sp, #8]
 8008460:	2300      	movs	r3, #0
 8008462:	9316      	str	r3, [sp, #88]	; 0x58
 8008464:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008466:	1b9e      	subs	r6, r3, r6
 8008468:	2300      	movs	r3, #0
 800846a:	930a      	str	r3, [sp, #40]	; 0x28
 800846c:	0033      	movs	r3, r6
 800846e:	3b01      	subs	r3, #1
 8008470:	930d      	str	r3, [sp, #52]	; 0x34
 8008472:	d504      	bpl.n	800847e <_dtoa_r+0x1ae>
 8008474:	2301      	movs	r3, #1
 8008476:	1b9b      	subs	r3, r3, r6
 8008478:	930a      	str	r3, [sp, #40]	; 0x28
 800847a:	2300      	movs	r3, #0
 800847c:	930d      	str	r3, [sp, #52]	; 0x34
 800847e:	9b02      	ldr	r3, [sp, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db36      	blt.n	80084f2 <_dtoa_r+0x222>
 8008484:	9a02      	ldr	r2, [sp, #8]
 8008486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008488:	4694      	mov	ip, r2
 800848a:	4463      	add	r3, ip
 800848c:	930d      	str	r3, [sp, #52]	; 0x34
 800848e:	2300      	movs	r3, #0
 8008490:	9215      	str	r2, [sp, #84]	; 0x54
 8008492:	930e      	str	r3, [sp, #56]	; 0x38
 8008494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008496:	2401      	movs	r4, #1
 8008498:	2b09      	cmp	r3, #9
 800849a:	d864      	bhi.n	8008566 <_dtoa_r+0x296>
 800849c:	2b05      	cmp	r3, #5
 800849e:	dd02      	ble.n	80084a6 <_dtoa_r+0x1d6>
 80084a0:	2400      	movs	r4, #0
 80084a2:	3b04      	subs	r3, #4
 80084a4:	9322      	str	r3, [sp, #136]	; 0x88
 80084a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084a8:	1e98      	subs	r0, r3, #2
 80084aa:	2803      	cmp	r0, #3
 80084ac:	d864      	bhi.n	8008578 <_dtoa_r+0x2a8>
 80084ae:	f7f7 fe3d 	bl	800012c <__gnu_thumb1_case_uqi>
 80084b2:	3829      	.short	0x3829
 80084b4:	5836      	.short	0x5836
 80084b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80084b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084ba:	189e      	adds	r6, r3, r2
 80084bc:	4b68      	ldr	r3, [pc, #416]	; (8008660 <_dtoa_r+0x390>)
 80084be:	18f2      	adds	r2, r6, r3
 80084c0:	2a20      	cmp	r2, #32
 80084c2:	dd0f      	ble.n	80084e4 <_dtoa_r+0x214>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	409d      	lsls	r5, r3
 80084ca:	4b66      	ldr	r3, [pc, #408]	; (8008664 <_dtoa_r+0x394>)
 80084cc:	9802      	ldr	r0, [sp, #8]
 80084ce:	18f3      	adds	r3, r6, r3
 80084d0:	40d8      	lsrs	r0, r3
 80084d2:	4328      	orrs	r0, r5
 80084d4:	f7f9 fecc 	bl	8002270 <__aeabi_ui2d>
 80084d8:	2301      	movs	r3, #1
 80084da:	4c63      	ldr	r4, [pc, #396]	; (8008668 <_dtoa_r+0x398>)
 80084dc:	3e01      	subs	r6, #1
 80084de:	1909      	adds	r1, r1, r4
 80084e0:	9318      	str	r3, [sp, #96]	; 0x60
 80084e2:	e776      	b.n	80083d2 <_dtoa_r+0x102>
 80084e4:	2320      	movs	r3, #32
 80084e6:	9802      	ldr	r0, [sp, #8]
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	4098      	lsls	r0, r3
 80084ec:	e7f2      	b.n	80084d4 <_dtoa_r+0x204>
 80084ee:	9016      	str	r0, [sp, #88]	; 0x58
 80084f0:	e7b8      	b.n	8008464 <_dtoa_r+0x194>
 80084f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f4:	9a02      	ldr	r2, [sp, #8]
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	930a      	str	r3, [sp, #40]	; 0x28
 80084fa:	4253      	negs	r3, r2
 80084fc:	930e      	str	r3, [sp, #56]	; 0x38
 80084fe:	2300      	movs	r3, #0
 8008500:	9315      	str	r3, [sp, #84]	; 0x54
 8008502:	e7c7      	b.n	8008494 <_dtoa_r+0x1c4>
 8008504:	2300      	movs	r3, #0
 8008506:	930f      	str	r3, [sp, #60]	; 0x3c
 8008508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800850a:	930c      	str	r3, [sp, #48]	; 0x30
 800850c:	9307      	str	r3, [sp, #28]
 800850e:	2b00      	cmp	r3, #0
 8008510:	dc13      	bgt.n	800853a <_dtoa_r+0x26a>
 8008512:	2301      	movs	r3, #1
 8008514:	001a      	movs	r2, r3
 8008516:	930c      	str	r3, [sp, #48]	; 0x30
 8008518:	9307      	str	r3, [sp, #28]
 800851a:	9223      	str	r2, [sp, #140]	; 0x8c
 800851c:	e00d      	b.n	800853a <_dtoa_r+0x26a>
 800851e:	2301      	movs	r3, #1
 8008520:	e7f1      	b.n	8008506 <_dtoa_r+0x236>
 8008522:	2300      	movs	r3, #0
 8008524:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008526:	930f      	str	r3, [sp, #60]	; 0x3c
 8008528:	4694      	mov	ip, r2
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	4463      	add	r3, ip
 800852e:	930c      	str	r3, [sp, #48]	; 0x30
 8008530:	3301      	adds	r3, #1
 8008532:	9307      	str	r3, [sp, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	dc00      	bgt.n	800853a <_dtoa_r+0x26a>
 8008538:	2301      	movs	r3, #1
 800853a:	2200      	movs	r2, #0
 800853c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800853e:	6042      	str	r2, [r0, #4]
 8008540:	3204      	adds	r2, #4
 8008542:	0015      	movs	r5, r2
 8008544:	3514      	adds	r5, #20
 8008546:	6841      	ldr	r1, [r0, #4]
 8008548:	429d      	cmp	r5, r3
 800854a:	d919      	bls.n	8008580 <_dtoa_r+0x2b0>
 800854c:	0038      	movs	r0, r7
 800854e:	f000 fe01 	bl	8009154 <_Balloc>
 8008552:	9006      	str	r0, [sp, #24]
 8008554:	2800      	cmp	r0, #0
 8008556:	d117      	bne.n	8008588 <_dtoa_r+0x2b8>
 8008558:	21d5      	movs	r1, #213	; 0xd5
 800855a:	0002      	movs	r2, r0
 800855c:	4b43      	ldr	r3, [pc, #268]	; (800866c <_dtoa_r+0x39c>)
 800855e:	0049      	lsls	r1, r1, #1
 8008560:	e6cb      	b.n	80082fa <_dtoa_r+0x2a>
 8008562:	2301      	movs	r3, #1
 8008564:	e7de      	b.n	8008524 <_dtoa_r+0x254>
 8008566:	2300      	movs	r3, #0
 8008568:	940f      	str	r4, [sp, #60]	; 0x3c
 800856a:	9322      	str	r3, [sp, #136]	; 0x88
 800856c:	3b01      	subs	r3, #1
 800856e:	930c      	str	r3, [sp, #48]	; 0x30
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	2200      	movs	r2, #0
 8008574:	3313      	adds	r3, #19
 8008576:	e7d0      	b.n	800851a <_dtoa_r+0x24a>
 8008578:	2301      	movs	r3, #1
 800857a:	930f      	str	r3, [sp, #60]	; 0x3c
 800857c:	3b02      	subs	r3, #2
 800857e:	e7f6      	b.n	800856e <_dtoa_r+0x29e>
 8008580:	3101      	adds	r1, #1
 8008582:	6041      	str	r1, [r0, #4]
 8008584:	0052      	lsls	r2, r2, #1
 8008586:	e7dc      	b.n	8008542 <_dtoa_r+0x272>
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	9a06      	ldr	r2, [sp, #24]
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	9b07      	ldr	r3, [sp, #28]
 8008590:	2b0e      	cmp	r3, #14
 8008592:	d900      	bls.n	8008596 <_dtoa_r+0x2c6>
 8008594:	e0eb      	b.n	800876e <_dtoa_r+0x49e>
 8008596:	2c00      	cmp	r4, #0
 8008598:	d100      	bne.n	800859c <_dtoa_r+0x2cc>
 800859a:	e0e8      	b.n	800876e <_dtoa_r+0x49e>
 800859c:	9b02      	ldr	r3, [sp, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	dd68      	ble.n	8008674 <_dtoa_r+0x3a4>
 80085a2:	001a      	movs	r2, r3
 80085a4:	210f      	movs	r1, #15
 80085a6:	4b2d      	ldr	r3, [pc, #180]	; (800865c <_dtoa_r+0x38c>)
 80085a8:	400a      	ands	r2, r1
 80085aa:	00d2      	lsls	r2, r2, #3
 80085ac:	189b      	adds	r3, r3, r2
 80085ae:	681d      	ldr	r5, [r3, #0]
 80085b0:	685e      	ldr	r6, [r3, #4]
 80085b2:	9b02      	ldr	r3, [sp, #8]
 80085b4:	111c      	asrs	r4, r3, #4
 80085b6:	2302      	movs	r3, #2
 80085b8:	9310      	str	r3, [sp, #64]	; 0x40
 80085ba:	9b02      	ldr	r3, [sp, #8]
 80085bc:	05db      	lsls	r3, r3, #23
 80085be:	d50b      	bpl.n	80085d8 <_dtoa_r+0x308>
 80085c0:	4b2b      	ldr	r3, [pc, #172]	; (8008670 <_dtoa_r+0x3a0>)
 80085c2:	400c      	ands	r4, r1
 80085c4:	6a1a      	ldr	r2, [r3, #32]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80085ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80085cc:	f7f8 fbcc 	bl	8000d68 <__aeabi_ddiv>
 80085d0:	2303      	movs	r3, #3
 80085d2:	9008      	str	r0, [sp, #32]
 80085d4:	9109      	str	r1, [sp, #36]	; 0x24
 80085d6:	9310      	str	r3, [sp, #64]	; 0x40
 80085d8:	4b25      	ldr	r3, [pc, #148]	; (8008670 <_dtoa_r+0x3a0>)
 80085da:	9314      	str	r3, [sp, #80]	; 0x50
 80085dc:	2c00      	cmp	r4, #0
 80085de:	d108      	bne.n	80085f2 <_dtoa_r+0x322>
 80085e0:	9808      	ldr	r0, [sp, #32]
 80085e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085e4:	002a      	movs	r2, r5
 80085e6:	0033      	movs	r3, r6
 80085e8:	f7f8 fbbe 	bl	8000d68 <__aeabi_ddiv>
 80085ec:	9008      	str	r0, [sp, #32]
 80085ee:	9109      	str	r1, [sp, #36]	; 0x24
 80085f0:	e05c      	b.n	80086ac <_dtoa_r+0x3dc>
 80085f2:	2301      	movs	r3, #1
 80085f4:	421c      	tst	r4, r3
 80085f6:	d00b      	beq.n	8008610 <_dtoa_r+0x340>
 80085f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085fa:	0028      	movs	r0, r5
 80085fc:	3301      	adds	r3, #1
 80085fe:	9310      	str	r3, [sp, #64]	; 0x40
 8008600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008602:	0031      	movs	r1, r6
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f7f8 ffb0 	bl	800156c <__aeabi_dmul>
 800860c:	0005      	movs	r5, r0
 800860e:	000e      	movs	r6, r1
 8008610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008612:	1064      	asrs	r4, r4, #1
 8008614:	3308      	adds	r3, #8
 8008616:	e7e0      	b.n	80085da <_dtoa_r+0x30a>
 8008618:	0800a685 	.word	0x0800a685
 800861c:	0800a69c 	.word	0x0800a69c
 8008620:	7ff00000 	.word	0x7ff00000
 8008624:	0000270f 	.word	0x0000270f
 8008628:	0800a681 	.word	0x0800a681
 800862c:	0800a684 	.word	0x0800a684
 8008630:	0800a654 	.word	0x0800a654
 8008634:	0800a655 	.word	0x0800a655
 8008638:	3ff00000 	.word	0x3ff00000
 800863c:	fffffc01 	.word	0xfffffc01
 8008640:	3ff80000 	.word	0x3ff80000
 8008644:	636f4361 	.word	0x636f4361
 8008648:	3fd287a7 	.word	0x3fd287a7
 800864c:	8b60c8b3 	.word	0x8b60c8b3
 8008650:	3fc68a28 	.word	0x3fc68a28
 8008654:	509f79fb 	.word	0x509f79fb
 8008658:	3fd34413 	.word	0x3fd34413
 800865c:	0800a7f0 	.word	0x0800a7f0
 8008660:	00000432 	.word	0x00000432
 8008664:	00000412 	.word	0x00000412
 8008668:	fe100000 	.word	0xfe100000
 800866c:	0800a6f7 	.word	0x0800a6f7
 8008670:	0800a7c8 	.word	0x0800a7c8
 8008674:	2302      	movs	r3, #2
 8008676:	9310      	str	r3, [sp, #64]	; 0x40
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d016      	beq.n	80086ac <_dtoa_r+0x3dc>
 800867e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008680:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008682:	425c      	negs	r4, r3
 8008684:	230f      	movs	r3, #15
 8008686:	4ab6      	ldr	r2, [pc, #728]	; (8008960 <_dtoa_r+0x690>)
 8008688:	4023      	ands	r3, r4
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	18d3      	adds	r3, r2, r3
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f7f8 ff6b 	bl	800156c <__aeabi_dmul>
 8008696:	2601      	movs	r6, #1
 8008698:	2300      	movs	r3, #0
 800869a:	9008      	str	r0, [sp, #32]
 800869c:	9109      	str	r1, [sp, #36]	; 0x24
 800869e:	4db1      	ldr	r5, [pc, #708]	; (8008964 <_dtoa_r+0x694>)
 80086a0:	1124      	asrs	r4, r4, #4
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d000      	beq.n	80086a8 <_dtoa_r+0x3d8>
 80086a6:	e094      	b.n	80087d2 <_dtoa_r+0x502>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d19f      	bne.n	80085ec <_dtoa_r+0x31c>
 80086ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d100      	bne.n	80086b4 <_dtoa_r+0x3e4>
 80086b2:	e09b      	b.n	80087ec <_dtoa_r+0x51c>
 80086b4:	9c08      	ldr	r4, [sp, #32]
 80086b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086b8:	2200      	movs	r2, #0
 80086ba:	0020      	movs	r0, r4
 80086bc:	0029      	movs	r1, r5
 80086be:	4baa      	ldr	r3, [pc, #680]	; (8008968 <_dtoa_r+0x698>)
 80086c0:	f7f7 fed4 	bl	800046c <__aeabi_dcmplt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d100      	bne.n	80086ca <_dtoa_r+0x3fa>
 80086c8:	e090      	b.n	80087ec <_dtoa_r+0x51c>
 80086ca:	9b07      	ldr	r3, [sp, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d100      	bne.n	80086d2 <_dtoa_r+0x402>
 80086d0:	e08c      	b.n	80087ec <_dtoa_r+0x51c>
 80086d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd46      	ble.n	8008766 <_dtoa_r+0x496>
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	0020      	movs	r0, r4
 80086de:	0029      	movs	r1, r5
 80086e0:	1e5e      	subs	r6, r3, #1
 80086e2:	4ba2      	ldr	r3, [pc, #648]	; (800896c <_dtoa_r+0x69c>)
 80086e4:	f7f8 ff42 	bl	800156c <__aeabi_dmul>
 80086e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086ea:	9008      	str	r0, [sp, #32]
 80086ec:	9109      	str	r1, [sp, #36]	; 0x24
 80086ee:	3301      	adds	r3, #1
 80086f0:	9310      	str	r3, [sp, #64]	; 0x40
 80086f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086f6:	9c08      	ldr	r4, [sp, #32]
 80086f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086fa:	9314      	str	r3, [sp, #80]	; 0x50
 80086fc:	f7f9 fd88 	bl	8002210 <__aeabi_i2d>
 8008700:	0022      	movs	r2, r4
 8008702:	002b      	movs	r3, r5
 8008704:	f7f8 ff32 	bl	800156c <__aeabi_dmul>
 8008708:	2200      	movs	r2, #0
 800870a:	4b99      	ldr	r3, [pc, #612]	; (8008970 <_dtoa_r+0x6a0>)
 800870c:	f7f7 fff0 	bl	80006f0 <__aeabi_dadd>
 8008710:	9010      	str	r0, [sp, #64]	; 0x40
 8008712:	9111      	str	r1, [sp, #68]	; 0x44
 8008714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008718:	9208      	str	r2, [sp, #32]
 800871a:	9309      	str	r3, [sp, #36]	; 0x24
 800871c:	4a95      	ldr	r2, [pc, #596]	; (8008974 <_dtoa_r+0x6a4>)
 800871e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008720:	4694      	mov	ip, r2
 8008722:	4463      	add	r3, ip
 8008724:	9317      	str	r3, [sp, #92]	; 0x5c
 8008726:	9309      	str	r3, [sp, #36]	; 0x24
 8008728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800872a:	2b00      	cmp	r3, #0
 800872c:	d161      	bne.n	80087f2 <_dtoa_r+0x522>
 800872e:	2200      	movs	r2, #0
 8008730:	0020      	movs	r0, r4
 8008732:	0029      	movs	r1, r5
 8008734:	4b90      	ldr	r3, [pc, #576]	; (8008978 <_dtoa_r+0x6a8>)
 8008736:	f7f9 f985 	bl	8001a44 <__aeabi_dsub>
 800873a:	9a08      	ldr	r2, [sp, #32]
 800873c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800873e:	0004      	movs	r4, r0
 8008740:	000d      	movs	r5, r1
 8008742:	f7f7 fea7 	bl	8000494 <__aeabi_dcmpgt>
 8008746:	2800      	cmp	r0, #0
 8008748:	d000      	beq.n	800874c <_dtoa_r+0x47c>
 800874a:	e2af      	b.n	8008cac <_dtoa_r+0x9dc>
 800874c:	488b      	ldr	r0, [pc, #556]	; (800897c <_dtoa_r+0x6ac>)
 800874e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008750:	4684      	mov	ip, r0
 8008752:	4461      	add	r1, ip
 8008754:	000b      	movs	r3, r1
 8008756:	0020      	movs	r0, r4
 8008758:	0029      	movs	r1, r5
 800875a:	9a08      	ldr	r2, [sp, #32]
 800875c:	f7f7 fe86 	bl	800046c <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	d000      	beq.n	8008766 <_dtoa_r+0x496>
 8008764:	e29f      	b.n	8008ca6 <_dtoa_r+0x9d6>
 8008766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008768:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800876a:	9308      	str	r3, [sp, #32]
 800876c:	9409      	str	r4, [sp, #36]	; 0x24
 800876e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008770:	2b00      	cmp	r3, #0
 8008772:	da00      	bge.n	8008776 <_dtoa_r+0x4a6>
 8008774:	e172      	b.n	8008a5c <_dtoa_r+0x78c>
 8008776:	9a02      	ldr	r2, [sp, #8]
 8008778:	2a0e      	cmp	r2, #14
 800877a:	dd00      	ble.n	800877e <_dtoa_r+0x4ae>
 800877c:	e16e      	b.n	8008a5c <_dtoa_r+0x78c>
 800877e:	4b78      	ldr	r3, [pc, #480]	; (8008960 <_dtoa_r+0x690>)
 8008780:	00d2      	lsls	r2, r2, #3
 8008782:	189b      	adds	r3, r3, r2
 8008784:	685c      	ldr	r4, [r3, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	930a      	str	r3, [sp, #40]	; 0x28
 800878a:	940b      	str	r4, [sp, #44]	; 0x2c
 800878c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800878e:	2b00      	cmp	r3, #0
 8008790:	db00      	blt.n	8008794 <_dtoa_r+0x4c4>
 8008792:	e0f7      	b.n	8008984 <_dtoa_r+0x6b4>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dd00      	ble.n	800879c <_dtoa_r+0x4cc>
 800879a:	e0f3      	b.n	8008984 <_dtoa_r+0x6b4>
 800879c:	d000      	beq.n	80087a0 <_dtoa_r+0x4d0>
 800879e:	e282      	b.n	8008ca6 <_dtoa_r+0x9d6>
 80087a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087a4:	2200      	movs	r2, #0
 80087a6:	4b74      	ldr	r3, [pc, #464]	; (8008978 <_dtoa_r+0x6a8>)
 80087a8:	f7f8 fee0 	bl	800156c <__aeabi_dmul>
 80087ac:	9a08      	ldr	r2, [sp, #32]
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	f7f7 fe7a 	bl	80004a8 <__aeabi_dcmpge>
 80087b4:	9e07      	ldr	r6, [sp, #28]
 80087b6:	0035      	movs	r5, r6
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d000      	beq.n	80087be <_dtoa_r+0x4ee>
 80087bc:	e259      	b.n	8008c72 <_dtoa_r+0x9a2>
 80087be:	9b06      	ldr	r3, [sp, #24]
 80087c0:	9a06      	ldr	r2, [sp, #24]
 80087c2:	3301      	adds	r3, #1
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	2331      	movs	r3, #49	; 0x31
 80087c8:	7013      	strb	r3, [r2, #0]
 80087ca:	9b02      	ldr	r3, [sp, #8]
 80087cc:	3301      	adds	r3, #1
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	e254      	b.n	8008c7c <_dtoa_r+0x9ac>
 80087d2:	4234      	tst	r4, r6
 80087d4:	d007      	beq.n	80087e6 <_dtoa_r+0x516>
 80087d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087d8:	3301      	adds	r3, #1
 80087da:	9310      	str	r3, [sp, #64]	; 0x40
 80087dc:	682a      	ldr	r2, [r5, #0]
 80087de:	686b      	ldr	r3, [r5, #4]
 80087e0:	f7f8 fec4 	bl	800156c <__aeabi_dmul>
 80087e4:	0033      	movs	r3, r6
 80087e6:	1064      	asrs	r4, r4, #1
 80087e8:	3508      	adds	r5, #8
 80087ea:	e75a      	b.n	80086a2 <_dtoa_r+0x3d2>
 80087ec:	9e02      	ldr	r6, [sp, #8]
 80087ee:	9b07      	ldr	r3, [sp, #28]
 80087f0:	e780      	b.n	80086f4 <_dtoa_r+0x424>
 80087f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	4b59      	ldr	r3, [pc, #356]	; (8008960 <_dtoa_r+0x690>)
 80087fa:	00d2      	lsls	r2, r2, #3
 80087fc:	189b      	adds	r3, r3, r2
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2900      	cmp	r1, #0
 8008804:	d051      	beq.n	80088aa <_dtoa_r+0x5da>
 8008806:	2000      	movs	r0, #0
 8008808:	495d      	ldr	r1, [pc, #372]	; (8008980 <_dtoa_r+0x6b0>)
 800880a:	f7f8 faad 	bl	8000d68 <__aeabi_ddiv>
 800880e:	9a08      	ldr	r2, [sp, #32]
 8008810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008812:	f7f9 f917 	bl	8001a44 <__aeabi_dsub>
 8008816:	9a06      	ldr	r2, [sp, #24]
 8008818:	9b06      	ldr	r3, [sp, #24]
 800881a:	4694      	mov	ip, r2
 800881c:	9317      	str	r3, [sp, #92]	; 0x5c
 800881e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008820:	9010      	str	r0, [sp, #64]	; 0x40
 8008822:	9111      	str	r1, [sp, #68]	; 0x44
 8008824:	4463      	add	r3, ip
 8008826:	9319      	str	r3, [sp, #100]	; 0x64
 8008828:	0029      	movs	r1, r5
 800882a:	0020      	movs	r0, r4
 800882c:	f7f9 fcba 	bl	80021a4 <__aeabi_d2iz>
 8008830:	9014      	str	r0, [sp, #80]	; 0x50
 8008832:	f7f9 fced 	bl	8002210 <__aeabi_i2d>
 8008836:	0002      	movs	r2, r0
 8008838:	000b      	movs	r3, r1
 800883a:	0020      	movs	r0, r4
 800883c:	0029      	movs	r1, r5
 800883e:	f7f9 f901 	bl	8001a44 <__aeabi_dsub>
 8008842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008846:	3301      	adds	r3, #1
 8008848:	9308      	str	r3, [sp, #32]
 800884a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800884c:	0004      	movs	r4, r0
 800884e:	3330      	adds	r3, #48	; 0x30
 8008850:	7013      	strb	r3, [r2, #0]
 8008852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008856:	000d      	movs	r5, r1
 8008858:	f7f7 fe08 	bl	800046c <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	d175      	bne.n	800894c <_dtoa_r+0x67c>
 8008860:	0022      	movs	r2, r4
 8008862:	002b      	movs	r3, r5
 8008864:	2000      	movs	r0, #0
 8008866:	4940      	ldr	r1, [pc, #256]	; (8008968 <_dtoa_r+0x698>)
 8008868:	f7f9 f8ec 	bl	8001a44 <__aeabi_dsub>
 800886c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800886e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008870:	f7f7 fdfc 	bl	800046c <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	d000      	beq.n	800887a <_dtoa_r+0x5aa>
 8008878:	e0d2      	b.n	8008a20 <_dtoa_r+0x750>
 800887a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800887c:	9a08      	ldr	r2, [sp, #32]
 800887e:	4293      	cmp	r3, r2
 8008880:	d100      	bne.n	8008884 <_dtoa_r+0x5b4>
 8008882:	e770      	b.n	8008766 <_dtoa_r+0x496>
 8008884:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008886:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008888:	2200      	movs	r2, #0
 800888a:	4b38      	ldr	r3, [pc, #224]	; (800896c <_dtoa_r+0x69c>)
 800888c:	f7f8 fe6e 	bl	800156c <__aeabi_dmul>
 8008890:	4b36      	ldr	r3, [pc, #216]	; (800896c <_dtoa_r+0x69c>)
 8008892:	9010      	str	r0, [sp, #64]	; 0x40
 8008894:	9111      	str	r1, [sp, #68]	; 0x44
 8008896:	2200      	movs	r2, #0
 8008898:	0020      	movs	r0, r4
 800889a:	0029      	movs	r1, r5
 800889c:	f7f8 fe66 	bl	800156c <__aeabi_dmul>
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	0004      	movs	r4, r0
 80088a4:	000d      	movs	r5, r1
 80088a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80088a8:	e7be      	b.n	8008828 <_dtoa_r+0x558>
 80088aa:	9808      	ldr	r0, [sp, #32]
 80088ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ae:	f7f8 fe5d 	bl	800156c <__aeabi_dmul>
 80088b2:	9a06      	ldr	r2, [sp, #24]
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	4694      	mov	ip, r2
 80088b8:	9308      	str	r3, [sp, #32]
 80088ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088bc:	9010      	str	r0, [sp, #64]	; 0x40
 80088be:	9111      	str	r1, [sp, #68]	; 0x44
 80088c0:	4463      	add	r3, ip
 80088c2:	9319      	str	r3, [sp, #100]	; 0x64
 80088c4:	0029      	movs	r1, r5
 80088c6:	0020      	movs	r0, r4
 80088c8:	f7f9 fc6c 	bl	80021a4 <__aeabi_d2iz>
 80088cc:	9017      	str	r0, [sp, #92]	; 0x5c
 80088ce:	f7f9 fc9f 	bl	8002210 <__aeabi_i2d>
 80088d2:	0002      	movs	r2, r0
 80088d4:	000b      	movs	r3, r1
 80088d6:	0020      	movs	r0, r4
 80088d8:	0029      	movs	r1, r5
 80088da:	f7f9 f8b3 	bl	8001a44 <__aeabi_dsub>
 80088de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088e0:	9a08      	ldr	r2, [sp, #32]
 80088e2:	3330      	adds	r3, #48	; 0x30
 80088e4:	7013      	strb	r3, [r2, #0]
 80088e6:	0013      	movs	r3, r2
 80088e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80088ea:	3301      	adds	r3, #1
 80088ec:	0004      	movs	r4, r0
 80088ee:	000d      	movs	r5, r1
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d12c      	bne.n	8008950 <_dtoa_r+0x680>
 80088f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088fa:	9a06      	ldr	r2, [sp, #24]
 80088fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088fe:	4694      	mov	ip, r2
 8008900:	4463      	add	r3, ip
 8008902:	2200      	movs	r2, #0
 8008904:	9308      	str	r3, [sp, #32]
 8008906:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <_dtoa_r+0x6b0>)
 8008908:	f7f7 fef2 	bl	80006f0 <__aeabi_dadd>
 800890c:	0002      	movs	r2, r0
 800890e:	000b      	movs	r3, r1
 8008910:	0020      	movs	r0, r4
 8008912:	0029      	movs	r1, r5
 8008914:	f7f7 fdbe 	bl	8000494 <__aeabi_dcmpgt>
 8008918:	2800      	cmp	r0, #0
 800891a:	d000      	beq.n	800891e <_dtoa_r+0x64e>
 800891c:	e080      	b.n	8008a20 <_dtoa_r+0x750>
 800891e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	2000      	movs	r0, #0
 8008924:	4916      	ldr	r1, [pc, #88]	; (8008980 <_dtoa_r+0x6b0>)
 8008926:	f7f9 f88d 	bl	8001a44 <__aeabi_dsub>
 800892a:	0002      	movs	r2, r0
 800892c:	000b      	movs	r3, r1
 800892e:	0020      	movs	r0, r4
 8008930:	0029      	movs	r1, r5
 8008932:	f7f7 fd9b 	bl	800046c <__aeabi_dcmplt>
 8008936:	2800      	cmp	r0, #0
 8008938:	d100      	bne.n	800893c <_dtoa_r+0x66c>
 800893a:	e714      	b.n	8008766 <_dtoa_r+0x496>
 800893c:	9b08      	ldr	r3, [sp, #32]
 800893e:	001a      	movs	r2, r3
 8008940:	3a01      	subs	r2, #1
 8008942:	9208      	str	r2, [sp, #32]
 8008944:	7812      	ldrb	r2, [r2, #0]
 8008946:	2a30      	cmp	r2, #48	; 0x30
 8008948:	d0f8      	beq.n	800893c <_dtoa_r+0x66c>
 800894a:	9308      	str	r3, [sp, #32]
 800894c:	9602      	str	r6, [sp, #8]
 800894e:	e055      	b.n	80089fc <_dtoa_r+0x72c>
 8008950:	2200      	movs	r2, #0
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <_dtoa_r+0x69c>)
 8008954:	f7f8 fe0a 	bl	800156c <__aeabi_dmul>
 8008958:	0004      	movs	r4, r0
 800895a:	000d      	movs	r5, r1
 800895c:	e7b2      	b.n	80088c4 <_dtoa_r+0x5f4>
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	0800a7f0 	.word	0x0800a7f0
 8008964:	0800a7c8 	.word	0x0800a7c8
 8008968:	3ff00000 	.word	0x3ff00000
 800896c:	40240000 	.word	0x40240000
 8008970:	401c0000 	.word	0x401c0000
 8008974:	fcc00000 	.word	0xfcc00000
 8008978:	40140000 	.word	0x40140000
 800897c:	7cc00000 	.word	0x7cc00000
 8008980:	3fe00000 	.word	0x3fe00000
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	9e06      	ldr	r6, [sp, #24]
 8008988:	3b01      	subs	r3, #1
 800898a:	199b      	adds	r3, r3, r6
 800898c:	930c      	str	r3, [sp, #48]	; 0x30
 800898e:	9c08      	ldr	r4, [sp, #32]
 8008990:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008996:	0020      	movs	r0, r4
 8008998:	0029      	movs	r1, r5
 800899a:	f7f8 f9e5 	bl	8000d68 <__aeabi_ddiv>
 800899e:	f7f9 fc01 	bl	80021a4 <__aeabi_d2iz>
 80089a2:	9007      	str	r0, [sp, #28]
 80089a4:	f7f9 fc34 	bl	8002210 <__aeabi_i2d>
 80089a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ac:	f7f8 fdde 	bl	800156c <__aeabi_dmul>
 80089b0:	0002      	movs	r2, r0
 80089b2:	000b      	movs	r3, r1
 80089b4:	0020      	movs	r0, r4
 80089b6:	0029      	movs	r1, r5
 80089b8:	f7f9 f844 	bl	8001a44 <__aeabi_dsub>
 80089bc:	0033      	movs	r3, r6
 80089be:	9a07      	ldr	r2, [sp, #28]
 80089c0:	3601      	adds	r6, #1
 80089c2:	3230      	adds	r2, #48	; 0x30
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089c8:	9608      	str	r6, [sp, #32]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d139      	bne.n	8008a42 <_dtoa_r+0x772>
 80089ce:	0002      	movs	r2, r0
 80089d0:	000b      	movs	r3, r1
 80089d2:	f7f7 fe8d 	bl	80006f0 <__aeabi_dadd>
 80089d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089da:	0004      	movs	r4, r0
 80089dc:	000d      	movs	r5, r1
 80089de:	f7f7 fd59 	bl	8000494 <__aeabi_dcmpgt>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d11b      	bne.n	8008a1e <_dtoa_r+0x74e>
 80089e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ea:	0020      	movs	r0, r4
 80089ec:	0029      	movs	r1, r5
 80089ee:	f7f7 fd37 	bl	8000460 <__aeabi_dcmpeq>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d002      	beq.n	80089fc <_dtoa_r+0x72c>
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	07db      	lsls	r3, r3, #31
 80089fa:	d410      	bmi.n	8008a1e <_dtoa_r+0x74e>
 80089fc:	0038      	movs	r0, r7
 80089fe:	9905      	ldr	r1, [sp, #20]
 8008a00:	f000 fbec 	bl	80091dc <_Bfree>
 8008a04:	2300      	movs	r3, #0
 8008a06:	9a08      	ldr	r2, [sp, #32]
 8008a08:	9802      	ldr	r0, [sp, #8]
 8008a0a:	7013      	strb	r3, [r2, #0]
 8008a0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a0e:	3001      	adds	r0, #1
 8008a10:	6018      	str	r0, [r3, #0]
 8008a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d100      	bne.n	8008a1a <_dtoa_r+0x74a>
 8008a18:	e4a6      	b.n	8008368 <_dtoa_r+0x98>
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	e4a4      	b.n	8008368 <_dtoa_r+0x98>
 8008a1e:	9e02      	ldr	r6, [sp, #8]
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	2a39      	cmp	r2, #57	; 0x39
 8008a2a:	d106      	bne.n	8008a3a <_dtoa_r+0x76a>
 8008a2c:	9a06      	ldr	r2, [sp, #24]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d1f7      	bne.n	8008a22 <_dtoa_r+0x752>
 8008a32:	2230      	movs	r2, #48	; 0x30
 8008a34:	9906      	ldr	r1, [sp, #24]
 8008a36:	3601      	adds	r6, #1
 8008a38:	700a      	strb	r2, [r1, #0]
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	3201      	adds	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	e784      	b.n	800894c <_dtoa_r+0x67c>
 8008a42:	2200      	movs	r2, #0
 8008a44:	4baa      	ldr	r3, [pc, #680]	; (8008cf0 <_dtoa_r+0xa20>)
 8008a46:	f7f8 fd91 	bl	800156c <__aeabi_dmul>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	0004      	movs	r4, r0
 8008a50:	000d      	movs	r5, r1
 8008a52:	f7f7 fd05 	bl	8000460 <__aeabi_dcmpeq>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d09b      	beq.n	8008992 <_dtoa_r+0x6c2>
 8008a5a:	e7cf      	b.n	80089fc <_dtoa_r+0x72c>
 8008a5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d012      	beq.n	8008a8c <_dtoa_r+0x7bc>
 8008a66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a68:	2a01      	cmp	r2, #1
 8008a6a:	dc66      	bgt.n	8008b3a <_dtoa_r+0x86a>
 8008a6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	d05d      	beq.n	8008b2e <_dtoa_r+0x85e>
 8008a72:	4aa0      	ldr	r2, [pc, #640]	; (8008cf4 <_dtoa_r+0xa24>)
 8008a74:	189b      	adds	r3, r3, r2
 8008a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a78:	2101      	movs	r1, #1
 8008a7a:	18d2      	adds	r2, r2, r3
 8008a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a80:	0038      	movs	r0, r7
 8008a82:	18d3      	adds	r3, r2, r3
 8008a84:	930d      	str	r3, [sp, #52]	; 0x34
 8008a86:	f000 fc59 	bl	800933c <__i2b>
 8008a8a:	0005      	movs	r5, r0
 8008a8c:	2c00      	cmp	r4, #0
 8008a8e:	dd0e      	ble.n	8008aae <_dtoa_r+0x7de>
 8008a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	dd0b      	ble.n	8008aae <_dtoa_r+0x7de>
 8008a96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a98:	0023      	movs	r3, r4
 8008a9a:	4294      	cmp	r4, r2
 8008a9c:	dd00      	ble.n	8008aa0 <_dtoa_r+0x7d0>
 8008a9e:	0013      	movs	r3, r2
 8008aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa2:	1ae4      	subs	r4, r4, r3
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	920a      	str	r2, [sp, #40]	; 0x28
 8008aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	930d      	str	r3, [sp, #52]	; 0x34
 8008aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01f      	beq.n	8008af4 <_dtoa_r+0x824>
 8008ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d054      	beq.n	8008b64 <_dtoa_r+0x894>
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	dd11      	ble.n	8008ae2 <_dtoa_r+0x812>
 8008abe:	0029      	movs	r1, r5
 8008ac0:	0032      	movs	r2, r6
 8008ac2:	0038      	movs	r0, r7
 8008ac4:	f000 fd00 	bl	80094c8 <__pow5mult>
 8008ac8:	9a05      	ldr	r2, [sp, #20]
 8008aca:	0001      	movs	r1, r0
 8008acc:	0005      	movs	r5, r0
 8008ace:	0038      	movs	r0, r7
 8008ad0:	f000 fc4a 	bl	8009368 <__multiply>
 8008ad4:	9905      	ldr	r1, [sp, #20]
 8008ad6:	9014      	str	r0, [sp, #80]	; 0x50
 8008ad8:	0038      	movs	r0, r7
 8008ada:	f000 fb7f 	bl	80091dc <_Bfree>
 8008ade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae4:	1b9a      	subs	r2, r3, r6
 8008ae6:	42b3      	cmp	r3, r6
 8008ae8:	d004      	beq.n	8008af4 <_dtoa_r+0x824>
 8008aea:	0038      	movs	r0, r7
 8008aec:	9905      	ldr	r1, [sp, #20]
 8008aee:	f000 fceb 	bl	80094c8 <__pow5mult>
 8008af2:	9005      	str	r0, [sp, #20]
 8008af4:	2101      	movs	r1, #1
 8008af6:	0038      	movs	r0, r7
 8008af8:	f000 fc20 	bl	800933c <__i2b>
 8008afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008afe:	0006      	movs	r6, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dd31      	ble.n	8008b68 <_dtoa_r+0x898>
 8008b04:	001a      	movs	r2, r3
 8008b06:	0001      	movs	r1, r0
 8008b08:	0038      	movs	r0, r7
 8008b0a:	f000 fcdd 	bl	80094c8 <__pow5mult>
 8008b0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b10:	0006      	movs	r6, r0
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	dd2d      	ble.n	8008b72 <_dtoa_r+0x8a2>
 8008b16:	2300      	movs	r3, #0
 8008b18:	930e      	str	r3, [sp, #56]	; 0x38
 8008b1a:	6933      	ldr	r3, [r6, #16]
 8008b1c:	3303      	adds	r3, #3
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	18f3      	adds	r3, r6, r3
 8008b22:	6858      	ldr	r0, [r3, #4]
 8008b24:	f000 fbc2 	bl	80092ac <__hi0bits>
 8008b28:	2320      	movs	r3, #32
 8008b2a:	1a18      	subs	r0, r3, r0
 8008b2c:	e039      	b.n	8008ba2 <_dtoa_r+0x8d2>
 8008b2e:	2336      	movs	r3, #54	; 0x36
 8008b30:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008b34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	e79d      	b.n	8008a76 <_dtoa_r+0x7a6>
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	1e5e      	subs	r6, r3, #1
 8008b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b40:	42b3      	cmp	r3, r6
 8008b42:	db07      	blt.n	8008b54 <_dtoa_r+0x884>
 8008b44:	1b9e      	subs	r6, r3, r6
 8008b46:	9b07      	ldr	r3, [sp, #28]
 8008b48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da93      	bge.n	8008a76 <_dtoa_r+0x7a6>
 8008b4e:	1ae4      	subs	r4, r4, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	e790      	b.n	8008a76 <_dtoa_r+0x7a6>
 8008b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b58:	1af3      	subs	r3, r6, r3
 8008b5a:	18d3      	adds	r3, r2, r3
 8008b5c:	960e      	str	r6, [sp, #56]	; 0x38
 8008b5e:	9315      	str	r3, [sp, #84]	; 0x54
 8008b60:	2600      	movs	r6, #0
 8008b62:	e7f0      	b.n	8008b46 <_dtoa_r+0x876>
 8008b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b66:	e7c0      	b.n	8008aea <_dtoa_r+0x81a>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	dc13      	bgt.n	8008b9a <_dtoa_r+0x8ca>
 8008b72:	2300      	movs	r3, #0
 8008b74:	930e      	str	r3, [sp, #56]	; 0x38
 8008b76:	9b08      	ldr	r3, [sp, #32]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10e      	bne.n	8008b9a <_dtoa_r+0x8ca>
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	031b      	lsls	r3, r3, #12
 8008b80:	d10b      	bne.n	8008b9a <_dtoa_r+0x8ca>
 8008b82:	4b5d      	ldr	r3, [pc, #372]	; (8008cf8 <_dtoa_r+0xa28>)
 8008b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b86:	4213      	tst	r3, r2
 8008b88:	d007      	beq.n	8008b9a <_dtoa_r+0x8ca>
 8008b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b92:	3301      	adds	r3, #1
 8008b94:	930d      	str	r3, [sp, #52]	; 0x34
 8008b96:	2301      	movs	r3, #1
 8008b98:	930e      	str	r3, [sp, #56]	; 0x38
 8008b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1bb      	bne.n	8008b1a <_dtoa_r+0x84a>
 8008ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba4:	221f      	movs	r2, #31
 8008ba6:	1818      	adds	r0, r3, r0
 8008ba8:	0003      	movs	r3, r0
 8008baa:	4013      	ands	r3, r2
 8008bac:	4210      	tst	r0, r2
 8008bae:	d046      	beq.n	8008c3e <_dtoa_r+0x96e>
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	2a04      	cmp	r2, #4
 8008bb6:	dd3f      	ble.n	8008c38 <_dtoa_r+0x968>
 8008bb8:	221c      	movs	r2, #28
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bbe:	18e4      	adds	r4, r4, r3
 8008bc0:	18d2      	adds	r2, r2, r3
 8008bc2:	920a      	str	r2, [sp, #40]	; 0x28
 8008bc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8008bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dd05      	ble.n	8008bdc <_dtoa_r+0x90c>
 8008bd0:	001a      	movs	r2, r3
 8008bd2:	0038      	movs	r0, r7
 8008bd4:	9905      	ldr	r1, [sp, #20]
 8008bd6:	f000 fcd3 	bl	8009580 <__lshift>
 8008bda:	9005      	str	r0, [sp, #20]
 8008bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd05      	ble.n	8008bee <_dtoa_r+0x91e>
 8008be2:	0031      	movs	r1, r6
 8008be4:	001a      	movs	r2, r3
 8008be6:	0038      	movs	r0, r7
 8008be8:	f000 fcca 	bl	8009580 <__lshift>
 8008bec:	0006      	movs	r6, r0
 8008bee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d026      	beq.n	8008c42 <_dtoa_r+0x972>
 8008bf4:	0031      	movs	r1, r6
 8008bf6:	9805      	ldr	r0, [sp, #20]
 8008bf8:	f000 fd30 	bl	800965c <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	da20      	bge.n	8008c42 <_dtoa_r+0x972>
 8008c00:	9b02      	ldr	r3, [sp, #8]
 8008c02:	220a      	movs	r2, #10
 8008c04:	3b01      	subs	r3, #1
 8008c06:	9302      	str	r3, [sp, #8]
 8008c08:	0038      	movs	r0, r7
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9905      	ldr	r1, [sp, #20]
 8008c0e:	f000 fb09 	bl	8009224 <__multadd>
 8008c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c14:	9005      	str	r0, [sp, #20]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d100      	bne.n	8008c1c <_dtoa_r+0x94c>
 8008c1a:	e166      	b.n	8008eea <_dtoa_r+0xc1a>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	0029      	movs	r1, r5
 8008c20:	220a      	movs	r2, #10
 8008c22:	0038      	movs	r0, r7
 8008c24:	f000 fafe 	bl	8009224 <__multadd>
 8008c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c2a:	0005      	movs	r5, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dc47      	bgt.n	8008cc0 <_dtoa_r+0x9f0>
 8008c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	dc0d      	bgt.n	8008c52 <_dtoa_r+0x982>
 8008c36:	e043      	b.n	8008cc0 <_dtoa_r+0x9f0>
 8008c38:	2a04      	cmp	r2, #4
 8008c3a:	d0c6      	beq.n	8008bca <_dtoa_r+0x8fa>
 8008c3c:	0013      	movs	r3, r2
 8008c3e:	331c      	adds	r3, #28
 8008c40:	e7bc      	b.n	8008bbc <_dtoa_r+0x8ec>
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc35      	bgt.n	8008cb4 <_dtoa_r+0x9e4>
 8008c48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	dd32      	ble.n	8008cb4 <_dtoa_r+0x9e4>
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	930c      	str	r3, [sp, #48]	; 0x30
 8008c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10c      	bne.n	8008c72 <_dtoa_r+0x9a2>
 8008c58:	0031      	movs	r1, r6
 8008c5a:	2205      	movs	r2, #5
 8008c5c:	0038      	movs	r0, r7
 8008c5e:	f000 fae1 	bl	8009224 <__multadd>
 8008c62:	0006      	movs	r6, r0
 8008c64:	0001      	movs	r1, r0
 8008c66:	9805      	ldr	r0, [sp, #20]
 8008c68:	f000 fcf8 	bl	800965c <__mcmp>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	dd00      	ble.n	8008c72 <_dtoa_r+0x9a2>
 8008c70:	e5a5      	b.n	80087be <_dtoa_r+0x4ee>
 8008c72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c74:	43db      	mvns	r3, r3
 8008c76:	9302      	str	r3, [sp, #8]
 8008c78:	9b06      	ldr	r3, [sp, #24]
 8008c7a:	9308      	str	r3, [sp, #32]
 8008c7c:	2400      	movs	r4, #0
 8008c7e:	0031      	movs	r1, r6
 8008c80:	0038      	movs	r0, r7
 8008c82:	f000 faab 	bl	80091dc <_Bfree>
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	d100      	bne.n	8008c8c <_dtoa_r+0x9bc>
 8008c8a:	e6b7      	b.n	80089fc <_dtoa_r+0x72c>
 8008c8c:	2c00      	cmp	r4, #0
 8008c8e:	d005      	beq.n	8008c9c <_dtoa_r+0x9cc>
 8008c90:	42ac      	cmp	r4, r5
 8008c92:	d003      	beq.n	8008c9c <_dtoa_r+0x9cc>
 8008c94:	0021      	movs	r1, r4
 8008c96:	0038      	movs	r0, r7
 8008c98:	f000 faa0 	bl	80091dc <_Bfree>
 8008c9c:	0029      	movs	r1, r5
 8008c9e:	0038      	movs	r0, r7
 8008ca0:	f000 fa9c 	bl	80091dc <_Bfree>
 8008ca4:	e6aa      	b.n	80089fc <_dtoa_r+0x72c>
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	0035      	movs	r5, r6
 8008caa:	e7e2      	b.n	8008c72 <_dtoa_r+0x9a2>
 8008cac:	9602      	str	r6, [sp, #8]
 8008cae:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008cb0:	0035      	movs	r5, r6
 8008cb2:	e584      	b.n	80087be <_dtoa_r+0x4ee>
 8008cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d100      	bne.n	8008cbc <_dtoa_r+0x9ec>
 8008cba:	e0ce      	b.n	8008e5a <_dtoa_r+0xb8a>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008cc0:	2c00      	cmp	r4, #0
 8008cc2:	dd05      	ble.n	8008cd0 <_dtoa_r+0xa00>
 8008cc4:	0029      	movs	r1, r5
 8008cc6:	0022      	movs	r2, r4
 8008cc8:	0038      	movs	r0, r7
 8008cca:	f000 fc59 	bl	8009580 <__lshift>
 8008cce:	0005      	movs	r5, r0
 8008cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd2:	0028      	movs	r0, r5
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d022      	beq.n	8008d1e <_dtoa_r+0xa4e>
 8008cd8:	0038      	movs	r0, r7
 8008cda:	6869      	ldr	r1, [r5, #4]
 8008cdc:	f000 fa3a 	bl	8009154 <_Balloc>
 8008ce0:	1e04      	subs	r4, r0, #0
 8008ce2:	d10f      	bne.n	8008d04 <_dtoa_r+0xa34>
 8008ce4:	0002      	movs	r2, r0
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <_dtoa_r+0xa2c>)
 8008ce8:	4905      	ldr	r1, [pc, #20]	; (8008d00 <_dtoa_r+0xa30>)
 8008cea:	f7ff fb06 	bl	80082fa <_dtoa_r+0x2a>
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	40240000 	.word	0x40240000
 8008cf4:	00000433 	.word	0x00000433
 8008cf8:	7ff00000 	.word	0x7ff00000
 8008cfc:	0800a6f7 	.word	0x0800a6f7
 8008d00:	000002ea 	.word	0x000002ea
 8008d04:	0029      	movs	r1, r5
 8008d06:	692b      	ldr	r3, [r5, #16]
 8008d08:	310c      	adds	r1, #12
 8008d0a:	1c9a      	adds	r2, r3, #2
 8008d0c:	0092      	lsls	r2, r2, #2
 8008d0e:	300c      	adds	r0, #12
 8008d10:	f000 fa17 	bl	8009142 <memcpy>
 8008d14:	2201      	movs	r2, #1
 8008d16:	0021      	movs	r1, r4
 8008d18:	0038      	movs	r0, r7
 8008d1a:	f000 fc31 	bl	8009580 <__lshift>
 8008d1e:	9b06      	ldr	r3, [sp, #24]
 8008d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d22:	930a      	str	r3, [sp, #40]	; 0x28
 8008d24:	3b01      	subs	r3, #1
 8008d26:	189b      	adds	r3, r3, r2
 8008d28:	2201      	movs	r2, #1
 8008d2a:	002c      	movs	r4, r5
 8008d2c:	0005      	movs	r5, r0
 8008d2e:	9314      	str	r3, [sp, #80]	; 0x50
 8008d30:	9b08      	ldr	r3, [sp, #32]
 8008d32:	4013      	ands	r3, r2
 8008d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d36:	0031      	movs	r1, r6
 8008d38:	9805      	ldr	r0, [sp, #20]
 8008d3a:	f7ff fa3d 	bl	80081b8 <quorem>
 8008d3e:	0003      	movs	r3, r0
 8008d40:	0021      	movs	r1, r4
 8008d42:	3330      	adds	r3, #48	; 0x30
 8008d44:	900d      	str	r0, [sp, #52]	; 0x34
 8008d46:	9805      	ldr	r0, [sp, #20]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f000 fc87 	bl	800965c <__mcmp>
 8008d4e:	002a      	movs	r2, r5
 8008d50:	900e      	str	r0, [sp, #56]	; 0x38
 8008d52:	0031      	movs	r1, r6
 8008d54:	0038      	movs	r0, r7
 8008d56:	f000 fc9d 	bl	8009694 <__mdiff>
 8008d5a:	68c3      	ldr	r3, [r0, #12]
 8008d5c:	9008      	str	r0, [sp, #32]
 8008d5e:	9310      	str	r3, [sp, #64]	; 0x40
 8008d60:	2301      	movs	r3, #1
 8008d62:	930c      	str	r3, [sp, #48]	; 0x30
 8008d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d104      	bne.n	8008d74 <_dtoa_r+0xaa4>
 8008d6a:	0001      	movs	r1, r0
 8008d6c:	9805      	ldr	r0, [sp, #20]
 8008d6e:	f000 fc75 	bl	800965c <__mcmp>
 8008d72:	900c      	str	r0, [sp, #48]	; 0x30
 8008d74:	0038      	movs	r0, r7
 8008d76:	9908      	ldr	r1, [sp, #32]
 8008d78:	f000 fa30 	bl	80091dc <_Bfree>
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d80:	3301      	adds	r3, #1
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d86:	4313      	orrs	r3, r2
 8008d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	d10c      	bne.n	8008da8 <_dtoa_r+0xad8>
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	2b39      	cmp	r3, #57	; 0x39
 8008d92:	d026      	beq.n	8008de2 <_dtoa_r+0xb12>
 8008d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	dd02      	ble.n	8008da0 <_dtoa_r+0xad0>
 8008d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d9c:	3331      	adds	r3, #49	; 0x31
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da2:	9a07      	ldr	r2, [sp, #28]
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e76a      	b.n	8008c7e <_dtoa_r+0x9ae>
 8008da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db04      	blt.n	8008db8 <_dtoa_r+0xae8>
 8008dae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008db0:	4313      	orrs	r3, r2
 8008db2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008db4:	4313      	orrs	r3, r2
 8008db6:	d11f      	bne.n	8008df8 <_dtoa_r+0xb28>
 8008db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	ddf0      	ble.n	8008da0 <_dtoa_r+0xad0>
 8008dbe:	9905      	ldr	r1, [sp, #20]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	0038      	movs	r0, r7
 8008dc4:	f000 fbdc 	bl	8009580 <__lshift>
 8008dc8:	0031      	movs	r1, r6
 8008dca:	9005      	str	r0, [sp, #20]
 8008dcc:	f000 fc46 	bl	800965c <__mcmp>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dc03      	bgt.n	8008ddc <_dtoa_r+0xb0c>
 8008dd4:	d1e4      	bne.n	8008da0 <_dtoa_r+0xad0>
 8008dd6:	9b07      	ldr	r3, [sp, #28]
 8008dd8:	07db      	lsls	r3, r3, #31
 8008dda:	d5e1      	bpl.n	8008da0 <_dtoa_r+0xad0>
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	2b39      	cmp	r3, #57	; 0x39
 8008de0:	d1db      	bne.n	8008d9a <_dtoa_r+0xaca>
 8008de2:	2339      	movs	r3, #57	; 0x39
 8008de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de6:	7013      	strb	r3, [r2, #0]
 8008de8:	9b08      	ldr	r3, [sp, #32]
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	2a39      	cmp	r2, #57	; 0x39
 8008df2:	d068      	beq.n	8008ec6 <_dtoa_r+0xbf6>
 8008df4:	3201      	adds	r2, #1
 8008df6:	e7d5      	b.n	8008da4 <_dtoa_r+0xad4>
 8008df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dd07      	ble.n	8008e0e <_dtoa_r+0xb3e>
 8008dfe:	9b07      	ldr	r3, [sp, #28]
 8008e00:	2b39      	cmp	r3, #57	; 0x39
 8008e02:	d0ee      	beq.n	8008de2 <_dtoa_r+0xb12>
 8008e04:	9b07      	ldr	r3, [sp, #28]
 8008e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e08:	3301      	adds	r3, #1
 8008e0a:	7013      	strb	r3, [r2, #0]
 8008e0c:	e737      	b.n	8008c7e <_dtoa_r+0x9ae>
 8008e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d03e      	beq.n	8008e9a <_dtoa_r+0xbca>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	220a      	movs	r2, #10
 8008e20:	9905      	ldr	r1, [sp, #20]
 8008e22:	0038      	movs	r0, r7
 8008e24:	f000 f9fe 	bl	8009224 <__multadd>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9005      	str	r0, [sp, #20]
 8008e2c:	220a      	movs	r2, #10
 8008e2e:	0021      	movs	r1, r4
 8008e30:	0038      	movs	r0, r7
 8008e32:	42ac      	cmp	r4, r5
 8008e34:	d106      	bne.n	8008e44 <_dtoa_r+0xb74>
 8008e36:	f000 f9f5 	bl	8009224 <__multadd>
 8008e3a:	0004      	movs	r4, r0
 8008e3c:	0005      	movs	r5, r0
 8008e3e:	9b08      	ldr	r3, [sp, #32]
 8008e40:	930a      	str	r3, [sp, #40]	; 0x28
 8008e42:	e778      	b.n	8008d36 <_dtoa_r+0xa66>
 8008e44:	f000 f9ee 	bl	8009224 <__multadd>
 8008e48:	0029      	movs	r1, r5
 8008e4a:	0004      	movs	r4, r0
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	220a      	movs	r2, #10
 8008e50:	0038      	movs	r0, r7
 8008e52:	f000 f9e7 	bl	8009224 <__multadd>
 8008e56:	0005      	movs	r5, r0
 8008e58:	e7f1      	b.n	8008e3e <_dtoa_r+0xb6e>
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e5e:	2400      	movs	r4, #0
 8008e60:	0031      	movs	r1, r6
 8008e62:	9805      	ldr	r0, [sp, #20]
 8008e64:	f7ff f9a8 	bl	80081b8 <quorem>
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	3030      	adds	r0, #48	; 0x30
 8008e6c:	5518      	strb	r0, [r3, r4]
 8008e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e70:	3401      	adds	r4, #1
 8008e72:	9007      	str	r0, [sp, #28]
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	dd07      	ble.n	8008e88 <_dtoa_r+0xbb8>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	220a      	movs	r2, #10
 8008e7c:	0038      	movs	r0, r7
 8008e7e:	9905      	ldr	r1, [sp, #20]
 8008e80:	f000 f9d0 	bl	8009224 <__multadd>
 8008e84:	9005      	str	r0, [sp, #20]
 8008e86:	e7eb      	b.n	8008e60 <_dtoa_r+0xb90>
 8008e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dd00      	ble.n	8008e92 <_dtoa_r+0xbc2>
 8008e90:	0018      	movs	r0, r3
 8008e92:	2400      	movs	r4, #0
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	181b      	adds	r3, r3, r0
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	9905      	ldr	r1, [sp, #20]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	0038      	movs	r0, r7
 8008ea0:	f000 fb6e 	bl	8009580 <__lshift>
 8008ea4:	0031      	movs	r1, r6
 8008ea6:	9005      	str	r0, [sp, #20]
 8008ea8:	f000 fbd8 	bl	800965c <__mcmp>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	dc9b      	bgt.n	8008de8 <_dtoa_r+0xb18>
 8008eb0:	d102      	bne.n	8008eb8 <_dtoa_r+0xbe8>
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	07db      	lsls	r3, r3, #31
 8008eb6:	d497      	bmi.n	8008de8 <_dtoa_r+0xb18>
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	9308      	str	r3, [sp, #32]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	781a      	ldrb	r2, [r3, #0]
 8008ec0:	2a30      	cmp	r2, #48	; 0x30
 8008ec2:	d0fa      	beq.n	8008eba <_dtoa_r+0xbea>
 8008ec4:	e6db      	b.n	8008c7e <_dtoa_r+0x9ae>
 8008ec6:	9a06      	ldr	r2, [sp, #24]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d18e      	bne.n	8008dea <_dtoa_r+0xb1a>
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	9302      	str	r3, [sp, #8]
 8008ed2:	2331      	movs	r3, #49	; 0x31
 8008ed4:	e799      	b.n	8008e0a <_dtoa_r+0xb3a>
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <_dtoa_r+0xc2c>)
 8008ed8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008eda:	9306      	str	r3, [sp, #24]
 8008edc:	4b08      	ldr	r3, [pc, #32]	; (8008f00 <_dtoa_r+0xc30>)
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	d001      	beq.n	8008ee6 <_dtoa_r+0xc16>
 8008ee2:	f7ff fa3f 	bl	8008364 <_dtoa_r+0x94>
 8008ee6:	f7ff fa3f 	bl	8008368 <_dtoa_r+0x98>
 8008eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dcb6      	bgt.n	8008e5e <_dtoa_r+0xb8e>
 8008ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	dd00      	ble.n	8008ef8 <_dtoa_r+0xc28>
 8008ef6:	e6ac      	b.n	8008c52 <_dtoa_r+0x982>
 8008ef8:	e7b1      	b.n	8008e5e <_dtoa_r+0xb8e>
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	0800a678 	.word	0x0800a678
 8008f00:	0800a680 	.word	0x0800a680

08008f04 <std>:
 8008f04:	2300      	movs	r3, #0
 8008f06:	b510      	push	{r4, lr}
 8008f08:	0004      	movs	r4, r0
 8008f0a:	6003      	str	r3, [r0, #0]
 8008f0c:	6043      	str	r3, [r0, #4]
 8008f0e:	6083      	str	r3, [r0, #8]
 8008f10:	8181      	strh	r1, [r0, #12]
 8008f12:	6643      	str	r3, [r0, #100]	; 0x64
 8008f14:	0019      	movs	r1, r3
 8008f16:	81c2      	strh	r2, [r0, #14]
 8008f18:	6103      	str	r3, [r0, #16]
 8008f1a:	6143      	str	r3, [r0, #20]
 8008f1c:	6183      	str	r3, [r0, #24]
 8008f1e:	2208      	movs	r2, #8
 8008f20:	305c      	adds	r0, #92	; 0x5c
 8008f22:	f7fe fcb9 	bl	8007898 <memset>
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <std+0x38>)
 8008f28:	6224      	str	r4, [r4, #32]
 8008f2a:	6263      	str	r3, [r4, #36]	; 0x24
 8008f2c:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <std+0x3c>)
 8008f2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <std+0x40>)
 8008f32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <std+0x44>)
 8008f36:	6323      	str	r3, [r4, #48]	; 0x30
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	08009d91 	.word	0x08009d91
 8008f40:	08009db9 	.word	0x08009db9
 8008f44:	08009df1 	.word	0x08009df1
 8008f48:	08009e1d 	.word	0x08009e1d

08008f4c <_cleanup_r>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	4902      	ldr	r1, [pc, #8]	; (8008f58 <_cleanup_r+0xc>)
 8008f50:	f000 f8ba 	bl	80090c8 <_fwalk_reent>
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	0800a165 	.word	0x0800a165

08008f5c <__sfmoreglue>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	2568      	movs	r5, #104	; 0x68
 8008f60:	1e4a      	subs	r2, r1, #1
 8008f62:	4355      	muls	r5, r2
 8008f64:	000e      	movs	r6, r1
 8008f66:	0029      	movs	r1, r5
 8008f68:	3174      	adds	r1, #116	; 0x74
 8008f6a:	f000 fd27 	bl	80099bc <_malloc_r>
 8008f6e:	1e04      	subs	r4, r0, #0
 8008f70:	d008      	beq.n	8008f84 <__sfmoreglue+0x28>
 8008f72:	2100      	movs	r1, #0
 8008f74:	002a      	movs	r2, r5
 8008f76:	6001      	str	r1, [r0, #0]
 8008f78:	6046      	str	r6, [r0, #4]
 8008f7a:	300c      	adds	r0, #12
 8008f7c:	60a0      	str	r0, [r4, #8]
 8008f7e:	3268      	adds	r2, #104	; 0x68
 8008f80:	f7fe fc8a 	bl	8007898 <memset>
 8008f84:	0020      	movs	r0, r4
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__sfp_lock_acquire>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	4802      	ldr	r0, [pc, #8]	; (8008f94 <__sfp_lock_acquire+0xc>)
 8008f8c:	f000 f8c1 	bl	8009112 <__retarget_lock_acquire_recursive>
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	200003ed 	.word	0x200003ed

08008f98 <__sfp_lock_release>:
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <__sfp_lock_release+0xc>)
 8008f9c:	f000 f8ba 	bl	8009114 <__retarget_lock_release_recursive>
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	200003ed 	.word	0x200003ed

08008fa8 <__sinit_lock_acquire>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	4802      	ldr	r0, [pc, #8]	; (8008fb4 <__sinit_lock_acquire+0xc>)
 8008fac:	f000 f8b1 	bl	8009112 <__retarget_lock_acquire_recursive>
 8008fb0:	bd10      	pop	{r4, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	200003ee 	.word	0x200003ee

08008fb8 <__sinit_lock_release>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4802      	ldr	r0, [pc, #8]	; (8008fc4 <__sinit_lock_release+0xc>)
 8008fbc:	f000 f8aa 	bl	8009114 <__retarget_lock_release_recursive>
 8008fc0:	bd10      	pop	{r4, pc}
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	200003ee 	.word	0x200003ee

08008fc8 <__sinit>:
 8008fc8:	b513      	push	{r0, r1, r4, lr}
 8008fca:	0004      	movs	r4, r0
 8008fcc:	f7ff ffec 	bl	8008fa8 <__sinit_lock_acquire>
 8008fd0:	69a3      	ldr	r3, [r4, #24]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <__sinit+0x14>
 8008fd6:	f7ff ffef 	bl	8008fb8 <__sinit_lock_release>
 8008fda:	bd13      	pop	{r0, r1, r4, pc}
 8008fdc:	64a3      	str	r3, [r4, #72]	; 0x48
 8008fde:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fe2:	4b13      	ldr	r3, [pc, #76]	; (8009030 <__sinit+0x68>)
 8008fe4:	4a13      	ldr	r2, [pc, #76]	; (8009034 <__sinit+0x6c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d101      	bne.n	8008ff4 <__sinit+0x2c>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	61a3      	str	r3, [r4, #24]
 8008ff4:	0020      	movs	r0, r4
 8008ff6:	f000 f81f 	bl	8009038 <__sfp>
 8008ffa:	6060      	str	r0, [r4, #4]
 8008ffc:	0020      	movs	r0, r4
 8008ffe:	f000 f81b 	bl	8009038 <__sfp>
 8009002:	60a0      	str	r0, [r4, #8]
 8009004:	0020      	movs	r0, r4
 8009006:	f000 f817 	bl	8009038 <__sfp>
 800900a:	2200      	movs	r2, #0
 800900c:	2104      	movs	r1, #4
 800900e:	60e0      	str	r0, [r4, #12]
 8009010:	6860      	ldr	r0, [r4, #4]
 8009012:	f7ff ff77 	bl	8008f04 <std>
 8009016:	2201      	movs	r2, #1
 8009018:	2109      	movs	r1, #9
 800901a:	68a0      	ldr	r0, [r4, #8]
 800901c:	f7ff ff72 	bl	8008f04 <std>
 8009020:	2202      	movs	r2, #2
 8009022:	2112      	movs	r1, #18
 8009024:	68e0      	ldr	r0, [r4, #12]
 8009026:	f7ff ff6d 	bl	8008f04 <std>
 800902a:	2301      	movs	r3, #1
 800902c:	61a3      	str	r3, [r4, #24]
 800902e:	e7d2      	b.n	8008fd6 <__sinit+0xe>
 8009030:	0800a640 	.word	0x0800a640
 8009034:	08008f4d 	.word	0x08008f4d

08009038 <__sfp>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	0007      	movs	r7, r0
 800903c:	f7ff ffa4 	bl	8008f88 <__sfp_lock_acquire>
 8009040:	4b1f      	ldr	r3, [pc, #124]	; (80090c0 <__sfp+0x88>)
 8009042:	681e      	ldr	r6, [r3, #0]
 8009044:	69b3      	ldr	r3, [r6, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <__sfp+0x18>
 800904a:	0030      	movs	r0, r6
 800904c:	f7ff ffbc 	bl	8008fc8 <__sinit>
 8009050:	3648      	adds	r6, #72	; 0x48
 8009052:	68b4      	ldr	r4, [r6, #8]
 8009054:	6873      	ldr	r3, [r6, #4]
 8009056:	3b01      	subs	r3, #1
 8009058:	d504      	bpl.n	8009064 <__sfp+0x2c>
 800905a:	6833      	ldr	r3, [r6, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d022      	beq.n	80090a6 <__sfp+0x6e>
 8009060:	6836      	ldr	r6, [r6, #0]
 8009062:	e7f6      	b.n	8009052 <__sfp+0x1a>
 8009064:	220c      	movs	r2, #12
 8009066:	5ea5      	ldrsh	r5, [r4, r2]
 8009068:	2d00      	cmp	r5, #0
 800906a:	d11a      	bne.n	80090a2 <__sfp+0x6a>
 800906c:	0020      	movs	r0, r4
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <__sfp+0x8c>)
 8009070:	3058      	adds	r0, #88	; 0x58
 8009072:	60e3      	str	r3, [r4, #12]
 8009074:	6665      	str	r5, [r4, #100]	; 0x64
 8009076:	f000 f84b 	bl	8009110 <__retarget_lock_init_recursive>
 800907a:	f7ff ff8d 	bl	8008f98 <__sfp_lock_release>
 800907e:	0020      	movs	r0, r4
 8009080:	2208      	movs	r2, #8
 8009082:	0029      	movs	r1, r5
 8009084:	6025      	str	r5, [r4, #0]
 8009086:	60a5      	str	r5, [r4, #8]
 8009088:	6065      	str	r5, [r4, #4]
 800908a:	6125      	str	r5, [r4, #16]
 800908c:	6165      	str	r5, [r4, #20]
 800908e:	61a5      	str	r5, [r4, #24]
 8009090:	305c      	adds	r0, #92	; 0x5c
 8009092:	f7fe fc01 	bl	8007898 <memset>
 8009096:	6365      	str	r5, [r4, #52]	; 0x34
 8009098:	63a5      	str	r5, [r4, #56]	; 0x38
 800909a:	64a5      	str	r5, [r4, #72]	; 0x48
 800909c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800909e:	0020      	movs	r0, r4
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a2:	3468      	adds	r4, #104	; 0x68
 80090a4:	e7d7      	b.n	8009056 <__sfp+0x1e>
 80090a6:	2104      	movs	r1, #4
 80090a8:	0038      	movs	r0, r7
 80090aa:	f7ff ff57 	bl	8008f5c <__sfmoreglue>
 80090ae:	1e04      	subs	r4, r0, #0
 80090b0:	6030      	str	r0, [r6, #0]
 80090b2:	d1d5      	bne.n	8009060 <__sfp+0x28>
 80090b4:	f7ff ff70 	bl	8008f98 <__sfp_lock_release>
 80090b8:	230c      	movs	r3, #12
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	e7ef      	b.n	800909e <__sfp+0x66>
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	0800a640 	.word	0x0800a640
 80090c4:	ffff0001 	.word	0xffff0001

080090c8 <_fwalk_reent>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	0004      	movs	r4, r0
 80090cc:	0006      	movs	r6, r0
 80090ce:	2700      	movs	r7, #0
 80090d0:	9101      	str	r1, [sp, #4]
 80090d2:	3448      	adds	r4, #72	; 0x48
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	68a5      	ldr	r5, [r4, #8]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	9b00      	ldr	r3, [sp, #0]
 80090dc:	3b01      	subs	r3, #1
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	d504      	bpl.n	80090ec <_fwalk_reent+0x24>
 80090e2:	6824      	ldr	r4, [r4, #0]
 80090e4:	2c00      	cmp	r4, #0
 80090e6:	d1f5      	bne.n	80090d4 <_fwalk_reent+0xc>
 80090e8:	0038      	movs	r0, r7
 80090ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d908      	bls.n	8009104 <_fwalk_reent+0x3c>
 80090f2:	220e      	movs	r2, #14
 80090f4:	5eab      	ldrsh	r3, [r5, r2]
 80090f6:	3301      	adds	r3, #1
 80090f8:	d004      	beq.n	8009104 <_fwalk_reent+0x3c>
 80090fa:	0029      	movs	r1, r5
 80090fc:	0030      	movs	r0, r6
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	4798      	blx	r3
 8009102:	4307      	orrs	r7, r0
 8009104:	3568      	adds	r5, #104	; 0x68
 8009106:	e7e8      	b.n	80090da <_fwalk_reent+0x12>

08009108 <_localeconv_r>:
 8009108:	4800      	ldr	r0, [pc, #0]	; (800910c <_localeconv_r+0x4>)
 800910a:	4770      	bx	lr
 800910c:	20000174 	.word	0x20000174

08009110 <__retarget_lock_init_recursive>:
 8009110:	4770      	bx	lr

08009112 <__retarget_lock_acquire_recursive>:
 8009112:	4770      	bx	lr

08009114 <__retarget_lock_release_recursive>:
 8009114:	4770      	bx	lr
	...

08009118 <malloc>:
 8009118:	b510      	push	{r4, lr}
 800911a:	4b03      	ldr	r3, [pc, #12]	; (8009128 <malloc+0x10>)
 800911c:	0001      	movs	r1, r0
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	f000 fc4c 	bl	80099bc <_malloc_r>
 8009124:	bd10      	pop	{r4, pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	20000020 	.word	0x20000020

0800912c <memchr>:
 800912c:	b2c9      	uxtb	r1, r1
 800912e:	1882      	adds	r2, r0, r2
 8009130:	4290      	cmp	r0, r2
 8009132:	d101      	bne.n	8009138 <memchr+0xc>
 8009134:	2000      	movs	r0, #0
 8009136:	4770      	bx	lr
 8009138:	7803      	ldrb	r3, [r0, #0]
 800913a:	428b      	cmp	r3, r1
 800913c:	d0fb      	beq.n	8009136 <memchr+0xa>
 800913e:	3001      	adds	r0, #1
 8009140:	e7f6      	b.n	8009130 <memchr+0x4>

08009142 <memcpy>:
 8009142:	2300      	movs	r3, #0
 8009144:	b510      	push	{r4, lr}
 8009146:	429a      	cmp	r2, r3
 8009148:	d100      	bne.n	800914c <memcpy+0xa>
 800914a:	bd10      	pop	{r4, pc}
 800914c:	5ccc      	ldrb	r4, [r1, r3]
 800914e:	54c4      	strb	r4, [r0, r3]
 8009150:	3301      	adds	r3, #1
 8009152:	e7f8      	b.n	8009146 <memcpy+0x4>

08009154 <_Balloc>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009158:	0006      	movs	r6, r0
 800915a:	000c      	movs	r4, r1
 800915c:	2d00      	cmp	r5, #0
 800915e:	d10e      	bne.n	800917e <_Balloc+0x2a>
 8009160:	2010      	movs	r0, #16
 8009162:	f7ff ffd9 	bl	8009118 <malloc>
 8009166:	1e02      	subs	r2, r0, #0
 8009168:	6270      	str	r0, [r6, #36]	; 0x24
 800916a:	d104      	bne.n	8009176 <_Balloc+0x22>
 800916c:	2166      	movs	r1, #102	; 0x66
 800916e:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <_Balloc+0x80>)
 8009170:	4819      	ldr	r0, [pc, #100]	; (80091d8 <_Balloc+0x84>)
 8009172:	f000 ff3b 	bl	8009fec <__assert_func>
 8009176:	6045      	str	r5, [r0, #4]
 8009178:	6085      	str	r5, [r0, #8]
 800917a:	6005      	str	r5, [r0, #0]
 800917c:	60c5      	str	r5, [r0, #12]
 800917e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009180:	68eb      	ldr	r3, [r5, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d013      	beq.n	80091ae <_Balloc+0x5a>
 8009186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009188:	00a2      	lsls	r2, r4, #2
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	189b      	adds	r3, r3, r2
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	2800      	cmp	r0, #0
 8009192:	d118      	bne.n	80091c6 <_Balloc+0x72>
 8009194:	2101      	movs	r1, #1
 8009196:	000d      	movs	r5, r1
 8009198:	40a5      	lsls	r5, r4
 800919a:	1d6a      	adds	r2, r5, #5
 800919c:	0030      	movs	r0, r6
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	f000 fb74 	bl	800988c <_calloc_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d00c      	beq.n	80091c2 <_Balloc+0x6e>
 80091a8:	6044      	str	r4, [r0, #4]
 80091aa:	6085      	str	r5, [r0, #8]
 80091ac:	e00d      	b.n	80091ca <_Balloc+0x76>
 80091ae:	2221      	movs	r2, #33	; 0x21
 80091b0:	2104      	movs	r1, #4
 80091b2:	0030      	movs	r0, r6
 80091b4:	f000 fb6a 	bl	800988c <_calloc_r>
 80091b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091ba:	60e8      	str	r0, [r5, #12]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e1      	bne.n	8009186 <_Balloc+0x32>
 80091c2:	2000      	movs	r0, #0
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
 80091c6:	6802      	ldr	r2, [r0, #0]
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	2300      	movs	r3, #0
 80091cc:	6103      	str	r3, [r0, #16]
 80091ce:	60c3      	str	r3, [r0, #12]
 80091d0:	e7f8      	b.n	80091c4 <_Balloc+0x70>
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	0800a685 	.word	0x0800a685
 80091d8:	0800a768 	.word	0x0800a768

080091dc <_Bfree>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091e0:	0005      	movs	r5, r0
 80091e2:	000c      	movs	r4, r1
 80091e4:	2e00      	cmp	r6, #0
 80091e6:	d10e      	bne.n	8009206 <_Bfree+0x2a>
 80091e8:	2010      	movs	r0, #16
 80091ea:	f7ff ff95 	bl	8009118 <malloc>
 80091ee:	1e02      	subs	r2, r0, #0
 80091f0:	6268      	str	r0, [r5, #36]	; 0x24
 80091f2:	d104      	bne.n	80091fe <_Bfree+0x22>
 80091f4:	218a      	movs	r1, #138	; 0x8a
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <_Bfree+0x40>)
 80091f8:	4809      	ldr	r0, [pc, #36]	; (8009220 <_Bfree+0x44>)
 80091fa:	f000 fef7 	bl	8009fec <__assert_func>
 80091fe:	6046      	str	r6, [r0, #4]
 8009200:	6086      	str	r6, [r0, #8]
 8009202:	6006      	str	r6, [r0, #0]
 8009204:	60c6      	str	r6, [r0, #12]
 8009206:	2c00      	cmp	r4, #0
 8009208:	d007      	beq.n	800921a <_Bfree+0x3e>
 800920a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	189b      	adds	r3, r3, r2
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	6022      	str	r2, [r4, #0]
 8009218:	601c      	str	r4, [r3, #0]
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	0800a685 	.word	0x0800a685
 8009220:	0800a768 	.word	0x0800a768

08009224 <__multadd>:
 8009224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009226:	000e      	movs	r6, r1
 8009228:	9001      	str	r0, [sp, #4]
 800922a:	000c      	movs	r4, r1
 800922c:	001d      	movs	r5, r3
 800922e:	2000      	movs	r0, #0
 8009230:	690f      	ldr	r7, [r1, #16]
 8009232:	3614      	adds	r6, #20
 8009234:	6833      	ldr	r3, [r6, #0]
 8009236:	3001      	adds	r0, #1
 8009238:	b299      	uxth	r1, r3
 800923a:	4351      	muls	r1, r2
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	4353      	muls	r3, r2
 8009240:	1949      	adds	r1, r1, r5
 8009242:	0c0d      	lsrs	r5, r1, #16
 8009244:	195b      	adds	r3, r3, r5
 8009246:	0c1d      	lsrs	r5, r3, #16
 8009248:	b289      	uxth	r1, r1
 800924a:	041b      	lsls	r3, r3, #16
 800924c:	185b      	adds	r3, r3, r1
 800924e:	c608      	stmia	r6!, {r3}
 8009250:	4287      	cmp	r7, r0
 8009252:	dcef      	bgt.n	8009234 <__multadd+0x10>
 8009254:	2d00      	cmp	r5, #0
 8009256:	d022      	beq.n	800929e <__multadd+0x7a>
 8009258:	68a3      	ldr	r3, [r4, #8]
 800925a:	42bb      	cmp	r3, r7
 800925c:	dc19      	bgt.n	8009292 <__multadd+0x6e>
 800925e:	6863      	ldr	r3, [r4, #4]
 8009260:	9801      	ldr	r0, [sp, #4]
 8009262:	1c59      	adds	r1, r3, #1
 8009264:	f7ff ff76 	bl	8009154 <_Balloc>
 8009268:	1e06      	subs	r6, r0, #0
 800926a:	d105      	bne.n	8009278 <__multadd+0x54>
 800926c:	0002      	movs	r2, r0
 800926e:	21b5      	movs	r1, #181	; 0xb5
 8009270:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <__multadd+0x80>)
 8009272:	480d      	ldr	r0, [pc, #52]	; (80092a8 <__multadd+0x84>)
 8009274:	f000 feba 	bl	8009fec <__assert_func>
 8009278:	0021      	movs	r1, r4
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	310c      	adds	r1, #12
 800927e:	1c9a      	adds	r2, r3, #2
 8009280:	0092      	lsls	r2, r2, #2
 8009282:	300c      	adds	r0, #12
 8009284:	f7ff ff5d 	bl	8009142 <memcpy>
 8009288:	0021      	movs	r1, r4
 800928a:	9801      	ldr	r0, [sp, #4]
 800928c:	f7ff ffa6 	bl	80091dc <_Bfree>
 8009290:	0034      	movs	r4, r6
 8009292:	1d3b      	adds	r3, r7, #4
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	18e3      	adds	r3, r4, r3
 8009298:	605d      	str	r5, [r3, #4]
 800929a:	1c7b      	adds	r3, r7, #1
 800929c:	6123      	str	r3, [r4, #16]
 800929e:	0020      	movs	r0, r4
 80092a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092a2:	46c0      	nop			; (mov r8, r8)
 80092a4:	0800a6f7 	.word	0x0800a6f7
 80092a8:	0800a768 	.word	0x0800a768

080092ac <__hi0bits>:
 80092ac:	0003      	movs	r3, r0
 80092ae:	0c02      	lsrs	r2, r0, #16
 80092b0:	2000      	movs	r0, #0
 80092b2:	4282      	cmp	r2, r0
 80092b4:	d101      	bne.n	80092ba <__hi0bits+0xe>
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	3010      	adds	r0, #16
 80092ba:	0e1a      	lsrs	r2, r3, #24
 80092bc:	d101      	bne.n	80092c2 <__hi0bits+0x16>
 80092be:	3008      	adds	r0, #8
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	0f1a      	lsrs	r2, r3, #28
 80092c4:	d101      	bne.n	80092ca <__hi0bits+0x1e>
 80092c6:	3004      	adds	r0, #4
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	0f9a      	lsrs	r2, r3, #30
 80092cc:	d101      	bne.n	80092d2 <__hi0bits+0x26>
 80092ce:	3002      	adds	r0, #2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db03      	blt.n	80092de <__hi0bits+0x32>
 80092d6:	3001      	adds	r0, #1
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	d400      	bmi.n	80092de <__hi0bits+0x32>
 80092dc:	2020      	movs	r0, #32
 80092de:	4770      	bx	lr

080092e0 <__lo0bits>:
 80092e0:	6803      	ldr	r3, [r0, #0]
 80092e2:	0002      	movs	r2, r0
 80092e4:	2107      	movs	r1, #7
 80092e6:	0018      	movs	r0, r3
 80092e8:	4008      	ands	r0, r1
 80092ea:	420b      	tst	r3, r1
 80092ec:	d00d      	beq.n	800930a <__lo0bits+0x2a>
 80092ee:	3906      	subs	r1, #6
 80092f0:	2000      	movs	r0, #0
 80092f2:	420b      	tst	r3, r1
 80092f4:	d105      	bne.n	8009302 <__lo0bits+0x22>
 80092f6:	3002      	adds	r0, #2
 80092f8:	4203      	tst	r3, r0
 80092fa:	d003      	beq.n	8009304 <__lo0bits+0x24>
 80092fc:	40cb      	lsrs	r3, r1
 80092fe:	0008      	movs	r0, r1
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	4770      	bx	lr
 8009304:	089b      	lsrs	r3, r3, #2
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	e7fb      	b.n	8009302 <__lo0bits+0x22>
 800930a:	b299      	uxth	r1, r3
 800930c:	2900      	cmp	r1, #0
 800930e:	d101      	bne.n	8009314 <__lo0bits+0x34>
 8009310:	2010      	movs	r0, #16
 8009312:	0c1b      	lsrs	r3, r3, #16
 8009314:	b2d9      	uxtb	r1, r3
 8009316:	2900      	cmp	r1, #0
 8009318:	d101      	bne.n	800931e <__lo0bits+0x3e>
 800931a:	3008      	adds	r0, #8
 800931c:	0a1b      	lsrs	r3, r3, #8
 800931e:	0719      	lsls	r1, r3, #28
 8009320:	d101      	bne.n	8009326 <__lo0bits+0x46>
 8009322:	3004      	adds	r0, #4
 8009324:	091b      	lsrs	r3, r3, #4
 8009326:	0799      	lsls	r1, r3, #30
 8009328:	d101      	bne.n	800932e <__lo0bits+0x4e>
 800932a:	3002      	adds	r0, #2
 800932c:	089b      	lsrs	r3, r3, #2
 800932e:	07d9      	lsls	r1, r3, #31
 8009330:	d4e9      	bmi.n	8009306 <__lo0bits+0x26>
 8009332:	3001      	adds	r0, #1
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	d1e6      	bne.n	8009306 <__lo0bits+0x26>
 8009338:	2020      	movs	r0, #32
 800933a:	e7e2      	b.n	8009302 <__lo0bits+0x22>

0800933c <__i2b>:
 800933c:	b510      	push	{r4, lr}
 800933e:	000c      	movs	r4, r1
 8009340:	2101      	movs	r1, #1
 8009342:	f7ff ff07 	bl	8009154 <_Balloc>
 8009346:	2800      	cmp	r0, #0
 8009348:	d106      	bne.n	8009358 <__i2b+0x1c>
 800934a:	21a0      	movs	r1, #160	; 0xa0
 800934c:	0002      	movs	r2, r0
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <__i2b+0x24>)
 8009350:	4804      	ldr	r0, [pc, #16]	; (8009364 <__i2b+0x28>)
 8009352:	0049      	lsls	r1, r1, #1
 8009354:	f000 fe4a 	bl	8009fec <__assert_func>
 8009358:	2301      	movs	r3, #1
 800935a:	6144      	str	r4, [r0, #20]
 800935c:	6103      	str	r3, [r0, #16]
 800935e:	bd10      	pop	{r4, pc}
 8009360:	0800a6f7 	.word	0x0800a6f7
 8009364:	0800a768 	.word	0x0800a768

08009368 <__multiply>:
 8009368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936a:	690b      	ldr	r3, [r1, #16]
 800936c:	0014      	movs	r4, r2
 800936e:	6912      	ldr	r2, [r2, #16]
 8009370:	000d      	movs	r5, r1
 8009372:	b089      	sub	sp, #36	; 0x24
 8009374:	4293      	cmp	r3, r2
 8009376:	da01      	bge.n	800937c <__multiply+0x14>
 8009378:	0025      	movs	r5, r4
 800937a:	000c      	movs	r4, r1
 800937c:	692f      	ldr	r7, [r5, #16]
 800937e:	6926      	ldr	r6, [r4, #16]
 8009380:	6869      	ldr	r1, [r5, #4]
 8009382:	19bb      	adds	r3, r7, r6
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	68ab      	ldr	r3, [r5, #8]
 8009388:	19ba      	adds	r2, r7, r6
 800938a:	4293      	cmp	r3, r2
 800938c:	da00      	bge.n	8009390 <__multiply+0x28>
 800938e:	3101      	adds	r1, #1
 8009390:	f7ff fee0 	bl	8009154 <_Balloc>
 8009394:	9001      	str	r0, [sp, #4]
 8009396:	2800      	cmp	r0, #0
 8009398:	d106      	bne.n	80093a8 <__multiply+0x40>
 800939a:	215e      	movs	r1, #94	; 0x5e
 800939c:	0002      	movs	r2, r0
 800939e:	4b48      	ldr	r3, [pc, #288]	; (80094c0 <__multiply+0x158>)
 80093a0:	4848      	ldr	r0, [pc, #288]	; (80094c4 <__multiply+0x15c>)
 80093a2:	31ff      	adds	r1, #255	; 0xff
 80093a4:	f000 fe22 	bl	8009fec <__assert_func>
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	3314      	adds	r3, #20
 80093ae:	469c      	mov	ip, r3
 80093b0:	19bb      	adds	r3, r7, r6
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4463      	add	r3, ip
 80093b6:	9303      	str	r3, [sp, #12]
 80093b8:	4663      	mov	r3, ip
 80093ba:	9903      	ldr	r1, [sp, #12]
 80093bc:	428b      	cmp	r3, r1
 80093be:	d32c      	bcc.n	800941a <__multiply+0xb2>
 80093c0:	002b      	movs	r3, r5
 80093c2:	0022      	movs	r2, r4
 80093c4:	3314      	adds	r3, #20
 80093c6:	00bf      	lsls	r7, r7, #2
 80093c8:	3214      	adds	r2, #20
 80093ca:	9306      	str	r3, [sp, #24]
 80093cc:	00b6      	lsls	r6, r6, #2
 80093ce:	19db      	adds	r3, r3, r7
 80093d0:	9304      	str	r3, [sp, #16]
 80093d2:	1993      	adds	r3, r2, r6
 80093d4:	9307      	str	r3, [sp, #28]
 80093d6:	2304      	movs	r3, #4
 80093d8:	9305      	str	r3, [sp, #20]
 80093da:	002b      	movs	r3, r5
 80093dc:	9904      	ldr	r1, [sp, #16]
 80093de:	3315      	adds	r3, #21
 80093e0:	9200      	str	r2, [sp, #0]
 80093e2:	4299      	cmp	r1, r3
 80093e4:	d305      	bcc.n	80093f2 <__multiply+0x8a>
 80093e6:	1b4b      	subs	r3, r1, r5
 80093e8:	3b15      	subs	r3, #21
 80093ea:	089b      	lsrs	r3, r3, #2
 80093ec:	3301      	adds	r3, #1
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	9b07      	ldr	r3, [sp, #28]
 80093f4:	9a00      	ldr	r2, [sp, #0]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d311      	bcc.n	800941e <__multiply+0xb6>
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dd06      	ble.n	800940e <__multiply+0xa6>
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	3b04      	subs	r3, #4
 8009404:	9303      	str	r3, [sp, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d053      	beq.n	80094b6 <__multiply+0x14e>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	9a02      	ldr	r2, [sp, #8]
 8009412:	0018      	movs	r0, r3
 8009414:	611a      	str	r2, [r3, #16]
 8009416:	b009      	add	sp, #36	; 0x24
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941a:	c304      	stmia	r3!, {r2}
 800941c:	e7cd      	b.n	80093ba <__multiply+0x52>
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	b298      	uxth	r0, r3
 8009424:	2800      	cmp	r0, #0
 8009426:	d01b      	beq.n	8009460 <__multiply+0xf8>
 8009428:	4667      	mov	r7, ip
 800942a:	2400      	movs	r4, #0
 800942c:	9e06      	ldr	r6, [sp, #24]
 800942e:	ce02      	ldmia	r6!, {r1}
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	b28b      	uxth	r3, r1
 8009434:	4343      	muls	r3, r0
 8009436:	b292      	uxth	r2, r2
 8009438:	189b      	adds	r3, r3, r2
 800943a:	191b      	adds	r3, r3, r4
 800943c:	0c0c      	lsrs	r4, r1, #16
 800943e:	4344      	muls	r4, r0
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	0c11      	lsrs	r1, r2, #16
 8009444:	1861      	adds	r1, r4, r1
 8009446:	0c1c      	lsrs	r4, r3, #16
 8009448:	1909      	adds	r1, r1, r4
 800944a:	0c0c      	lsrs	r4, r1, #16
 800944c:	b29b      	uxth	r3, r3
 800944e:	0409      	lsls	r1, r1, #16
 8009450:	430b      	orrs	r3, r1
 8009452:	c708      	stmia	r7!, {r3}
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	42b3      	cmp	r3, r6
 8009458:	d8e9      	bhi.n	800942e <__multiply+0xc6>
 800945a:	4663      	mov	r3, ip
 800945c:	9a05      	ldr	r2, [sp, #20]
 800945e:	509c      	str	r4, [r3, r2]
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	0c1e      	lsrs	r6, r3, #16
 8009466:	d020      	beq.n	80094aa <__multiply+0x142>
 8009468:	4663      	mov	r3, ip
 800946a:	002c      	movs	r4, r5
 800946c:	4660      	mov	r0, ip
 800946e:	2700      	movs	r7, #0
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3414      	adds	r4, #20
 8009474:	6822      	ldr	r2, [r4, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	b291      	uxth	r1, r2
 800947a:	4371      	muls	r1, r6
 800947c:	6802      	ldr	r2, [r0, #0]
 800947e:	0c12      	lsrs	r2, r2, #16
 8009480:	1889      	adds	r1, r1, r2
 8009482:	19cf      	adds	r7, r1, r7
 8009484:	0439      	lsls	r1, r7, #16
 8009486:	430b      	orrs	r3, r1
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	cc02      	ldmia	r4!, {r1}
 800948c:	6843      	ldr	r3, [r0, #4]
 800948e:	0c09      	lsrs	r1, r1, #16
 8009490:	4371      	muls	r1, r6
 8009492:	b29b      	uxth	r3, r3
 8009494:	0c3f      	lsrs	r7, r7, #16
 8009496:	18cb      	adds	r3, r1, r3
 8009498:	9a04      	ldr	r2, [sp, #16]
 800949a:	19db      	adds	r3, r3, r7
 800949c:	0c1f      	lsrs	r7, r3, #16
 800949e:	3004      	adds	r0, #4
 80094a0:	42a2      	cmp	r2, r4
 80094a2:	d8e7      	bhi.n	8009474 <__multiply+0x10c>
 80094a4:	4662      	mov	r2, ip
 80094a6:	9905      	ldr	r1, [sp, #20]
 80094a8:	5053      	str	r3, [r2, r1]
 80094aa:	9b00      	ldr	r3, [sp, #0]
 80094ac:	3304      	adds	r3, #4
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	2304      	movs	r3, #4
 80094b2:	449c      	add	ip, r3
 80094b4:	e79d      	b.n	80093f2 <__multiply+0x8a>
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	e79d      	b.n	80093fa <__multiply+0x92>
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	0800a6f7 	.word	0x0800a6f7
 80094c4:	0800a768 	.word	0x0800a768

080094c8 <__pow5mult>:
 80094c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ca:	2303      	movs	r3, #3
 80094cc:	0015      	movs	r5, r2
 80094ce:	0007      	movs	r7, r0
 80094d0:	000e      	movs	r6, r1
 80094d2:	401a      	ands	r2, r3
 80094d4:	421d      	tst	r5, r3
 80094d6:	d008      	beq.n	80094ea <__pow5mult+0x22>
 80094d8:	4925      	ldr	r1, [pc, #148]	; (8009570 <__pow5mult+0xa8>)
 80094da:	3a01      	subs	r2, #1
 80094dc:	0092      	lsls	r2, r2, #2
 80094de:	5852      	ldr	r2, [r2, r1]
 80094e0:	2300      	movs	r3, #0
 80094e2:	0031      	movs	r1, r6
 80094e4:	f7ff fe9e 	bl	8009224 <__multadd>
 80094e8:	0006      	movs	r6, r0
 80094ea:	10ad      	asrs	r5, r5, #2
 80094ec:	d03d      	beq.n	800956a <__pow5mult+0xa2>
 80094ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80094f0:	2c00      	cmp	r4, #0
 80094f2:	d10f      	bne.n	8009514 <__pow5mult+0x4c>
 80094f4:	2010      	movs	r0, #16
 80094f6:	f7ff fe0f 	bl	8009118 <malloc>
 80094fa:	1e02      	subs	r2, r0, #0
 80094fc:	6278      	str	r0, [r7, #36]	; 0x24
 80094fe:	d105      	bne.n	800950c <__pow5mult+0x44>
 8009500:	21d7      	movs	r1, #215	; 0xd7
 8009502:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <__pow5mult+0xac>)
 8009504:	481c      	ldr	r0, [pc, #112]	; (8009578 <__pow5mult+0xb0>)
 8009506:	0049      	lsls	r1, r1, #1
 8009508:	f000 fd70 	bl	8009fec <__assert_func>
 800950c:	6044      	str	r4, [r0, #4]
 800950e:	6084      	str	r4, [r0, #8]
 8009510:	6004      	str	r4, [r0, #0]
 8009512:	60c4      	str	r4, [r0, #12]
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	689c      	ldr	r4, [r3, #8]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	2c00      	cmp	r4, #0
 800951c:	d108      	bne.n	8009530 <__pow5mult+0x68>
 800951e:	0038      	movs	r0, r7
 8009520:	4916      	ldr	r1, [pc, #88]	; (800957c <__pow5mult+0xb4>)
 8009522:	f7ff ff0b 	bl	800933c <__i2b>
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	0004      	movs	r4, r0
 800952a:	6098      	str	r0, [r3, #8]
 800952c:	2300      	movs	r3, #0
 800952e:	6003      	str	r3, [r0, #0]
 8009530:	2301      	movs	r3, #1
 8009532:	421d      	tst	r5, r3
 8009534:	d00a      	beq.n	800954c <__pow5mult+0x84>
 8009536:	0031      	movs	r1, r6
 8009538:	0022      	movs	r2, r4
 800953a:	0038      	movs	r0, r7
 800953c:	f7ff ff14 	bl	8009368 <__multiply>
 8009540:	0031      	movs	r1, r6
 8009542:	9001      	str	r0, [sp, #4]
 8009544:	0038      	movs	r0, r7
 8009546:	f7ff fe49 	bl	80091dc <_Bfree>
 800954a:	9e01      	ldr	r6, [sp, #4]
 800954c:	106d      	asrs	r5, r5, #1
 800954e:	d00c      	beq.n	800956a <__pow5mult+0xa2>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	2800      	cmp	r0, #0
 8009554:	d107      	bne.n	8009566 <__pow5mult+0x9e>
 8009556:	0022      	movs	r2, r4
 8009558:	0021      	movs	r1, r4
 800955a:	0038      	movs	r0, r7
 800955c:	f7ff ff04 	bl	8009368 <__multiply>
 8009560:	2300      	movs	r3, #0
 8009562:	6020      	str	r0, [r4, #0]
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	0004      	movs	r4, r0
 8009568:	e7e2      	b.n	8009530 <__pow5mult+0x68>
 800956a:	0030      	movs	r0, r6
 800956c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	0800a8b8 	.word	0x0800a8b8
 8009574:	0800a685 	.word	0x0800a685
 8009578:	0800a768 	.word	0x0800a768
 800957c:	00000271 	.word	0x00000271

08009580 <__lshift>:
 8009580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009582:	000c      	movs	r4, r1
 8009584:	0017      	movs	r7, r2
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	1155      	asrs	r5, r2, #5
 800958a:	b087      	sub	sp, #28
 800958c:	18eb      	adds	r3, r5, r3
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	3301      	adds	r3, #1
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	6849      	ldr	r1, [r1, #4]
 8009596:	68a3      	ldr	r3, [r4, #8]
 8009598:	9004      	str	r0, [sp, #16]
 800959a:	9a01      	ldr	r2, [sp, #4]
 800959c:	4293      	cmp	r3, r2
 800959e:	db10      	blt.n	80095c2 <__lshift+0x42>
 80095a0:	9804      	ldr	r0, [sp, #16]
 80095a2:	f7ff fdd7 	bl	8009154 <_Balloc>
 80095a6:	2300      	movs	r3, #0
 80095a8:	0002      	movs	r2, r0
 80095aa:	0006      	movs	r6, r0
 80095ac:	0019      	movs	r1, r3
 80095ae:	3214      	adds	r2, #20
 80095b0:	4298      	cmp	r0, r3
 80095b2:	d10c      	bne.n	80095ce <__lshift+0x4e>
 80095b4:	21da      	movs	r1, #218	; 0xda
 80095b6:	0002      	movs	r2, r0
 80095b8:	4b26      	ldr	r3, [pc, #152]	; (8009654 <__lshift+0xd4>)
 80095ba:	4827      	ldr	r0, [pc, #156]	; (8009658 <__lshift+0xd8>)
 80095bc:	31ff      	adds	r1, #255	; 0xff
 80095be:	f000 fd15 	bl	8009fec <__assert_func>
 80095c2:	3101      	adds	r1, #1
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	e7e8      	b.n	800959a <__lshift+0x1a>
 80095c8:	0098      	lsls	r0, r3, #2
 80095ca:	5011      	str	r1, [r2, r0]
 80095cc:	3301      	adds	r3, #1
 80095ce:	42ab      	cmp	r3, r5
 80095d0:	dbfa      	blt.n	80095c8 <__lshift+0x48>
 80095d2:	43eb      	mvns	r3, r5
 80095d4:	17db      	asrs	r3, r3, #31
 80095d6:	401d      	ands	r5, r3
 80095d8:	211f      	movs	r1, #31
 80095da:	0023      	movs	r3, r4
 80095dc:	0038      	movs	r0, r7
 80095de:	00ad      	lsls	r5, r5, #2
 80095e0:	1955      	adds	r5, r2, r5
 80095e2:	6922      	ldr	r2, [r4, #16]
 80095e4:	3314      	adds	r3, #20
 80095e6:	0092      	lsls	r2, r2, #2
 80095e8:	4008      	ands	r0, r1
 80095ea:	4684      	mov	ip, r0
 80095ec:	189a      	adds	r2, r3, r2
 80095ee:	420f      	tst	r7, r1
 80095f0:	d02a      	beq.n	8009648 <__lshift+0xc8>
 80095f2:	3101      	adds	r1, #1
 80095f4:	1a09      	subs	r1, r1, r0
 80095f6:	9105      	str	r1, [sp, #20]
 80095f8:	2100      	movs	r1, #0
 80095fa:	9503      	str	r5, [sp, #12]
 80095fc:	4667      	mov	r7, ip
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	40b8      	lsls	r0, r7
 8009602:	4301      	orrs	r1, r0
 8009604:	9803      	ldr	r0, [sp, #12]
 8009606:	c002      	stmia	r0!, {r1}
 8009608:	cb02      	ldmia	r3!, {r1}
 800960a:	9003      	str	r0, [sp, #12]
 800960c:	9805      	ldr	r0, [sp, #20]
 800960e:	40c1      	lsrs	r1, r0
 8009610:	429a      	cmp	r2, r3
 8009612:	d8f3      	bhi.n	80095fc <__lshift+0x7c>
 8009614:	0020      	movs	r0, r4
 8009616:	3015      	adds	r0, #21
 8009618:	2304      	movs	r3, #4
 800961a:	4282      	cmp	r2, r0
 800961c:	d304      	bcc.n	8009628 <__lshift+0xa8>
 800961e:	1b13      	subs	r3, r2, r4
 8009620:	3b15      	subs	r3, #21
 8009622:	089b      	lsrs	r3, r3, #2
 8009624:	3301      	adds	r3, #1
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	50e9      	str	r1, [r5, r3]
 800962a:	2900      	cmp	r1, #0
 800962c:	d002      	beq.n	8009634 <__lshift+0xb4>
 800962e:	9b02      	ldr	r3, [sp, #8]
 8009630:	3302      	adds	r3, #2
 8009632:	9301      	str	r3, [sp, #4]
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	9804      	ldr	r0, [sp, #16]
 8009638:	3b01      	subs	r3, #1
 800963a:	0021      	movs	r1, r4
 800963c:	6133      	str	r3, [r6, #16]
 800963e:	f7ff fdcd 	bl	80091dc <_Bfree>
 8009642:	0030      	movs	r0, r6
 8009644:	b007      	add	sp, #28
 8009646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009648:	cb02      	ldmia	r3!, {r1}
 800964a:	c502      	stmia	r5!, {r1}
 800964c:	429a      	cmp	r2, r3
 800964e:	d8fb      	bhi.n	8009648 <__lshift+0xc8>
 8009650:	e7f0      	b.n	8009634 <__lshift+0xb4>
 8009652:	46c0      	nop			; (mov r8, r8)
 8009654:	0800a6f7 	.word	0x0800a6f7
 8009658:	0800a768 	.word	0x0800a768

0800965c <__mcmp>:
 800965c:	6902      	ldr	r2, [r0, #16]
 800965e:	690b      	ldr	r3, [r1, #16]
 8009660:	b530      	push	{r4, r5, lr}
 8009662:	0004      	movs	r4, r0
 8009664:	1ad0      	subs	r0, r2, r3
 8009666:	429a      	cmp	r2, r3
 8009668:	d10d      	bne.n	8009686 <__mcmp+0x2a>
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	3414      	adds	r4, #20
 800966e:	3114      	adds	r1, #20
 8009670:	18e2      	adds	r2, r4, r3
 8009672:	18c9      	adds	r1, r1, r3
 8009674:	3a04      	subs	r2, #4
 8009676:	3904      	subs	r1, #4
 8009678:	6815      	ldr	r5, [r2, #0]
 800967a:	680b      	ldr	r3, [r1, #0]
 800967c:	429d      	cmp	r5, r3
 800967e:	d003      	beq.n	8009688 <__mcmp+0x2c>
 8009680:	2001      	movs	r0, #1
 8009682:	429d      	cmp	r5, r3
 8009684:	d303      	bcc.n	800968e <__mcmp+0x32>
 8009686:	bd30      	pop	{r4, r5, pc}
 8009688:	4294      	cmp	r4, r2
 800968a:	d3f3      	bcc.n	8009674 <__mcmp+0x18>
 800968c:	e7fb      	b.n	8009686 <__mcmp+0x2a>
 800968e:	4240      	negs	r0, r0
 8009690:	e7f9      	b.n	8009686 <__mcmp+0x2a>
	...

08009694 <__mdiff>:
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009696:	000e      	movs	r6, r1
 8009698:	0007      	movs	r7, r0
 800969a:	0011      	movs	r1, r2
 800969c:	0030      	movs	r0, r6
 800969e:	b087      	sub	sp, #28
 80096a0:	0014      	movs	r4, r2
 80096a2:	f7ff ffdb 	bl	800965c <__mcmp>
 80096a6:	1e05      	subs	r5, r0, #0
 80096a8:	d110      	bne.n	80096cc <__mdiff+0x38>
 80096aa:	0001      	movs	r1, r0
 80096ac:	0038      	movs	r0, r7
 80096ae:	f7ff fd51 	bl	8009154 <_Balloc>
 80096b2:	1e02      	subs	r2, r0, #0
 80096b4:	d104      	bne.n	80096c0 <__mdiff+0x2c>
 80096b6:	4b40      	ldr	r3, [pc, #256]	; (80097b8 <__mdiff+0x124>)
 80096b8:	4940      	ldr	r1, [pc, #256]	; (80097bc <__mdiff+0x128>)
 80096ba:	4841      	ldr	r0, [pc, #260]	; (80097c0 <__mdiff+0x12c>)
 80096bc:	f000 fc96 	bl	8009fec <__assert_func>
 80096c0:	2301      	movs	r3, #1
 80096c2:	6145      	str	r5, [r0, #20]
 80096c4:	6103      	str	r3, [r0, #16]
 80096c6:	0010      	movs	r0, r2
 80096c8:	b007      	add	sp, #28
 80096ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096cc:	2301      	movs	r3, #1
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	2800      	cmp	r0, #0
 80096d2:	db04      	blt.n	80096de <__mdiff+0x4a>
 80096d4:	0023      	movs	r3, r4
 80096d6:	0034      	movs	r4, r6
 80096d8:	001e      	movs	r6, r3
 80096da:	2300      	movs	r3, #0
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	0038      	movs	r0, r7
 80096e0:	6861      	ldr	r1, [r4, #4]
 80096e2:	f7ff fd37 	bl	8009154 <_Balloc>
 80096e6:	1e02      	subs	r2, r0, #0
 80096e8:	d103      	bne.n	80096f2 <__mdiff+0x5e>
 80096ea:	2190      	movs	r1, #144	; 0x90
 80096ec:	4b32      	ldr	r3, [pc, #200]	; (80097b8 <__mdiff+0x124>)
 80096ee:	0089      	lsls	r1, r1, #2
 80096f0:	e7e3      	b.n	80096ba <__mdiff+0x26>
 80096f2:	9b01      	ldr	r3, [sp, #4]
 80096f4:	2700      	movs	r7, #0
 80096f6:	60c3      	str	r3, [r0, #12]
 80096f8:	6920      	ldr	r0, [r4, #16]
 80096fa:	3414      	adds	r4, #20
 80096fc:	9401      	str	r4, [sp, #4]
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	0084      	lsls	r4, r0, #2
 8009702:	191b      	adds	r3, r3, r4
 8009704:	0034      	movs	r4, r6
 8009706:	9302      	str	r3, [sp, #8]
 8009708:	6933      	ldr	r3, [r6, #16]
 800970a:	3414      	adds	r4, #20
 800970c:	0099      	lsls	r1, r3, #2
 800970e:	1863      	adds	r3, r4, r1
 8009710:	9303      	str	r3, [sp, #12]
 8009712:	0013      	movs	r3, r2
 8009714:	3314      	adds	r3, #20
 8009716:	469c      	mov	ip, r3
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	cc02      	ldmia	r4!, {r1}
 8009722:	cb20      	ldmia	r3!, {r5}
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	b2ab      	uxth	r3, r5
 8009728:	19df      	adds	r7, r3, r7
 800972a:	b28b      	uxth	r3, r1
 800972c:	1afb      	subs	r3, r7, r3
 800972e:	0c09      	lsrs	r1, r1, #16
 8009730:	0c2d      	lsrs	r5, r5, #16
 8009732:	1a6d      	subs	r5, r5, r1
 8009734:	1419      	asrs	r1, r3, #16
 8009736:	186d      	adds	r5, r5, r1
 8009738:	4661      	mov	r1, ip
 800973a:	142f      	asrs	r7, r5, #16
 800973c:	b29b      	uxth	r3, r3
 800973e:	042d      	lsls	r5, r5, #16
 8009740:	432b      	orrs	r3, r5
 8009742:	c108      	stmia	r1!, {r3}
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	468c      	mov	ip, r1
 8009748:	42a3      	cmp	r3, r4
 800974a:	d8e8      	bhi.n	800971e <__mdiff+0x8a>
 800974c:	0031      	movs	r1, r6
 800974e:	9c03      	ldr	r4, [sp, #12]
 8009750:	3115      	adds	r1, #21
 8009752:	2304      	movs	r3, #4
 8009754:	428c      	cmp	r4, r1
 8009756:	d304      	bcc.n	8009762 <__mdiff+0xce>
 8009758:	1ba3      	subs	r3, r4, r6
 800975a:	3b15      	subs	r3, #21
 800975c:	089b      	lsrs	r3, r3, #2
 800975e:	3301      	adds	r3, #1
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	9901      	ldr	r1, [sp, #4]
 8009764:	18cc      	adds	r4, r1, r3
 8009766:	9905      	ldr	r1, [sp, #20]
 8009768:	0026      	movs	r6, r4
 800976a:	18cb      	adds	r3, r1, r3
 800976c:	469c      	mov	ip, r3
 800976e:	9902      	ldr	r1, [sp, #8]
 8009770:	428e      	cmp	r6, r1
 8009772:	d310      	bcc.n	8009796 <__mdiff+0x102>
 8009774:	9e02      	ldr	r6, [sp, #8]
 8009776:	1ee1      	subs	r1, r4, #3
 8009778:	2500      	movs	r5, #0
 800977a:	428e      	cmp	r6, r1
 800977c:	d304      	bcc.n	8009788 <__mdiff+0xf4>
 800977e:	0031      	movs	r1, r6
 8009780:	3103      	adds	r1, #3
 8009782:	1b0c      	subs	r4, r1, r4
 8009784:	08a4      	lsrs	r4, r4, #2
 8009786:	00a5      	lsls	r5, r4, #2
 8009788:	195b      	adds	r3, r3, r5
 800978a:	3b04      	subs	r3, #4
 800978c:	6819      	ldr	r1, [r3, #0]
 800978e:	2900      	cmp	r1, #0
 8009790:	d00f      	beq.n	80097b2 <__mdiff+0x11e>
 8009792:	6110      	str	r0, [r2, #16]
 8009794:	e797      	b.n	80096c6 <__mdiff+0x32>
 8009796:	ce02      	ldmia	r6!, {r1}
 8009798:	b28d      	uxth	r5, r1
 800979a:	19ed      	adds	r5, r5, r7
 800979c:	0c0f      	lsrs	r7, r1, #16
 800979e:	1429      	asrs	r1, r5, #16
 80097a0:	1879      	adds	r1, r7, r1
 80097a2:	140f      	asrs	r7, r1, #16
 80097a4:	b2ad      	uxth	r5, r5
 80097a6:	0409      	lsls	r1, r1, #16
 80097a8:	430d      	orrs	r5, r1
 80097aa:	4661      	mov	r1, ip
 80097ac:	c120      	stmia	r1!, {r5}
 80097ae:	468c      	mov	ip, r1
 80097b0:	e7dd      	b.n	800976e <__mdiff+0xda>
 80097b2:	3801      	subs	r0, #1
 80097b4:	e7e9      	b.n	800978a <__mdiff+0xf6>
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	0800a6f7 	.word	0x0800a6f7
 80097bc:	00000232 	.word	0x00000232
 80097c0:	0800a768 	.word	0x0800a768

080097c4 <__d2b>:
 80097c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097c6:	2101      	movs	r1, #1
 80097c8:	0014      	movs	r4, r2
 80097ca:	001e      	movs	r6, r3
 80097cc:	9f08      	ldr	r7, [sp, #32]
 80097ce:	f7ff fcc1 	bl	8009154 <_Balloc>
 80097d2:	1e05      	subs	r5, r0, #0
 80097d4:	d105      	bne.n	80097e2 <__d2b+0x1e>
 80097d6:	0002      	movs	r2, r0
 80097d8:	4b26      	ldr	r3, [pc, #152]	; (8009874 <__d2b+0xb0>)
 80097da:	4927      	ldr	r1, [pc, #156]	; (8009878 <__d2b+0xb4>)
 80097dc:	4827      	ldr	r0, [pc, #156]	; (800987c <__d2b+0xb8>)
 80097de:	f000 fc05 	bl	8009fec <__assert_func>
 80097e2:	0333      	lsls	r3, r6, #12
 80097e4:	0076      	lsls	r6, r6, #1
 80097e6:	0b1b      	lsrs	r3, r3, #12
 80097e8:	0d76      	lsrs	r6, r6, #21
 80097ea:	d124      	bne.n	8009836 <__d2b+0x72>
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	d027      	beq.n	8009842 <__d2b+0x7e>
 80097f2:	4668      	mov	r0, sp
 80097f4:	9400      	str	r4, [sp, #0]
 80097f6:	f7ff fd73 	bl	80092e0 <__lo0bits>
 80097fa:	9c00      	ldr	r4, [sp, #0]
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d01e      	beq.n	800983e <__d2b+0x7a>
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	2120      	movs	r1, #32
 8009804:	001a      	movs	r2, r3
 8009806:	1a09      	subs	r1, r1, r0
 8009808:	408a      	lsls	r2, r1
 800980a:	40c3      	lsrs	r3, r0
 800980c:	4322      	orrs	r2, r4
 800980e:	616a      	str	r2, [r5, #20]
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	9c01      	ldr	r4, [sp, #4]
 8009814:	61ac      	str	r4, [r5, #24]
 8009816:	1e63      	subs	r3, r4, #1
 8009818:	419c      	sbcs	r4, r3
 800981a:	3401      	adds	r4, #1
 800981c:	612c      	str	r4, [r5, #16]
 800981e:	2e00      	cmp	r6, #0
 8009820:	d018      	beq.n	8009854 <__d2b+0x90>
 8009822:	4b17      	ldr	r3, [pc, #92]	; (8009880 <__d2b+0xbc>)
 8009824:	18f6      	adds	r6, r6, r3
 8009826:	2335      	movs	r3, #53	; 0x35
 8009828:	1836      	adds	r6, r6, r0
 800982a:	1a18      	subs	r0, r3, r0
 800982c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982e:	603e      	str	r6, [r7, #0]
 8009830:	6018      	str	r0, [r3, #0]
 8009832:	0028      	movs	r0, r5
 8009834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009836:	2280      	movs	r2, #128	; 0x80
 8009838:	0352      	lsls	r2, r2, #13
 800983a:	4313      	orrs	r3, r2
 800983c:	e7d6      	b.n	80097ec <__d2b+0x28>
 800983e:	616c      	str	r4, [r5, #20]
 8009840:	e7e7      	b.n	8009812 <__d2b+0x4e>
 8009842:	a801      	add	r0, sp, #4
 8009844:	f7ff fd4c 	bl	80092e0 <__lo0bits>
 8009848:	2401      	movs	r4, #1
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	612c      	str	r4, [r5, #16]
 800984e:	616b      	str	r3, [r5, #20]
 8009850:	3020      	adds	r0, #32
 8009852:	e7e4      	b.n	800981e <__d2b+0x5a>
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <__d2b+0xc0>)
 8009856:	18c0      	adds	r0, r0, r3
 8009858:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <__d2b+0xc4>)
 800985a:	6038      	str	r0, [r7, #0]
 800985c:	18e3      	adds	r3, r4, r3
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	18eb      	adds	r3, r5, r3
 8009862:	6958      	ldr	r0, [r3, #20]
 8009864:	f7ff fd22 	bl	80092ac <__hi0bits>
 8009868:	0164      	lsls	r4, r4, #5
 800986a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986c:	1a24      	subs	r4, r4, r0
 800986e:	601c      	str	r4, [r3, #0]
 8009870:	e7df      	b.n	8009832 <__d2b+0x6e>
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	0800a6f7 	.word	0x0800a6f7
 8009878:	0000030a 	.word	0x0000030a
 800987c:	0800a768 	.word	0x0800a768
 8009880:	fffffbcd 	.word	0xfffffbcd
 8009884:	fffffbce 	.word	0xfffffbce
 8009888:	3fffffff 	.word	0x3fffffff

0800988c <_calloc_r>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	0c13      	lsrs	r3, r2, #16
 8009890:	0c0d      	lsrs	r5, r1, #16
 8009892:	d11e      	bne.n	80098d2 <_calloc_r+0x46>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10c      	bne.n	80098b2 <_calloc_r+0x26>
 8009898:	b289      	uxth	r1, r1
 800989a:	b294      	uxth	r4, r2
 800989c:	434c      	muls	r4, r1
 800989e:	0021      	movs	r1, r4
 80098a0:	f000 f88c 	bl	80099bc <_malloc_r>
 80098a4:	1e05      	subs	r5, r0, #0
 80098a6:	d01b      	beq.n	80098e0 <_calloc_r+0x54>
 80098a8:	0022      	movs	r2, r4
 80098aa:	2100      	movs	r1, #0
 80098ac:	f7fd fff4 	bl	8007898 <memset>
 80098b0:	e016      	b.n	80098e0 <_calloc_r+0x54>
 80098b2:	1c1d      	adds	r5, r3, #0
 80098b4:	1c0b      	adds	r3, r1, #0
 80098b6:	b292      	uxth	r2, r2
 80098b8:	b289      	uxth	r1, r1
 80098ba:	b29c      	uxth	r4, r3
 80098bc:	4351      	muls	r1, r2
 80098be:	b2ab      	uxth	r3, r5
 80098c0:	4363      	muls	r3, r4
 80098c2:	0c0c      	lsrs	r4, r1, #16
 80098c4:	191c      	adds	r4, r3, r4
 80098c6:	0c22      	lsrs	r2, r4, #16
 80098c8:	d107      	bne.n	80098da <_calloc_r+0x4e>
 80098ca:	0424      	lsls	r4, r4, #16
 80098cc:	b289      	uxth	r1, r1
 80098ce:	430c      	orrs	r4, r1
 80098d0:	e7e5      	b.n	800989e <_calloc_r+0x12>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <_calloc_r+0x4e>
 80098d6:	1c13      	adds	r3, r2, #0
 80098d8:	e7ed      	b.n	80098b6 <_calloc_r+0x2a>
 80098da:	230c      	movs	r3, #12
 80098dc:	2500      	movs	r5, #0
 80098de:	6003      	str	r3, [r0, #0]
 80098e0:	0028      	movs	r0, r5
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <_free_r>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	0005      	movs	r5, r0
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d010      	beq.n	800990e <_free_r+0x2a>
 80098ec:	1f0c      	subs	r4, r1, #4
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	da00      	bge.n	80098f6 <_free_r+0x12>
 80098f4:	18e4      	adds	r4, r4, r3
 80098f6:	0028      	movs	r0, r5
 80098f8:	f000 fd16 	bl	800a328 <__malloc_lock>
 80098fc:	4a1d      	ldr	r2, [pc, #116]	; (8009974 <_free_r+0x90>)
 80098fe:	6813      	ldr	r3, [r2, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d105      	bne.n	8009910 <_free_r+0x2c>
 8009904:	6063      	str	r3, [r4, #4]
 8009906:	6014      	str	r4, [r2, #0]
 8009908:	0028      	movs	r0, r5
 800990a:	f000 fd15 	bl	800a338 <__malloc_unlock>
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	42a3      	cmp	r3, r4
 8009912:	d908      	bls.n	8009926 <_free_r+0x42>
 8009914:	6821      	ldr	r1, [r4, #0]
 8009916:	1860      	adds	r0, r4, r1
 8009918:	4283      	cmp	r3, r0
 800991a:	d1f3      	bne.n	8009904 <_free_r+0x20>
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	1841      	adds	r1, r0, r1
 8009922:	6021      	str	r1, [r4, #0]
 8009924:	e7ee      	b.n	8009904 <_free_r+0x20>
 8009926:	001a      	movs	r2, r3
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <_free_r+0x4e>
 800992e:	42a3      	cmp	r3, r4
 8009930:	d9f9      	bls.n	8009926 <_free_r+0x42>
 8009932:	6811      	ldr	r1, [r2, #0]
 8009934:	1850      	adds	r0, r2, r1
 8009936:	42a0      	cmp	r0, r4
 8009938:	d10b      	bne.n	8009952 <_free_r+0x6e>
 800993a:	6820      	ldr	r0, [r4, #0]
 800993c:	1809      	adds	r1, r1, r0
 800993e:	1850      	adds	r0, r2, r1
 8009940:	6011      	str	r1, [r2, #0]
 8009942:	4283      	cmp	r3, r0
 8009944:	d1e0      	bne.n	8009908 <_free_r+0x24>
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	1841      	adds	r1, r0, r1
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	6053      	str	r3, [r2, #4]
 8009950:	e7da      	b.n	8009908 <_free_r+0x24>
 8009952:	42a0      	cmp	r0, r4
 8009954:	d902      	bls.n	800995c <_free_r+0x78>
 8009956:	230c      	movs	r3, #12
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	e7d5      	b.n	8009908 <_free_r+0x24>
 800995c:	6821      	ldr	r1, [r4, #0]
 800995e:	1860      	adds	r0, r4, r1
 8009960:	4283      	cmp	r3, r0
 8009962:	d103      	bne.n	800996c <_free_r+0x88>
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	1841      	adds	r1, r0, r1
 800996a:	6021      	str	r1, [r4, #0]
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	6054      	str	r4, [r2, #4]
 8009970:	e7ca      	b.n	8009908 <_free_r+0x24>
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	200003f0 	.word	0x200003f0

08009978 <sbrk_aligned>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	4e0f      	ldr	r6, [pc, #60]	; (80099b8 <sbrk_aligned+0x40>)
 800997c:	000d      	movs	r5, r1
 800997e:	6831      	ldr	r1, [r6, #0]
 8009980:	0004      	movs	r4, r0
 8009982:	2900      	cmp	r1, #0
 8009984:	d102      	bne.n	800998c <sbrk_aligned+0x14>
 8009986:	f000 f9f1 	bl	8009d6c <_sbrk_r>
 800998a:	6030      	str	r0, [r6, #0]
 800998c:	0029      	movs	r1, r5
 800998e:	0020      	movs	r0, r4
 8009990:	f000 f9ec 	bl	8009d6c <_sbrk_r>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d00a      	beq.n	80099ae <sbrk_aligned+0x36>
 8009998:	2303      	movs	r3, #3
 800999a:	1cc5      	adds	r5, r0, #3
 800999c:	439d      	bics	r5, r3
 800999e:	42a8      	cmp	r0, r5
 80099a0:	d007      	beq.n	80099b2 <sbrk_aligned+0x3a>
 80099a2:	1a29      	subs	r1, r5, r0
 80099a4:	0020      	movs	r0, r4
 80099a6:	f000 f9e1 	bl	8009d6c <_sbrk_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d101      	bne.n	80099b2 <sbrk_aligned+0x3a>
 80099ae:	2501      	movs	r5, #1
 80099b0:	426d      	negs	r5, r5
 80099b2:	0028      	movs	r0, r5
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	200003f4 	.word	0x200003f4

080099bc <_malloc_r>:
 80099bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099be:	2203      	movs	r2, #3
 80099c0:	1ccb      	adds	r3, r1, #3
 80099c2:	4393      	bics	r3, r2
 80099c4:	3308      	adds	r3, #8
 80099c6:	0006      	movs	r6, r0
 80099c8:	001f      	movs	r7, r3
 80099ca:	2b0c      	cmp	r3, #12
 80099cc:	d232      	bcs.n	8009a34 <_malloc_r+0x78>
 80099ce:	270c      	movs	r7, #12
 80099d0:	42b9      	cmp	r1, r7
 80099d2:	d831      	bhi.n	8009a38 <_malloc_r+0x7c>
 80099d4:	0030      	movs	r0, r6
 80099d6:	f000 fca7 	bl	800a328 <__malloc_lock>
 80099da:	4d32      	ldr	r5, [pc, #200]	; (8009aa4 <_malloc_r+0xe8>)
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	001c      	movs	r4, r3
 80099e0:	2c00      	cmp	r4, #0
 80099e2:	d12e      	bne.n	8009a42 <_malloc_r+0x86>
 80099e4:	0039      	movs	r1, r7
 80099e6:	0030      	movs	r0, r6
 80099e8:	f7ff ffc6 	bl	8009978 <sbrk_aligned>
 80099ec:	0004      	movs	r4, r0
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d11e      	bne.n	8009a30 <_malloc_r+0x74>
 80099f2:	682c      	ldr	r4, [r5, #0]
 80099f4:	0025      	movs	r5, r4
 80099f6:	2d00      	cmp	r5, #0
 80099f8:	d14a      	bne.n	8009a90 <_malloc_r+0xd4>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	0029      	movs	r1, r5
 80099fe:	18e3      	adds	r3, r4, r3
 8009a00:	0030      	movs	r0, r6
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	f000 f9b2 	bl	8009d6c <_sbrk_r>
 8009a08:	9b01      	ldr	r3, [sp, #4]
 8009a0a:	4283      	cmp	r3, r0
 8009a0c:	d143      	bne.n	8009a96 <_malloc_r+0xda>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	3703      	adds	r7, #3
 8009a12:	1aff      	subs	r7, r7, r3
 8009a14:	2303      	movs	r3, #3
 8009a16:	439f      	bics	r7, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	2f0c      	cmp	r7, #12
 8009a1c:	d200      	bcs.n	8009a20 <_malloc_r+0x64>
 8009a1e:	270c      	movs	r7, #12
 8009a20:	0039      	movs	r1, r7
 8009a22:	0030      	movs	r0, r6
 8009a24:	f7ff ffa8 	bl	8009978 <sbrk_aligned>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d034      	beq.n	8009a96 <_malloc_r+0xda>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	19df      	adds	r7, r3, r7
 8009a30:	6027      	str	r7, [r4, #0]
 8009a32:	e013      	b.n	8009a5c <_malloc_r+0xa0>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dacb      	bge.n	80099d0 <_malloc_r+0x14>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	2500      	movs	r5, #0
 8009a3c:	6033      	str	r3, [r6, #0]
 8009a3e:	0028      	movs	r0, r5
 8009a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	1bd1      	subs	r1, r2, r7
 8009a46:	d420      	bmi.n	8009a8a <_malloc_r+0xce>
 8009a48:	290b      	cmp	r1, #11
 8009a4a:	d917      	bls.n	8009a7c <_malloc_r+0xc0>
 8009a4c:	19e2      	adds	r2, r4, r7
 8009a4e:	6027      	str	r7, [r4, #0]
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	d111      	bne.n	8009a78 <_malloc_r+0xbc>
 8009a54:	602a      	str	r2, [r5, #0]
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	6011      	str	r1, [r2, #0]
 8009a5a:	6053      	str	r3, [r2, #4]
 8009a5c:	0030      	movs	r0, r6
 8009a5e:	0025      	movs	r5, r4
 8009a60:	f000 fc6a 	bl	800a338 <__malloc_unlock>
 8009a64:	2207      	movs	r2, #7
 8009a66:	350b      	adds	r5, #11
 8009a68:	1d23      	adds	r3, r4, #4
 8009a6a:	4395      	bics	r5, r2
 8009a6c:	1aea      	subs	r2, r5, r3
 8009a6e:	429d      	cmp	r5, r3
 8009a70:	d0e5      	beq.n	8009a3e <_malloc_r+0x82>
 8009a72:	1b5b      	subs	r3, r3, r5
 8009a74:	50a3      	str	r3, [r4, r2]
 8009a76:	e7e2      	b.n	8009a3e <_malloc_r+0x82>
 8009a78:	605a      	str	r2, [r3, #4]
 8009a7a:	e7ec      	b.n	8009a56 <_malloc_r+0x9a>
 8009a7c:	6862      	ldr	r2, [r4, #4]
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	d101      	bne.n	8009a86 <_malloc_r+0xca>
 8009a82:	602a      	str	r2, [r5, #0]
 8009a84:	e7ea      	b.n	8009a5c <_malloc_r+0xa0>
 8009a86:	605a      	str	r2, [r3, #4]
 8009a88:	e7e8      	b.n	8009a5c <_malloc_r+0xa0>
 8009a8a:	0023      	movs	r3, r4
 8009a8c:	6864      	ldr	r4, [r4, #4]
 8009a8e:	e7a7      	b.n	80099e0 <_malloc_r+0x24>
 8009a90:	002c      	movs	r4, r5
 8009a92:	686d      	ldr	r5, [r5, #4]
 8009a94:	e7af      	b.n	80099f6 <_malloc_r+0x3a>
 8009a96:	230c      	movs	r3, #12
 8009a98:	0030      	movs	r0, r6
 8009a9a:	6033      	str	r3, [r6, #0]
 8009a9c:	f000 fc4c 	bl	800a338 <__malloc_unlock>
 8009aa0:	e7cd      	b.n	8009a3e <_malloc_r+0x82>
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	200003f0 	.word	0x200003f0

08009aa8 <__sfputc_r>:
 8009aa8:	6893      	ldr	r3, [r2, #8]
 8009aaa:	b510      	push	{r4, lr}
 8009aac:	3b01      	subs	r3, #1
 8009aae:	6093      	str	r3, [r2, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da04      	bge.n	8009abe <__sfputc_r+0x16>
 8009ab4:	6994      	ldr	r4, [r2, #24]
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	db07      	blt.n	8009aca <__sfputc_r+0x22>
 8009aba:	290a      	cmp	r1, #10
 8009abc:	d005      	beq.n	8009aca <__sfputc_r+0x22>
 8009abe:	6813      	ldr	r3, [r2, #0]
 8009ac0:	1c58      	adds	r0, r3, #1
 8009ac2:	6010      	str	r0, [r2, #0]
 8009ac4:	7019      	strb	r1, [r3, #0]
 8009ac6:	0008      	movs	r0, r1
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	f000 f9ad 	bl	8009e28 <__swbuf_r>
 8009ace:	0001      	movs	r1, r0
 8009ad0:	e7f9      	b.n	8009ac6 <__sfputc_r+0x1e>

08009ad2 <__sfputs_r>:
 8009ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad4:	0006      	movs	r6, r0
 8009ad6:	000f      	movs	r7, r1
 8009ad8:	0014      	movs	r4, r2
 8009ada:	18d5      	adds	r5, r2, r3
 8009adc:	42ac      	cmp	r4, r5
 8009ade:	d101      	bne.n	8009ae4 <__sfputs_r+0x12>
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e007      	b.n	8009af4 <__sfputs_r+0x22>
 8009ae4:	7821      	ldrb	r1, [r4, #0]
 8009ae6:	003a      	movs	r2, r7
 8009ae8:	0030      	movs	r0, r6
 8009aea:	f7ff ffdd 	bl	8009aa8 <__sfputc_r>
 8009aee:	3401      	adds	r4, #1
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d1f3      	bne.n	8009adc <__sfputs_r+0xa>
 8009af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009af8 <_vfiprintf_r>:
 8009af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afa:	b0a1      	sub	sp, #132	; 0x84
 8009afc:	0006      	movs	r6, r0
 8009afe:	000c      	movs	r4, r1
 8009b00:	001f      	movs	r7, r3
 8009b02:	9203      	str	r2, [sp, #12]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d004      	beq.n	8009b12 <_vfiprintf_r+0x1a>
 8009b08:	6983      	ldr	r3, [r0, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <_vfiprintf_r+0x1a>
 8009b0e:	f7ff fa5b 	bl	8008fc8 <__sinit>
 8009b12:	4b8e      	ldr	r3, [pc, #568]	; (8009d4c <_vfiprintf_r+0x254>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d11c      	bne.n	8009b52 <_vfiprintf_r+0x5a>
 8009b18:	6874      	ldr	r4, [r6, #4]
 8009b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b1c:	07db      	lsls	r3, r3, #31
 8009b1e:	d405      	bmi.n	8009b2c <_vfiprintf_r+0x34>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	059b      	lsls	r3, r3, #22
 8009b24:	d402      	bmi.n	8009b2c <_vfiprintf_r+0x34>
 8009b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b28:	f7ff faf3 	bl	8009112 <__retarget_lock_acquire_recursive>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	071b      	lsls	r3, r3, #28
 8009b30:	d502      	bpl.n	8009b38 <_vfiprintf_r+0x40>
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11d      	bne.n	8009b74 <_vfiprintf_r+0x7c>
 8009b38:	0021      	movs	r1, r4
 8009b3a:	0030      	movs	r0, r6
 8009b3c:	f000 f9de 	bl	8009efc <__swsetup_r>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d017      	beq.n	8009b74 <_vfiprintf_r+0x7c>
 8009b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b46:	07db      	lsls	r3, r3, #31
 8009b48:	d50d      	bpl.n	8009b66 <_vfiprintf_r+0x6e>
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	4240      	negs	r0, r0
 8009b4e:	b021      	add	sp, #132	; 0x84
 8009b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b52:	4b7f      	ldr	r3, [pc, #508]	; (8009d50 <_vfiprintf_r+0x258>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	d101      	bne.n	8009b5c <_vfiprintf_r+0x64>
 8009b58:	68b4      	ldr	r4, [r6, #8]
 8009b5a:	e7de      	b.n	8009b1a <_vfiprintf_r+0x22>
 8009b5c:	4b7d      	ldr	r3, [pc, #500]	; (8009d54 <_vfiprintf_r+0x25c>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d1db      	bne.n	8009b1a <_vfiprintf_r+0x22>
 8009b62:	68f4      	ldr	r4, [r6, #12]
 8009b64:	e7d9      	b.n	8009b1a <_vfiprintf_r+0x22>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	059b      	lsls	r3, r3, #22
 8009b6a:	d4ee      	bmi.n	8009b4a <_vfiprintf_r+0x52>
 8009b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b6e:	f7ff fad1 	bl	8009114 <__retarget_lock_release_recursive>
 8009b72:	e7ea      	b.n	8009b4a <_vfiprintf_r+0x52>
 8009b74:	2300      	movs	r3, #0
 8009b76:	ad08      	add	r5, sp, #32
 8009b78:	616b      	str	r3, [r5, #20]
 8009b7a:	3320      	adds	r3, #32
 8009b7c:	766b      	strb	r3, [r5, #25]
 8009b7e:	3310      	adds	r3, #16
 8009b80:	76ab      	strb	r3, [r5, #26]
 8009b82:	9707      	str	r7, [sp, #28]
 8009b84:	9f03      	ldr	r7, [sp, #12]
 8009b86:	783b      	ldrb	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <_vfiprintf_r+0x98>
 8009b8c:	2b25      	cmp	r3, #37	; 0x25
 8009b8e:	d14e      	bne.n	8009c2e <_vfiprintf_r+0x136>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1afb      	subs	r3, r7, r3
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	429f      	cmp	r7, r3
 8009b9a:	d00d      	beq.n	8009bb8 <_vfiprintf_r+0xc0>
 8009b9c:	9b05      	ldr	r3, [sp, #20]
 8009b9e:	0021      	movs	r1, r4
 8009ba0:	0030      	movs	r0, r6
 8009ba2:	9a03      	ldr	r2, [sp, #12]
 8009ba4:	f7ff ff95 	bl	8009ad2 <__sfputs_r>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d100      	bne.n	8009bae <_vfiprintf_r+0xb6>
 8009bac:	e0b5      	b.n	8009d1a <_vfiprintf_r+0x222>
 8009bae:	696a      	ldr	r2, [r5, #20]
 8009bb0:	9b05      	ldr	r3, [sp, #20]
 8009bb2:	4694      	mov	ip, r2
 8009bb4:	4463      	add	r3, ip
 8009bb6:	616b      	str	r3, [r5, #20]
 8009bb8:	783b      	ldrb	r3, [r7, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d100      	bne.n	8009bc0 <_vfiprintf_r+0xc8>
 8009bbe:	e0ac      	b.n	8009d1a <_vfiprintf_r+0x222>
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	1c7b      	adds	r3, r7, #1
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4252      	negs	r2, r2
 8009bca:	606a      	str	r2, [r5, #4]
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	3254      	adds	r2, #84	; 0x54
 8009bd0:	1852      	adds	r2, r2, r1
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	60eb      	str	r3, [r5, #12]
 8009bd6:	60ab      	str	r3, [r5, #8]
 8009bd8:	7013      	strb	r3, [r2, #0]
 8009bda:	65ab      	str	r3, [r5, #88]	; 0x58
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	2205      	movs	r2, #5
 8009be0:	7819      	ldrb	r1, [r3, #0]
 8009be2:	485d      	ldr	r0, [pc, #372]	; (8009d58 <_vfiprintf_r+0x260>)
 8009be4:	f7ff faa2 	bl	800912c <memchr>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	1c5f      	adds	r7, r3, #1
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d120      	bne.n	8009c32 <_vfiprintf_r+0x13a>
 8009bf0:	682a      	ldr	r2, [r5, #0]
 8009bf2:	06d3      	lsls	r3, r2, #27
 8009bf4:	d504      	bpl.n	8009c00 <_vfiprintf_r+0x108>
 8009bf6:	2353      	movs	r3, #83	; 0x53
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	185b      	adds	r3, r3, r1
 8009bfc:	2120      	movs	r1, #32
 8009bfe:	7019      	strb	r1, [r3, #0]
 8009c00:	0713      	lsls	r3, r2, #28
 8009c02:	d504      	bpl.n	8009c0e <_vfiprintf_r+0x116>
 8009c04:	2353      	movs	r3, #83	; 0x53
 8009c06:	a904      	add	r1, sp, #16
 8009c08:	185b      	adds	r3, r3, r1
 8009c0a:	212b      	movs	r1, #43	; 0x2b
 8009c0c:	7019      	strb	r1, [r3, #0]
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b2a      	cmp	r3, #42	; 0x2a
 8009c14:	d016      	beq.n	8009c44 <_vfiprintf_r+0x14c>
 8009c16:	2100      	movs	r1, #0
 8009c18:	68eb      	ldr	r3, [r5, #12]
 8009c1a:	9f03      	ldr	r7, [sp, #12]
 8009c1c:	783a      	ldrb	r2, [r7, #0]
 8009c1e:	1c78      	adds	r0, r7, #1
 8009c20:	3a30      	subs	r2, #48	; 0x30
 8009c22:	4684      	mov	ip, r0
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d94f      	bls.n	8009cc8 <_vfiprintf_r+0x1d0>
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d111      	bne.n	8009c50 <_vfiprintf_r+0x158>
 8009c2c:	e017      	b.n	8009c5e <_vfiprintf_r+0x166>
 8009c2e:	3701      	adds	r7, #1
 8009c30:	e7a9      	b.n	8009b86 <_vfiprintf_r+0x8e>
 8009c32:	4b49      	ldr	r3, [pc, #292]	; (8009d58 <_vfiprintf_r+0x260>)
 8009c34:	682a      	ldr	r2, [r5, #0]
 8009c36:	1ac0      	subs	r0, r0, r3
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4083      	lsls	r3, r0
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	9703      	str	r7, [sp, #12]
 8009c42:	e7cb      	b.n	8009bdc <_vfiprintf_r+0xe4>
 8009c44:	9b07      	ldr	r3, [sp, #28]
 8009c46:	1d19      	adds	r1, r3, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	9107      	str	r1, [sp, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	db01      	blt.n	8009c54 <_vfiprintf_r+0x15c>
 8009c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c52:	e004      	b.n	8009c5e <_vfiprintf_r+0x166>
 8009c54:	425b      	negs	r3, r3
 8009c56:	60eb      	str	r3, [r5, #12]
 8009c58:	2302      	movs	r3, #2
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	602b      	str	r3, [r5, #0]
 8009c5e:	783b      	ldrb	r3, [r7, #0]
 8009c60:	2b2e      	cmp	r3, #46	; 0x2e
 8009c62:	d10a      	bne.n	8009c7a <_vfiprintf_r+0x182>
 8009c64:	787b      	ldrb	r3, [r7, #1]
 8009c66:	2b2a      	cmp	r3, #42	; 0x2a
 8009c68:	d137      	bne.n	8009cda <_vfiprintf_r+0x1e2>
 8009c6a:	9b07      	ldr	r3, [sp, #28]
 8009c6c:	3702      	adds	r7, #2
 8009c6e:	1d1a      	adds	r2, r3, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	9207      	str	r2, [sp, #28]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	db2d      	blt.n	8009cd4 <_vfiprintf_r+0x1dc>
 8009c78:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	7839      	ldrb	r1, [r7, #0]
 8009c7e:	4837      	ldr	r0, [pc, #220]	; (8009d5c <_vfiprintf_r+0x264>)
 8009c80:	f7ff fa54 	bl	800912c <memchr>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d007      	beq.n	8009c98 <_vfiprintf_r+0x1a0>
 8009c88:	4b34      	ldr	r3, [pc, #208]	; (8009d5c <_vfiprintf_r+0x264>)
 8009c8a:	682a      	ldr	r2, [r5, #0]
 8009c8c:	1ac0      	subs	r0, r0, r3
 8009c8e:	2340      	movs	r3, #64	; 0x40
 8009c90:	4083      	lsls	r3, r0
 8009c92:	4313      	orrs	r3, r2
 8009c94:	3701      	adds	r7, #1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	7839      	ldrb	r1, [r7, #0]
 8009c9a:	1c7b      	adds	r3, r7, #1
 8009c9c:	2206      	movs	r2, #6
 8009c9e:	4830      	ldr	r0, [pc, #192]	; (8009d60 <_vfiprintf_r+0x268>)
 8009ca0:	9303      	str	r3, [sp, #12]
 8009ca2:	7629      	strb	r1, [r5, #24]
 8009ca4:	f7ff fa42 	bl	800912c <memchr>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d045      	beq.n	8009d38 <_vfiprintf_r+0x240>
 8009cac:	4b2d      	ldr	r3, [pc, #180]	; (8009d64 <_vfiprintf_r+0x26c>)
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d127      	bne.n	8009d02 <_vfiprintf_r+0x20a>
 8009cb2:	2207      	movs	r2, #7
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	3307      	adds	r3, #7
 8009cb8:	4393      	bics	r3, r2
 8009cba:	3308      	adds	r3, #8
 8009cbc:	9307      	str	r3, [sp, #28]
 8009cbe:	696b      	ldr	r3, [r5, #20]
 8009cc0:	9a04      	ldr	r2, [sp, #16]
 8009cc2:	189b      	adds	r3, r3, r2
 8009cc4:	616b      	str	r3, [r5, #20]
 8009cc6:	e75d      	b.n	8009b84 <_vfiprintf_r+0x8c>
 8009cc8:	210a      	movs	r1, #10
 8009cca:	434b      	muls	r3, r1
 8009ccc:	4667      	mov	r7, ip
 8009cce:	189b      	adds	r3, r3, r2
 8009cd0:	3909      	subs	r1, #9
 8009cd2:	e7a3      	b.n	8009c1c <_vfiprintf_r+0x124>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	425b      	negs	r3, r3
 8009cd8:	e7ce      	b.n	8009c78 <_vfiprintf_r+0x180>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	001a      	movs	r2, r3
 8009cde:	3701      	adds	r7, #1
 8009ce0:	606b      	str	r3, [r5, #4]
 8009ce2:	7839      	ldrb	r1, [r7, #0]
 8009ce4:	1c78      	adds	r0, r7, #1
 8009ce6:	3930      	subs	r1, #48	; 0x30
 8009ce8:	4684      	mov	ip, r0
 8009cea:	2909      	cmp	r1, #9
 8009cec:	d903      	bls.n	8009cf6 <_vfiprintf_r+0x1fe>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0c3      	beq.n	8009c7a <_vfiprintf_r+0x182>
 8009cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf4:	e7c1      	b.n	8009c7a <_vfiprintf_r+0x182>
 8009cf6:	230a      	movs	r3, #10
 8009cf8:	435a      	muls	r2, r3
 8009cfa:	4667      	mov	r7, ip
 8009cfc:	1852      	adds	r2, r2, r1
 8009cfe:	3b09      	subs	r3, #9
 8009d00:	e7ef      	b.n	8009ce2 <_vfiprintf_r+0x1ea>
 8009d02:	ab07      	add	r3, sp, #28
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	0022      	movs	r2, r4
 8009d08:	0029      	movs	r1, r5
 8009d0a:	0030      	movs	r0, r6
 8009d0c:	4b16      	ldr	r3, [pc, #88]	; (8009d68 <_vfiprintf_r+0x270>)
 8009d0e:	f7fd fe75 	bl	80079fc <_printf_float>
 8009d12:	9004      	str	r0, [sp, #16]
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	3301      	adds	r3, #1
 8009d18:	d1d1      	bne.n	8009cbe <_vfiprintf_r+0x1c6>
 8009d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d1c:	07db      	lsls	r3, r3, #31
 8009d1e:	d405      	bmi.n	8009d2c <_vfiprintf_r+0x234>
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	059b      	lsls	r3, r3, #22
 8009d24:	d402      	bmi.n	8009d2c <_vfiprintf_r+0x234>
 8009d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d28:	f7ff f9f4 	bl	8009114 <__retarget_lock_release_recursive>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	065b      	lsls	r3, r3, #25
 8009d30:	d500      	bpl.n	8009d34 <_vfiprintf_r+0x23c>
 8009d32:	e70a      	b.n	8009b4a <_vfiprintf_r+0x52>
 8009d34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d36:	e70a      	b.n	8009b4e <_vfiprintf_r+0x56>
 8009d38:	ab07      	add	r3, sp, #28
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	0022      	movs	r2, r4
 8009d3e:	0029      	movs	r1, r5
 8009d40:	0030      	movs	r0, r6
 8009d42:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <_vfiprintf_r+0x270>)
 8009d44:	f7fe f90c 	bl	8007f60 <_printf_i>
 8009d48:	e7e3      	b.n	8009d12 <_vfiprintf_r+0x21a>
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	0800a728 	.word	0x0800a728
 8009d50:	0800a748 	.word	0x0800a748
 8009d54:	0800a708 	.word	0x0800a708
 8009d58:	0800a8c4 	.word	0x0800a8c4
 8009d5c:	0800a8ca 	.word	0x0800a8ca
 8009d60:	0800a8ce 	.word	0x0800a8ce
 8009d64:	080079fd 	.word	0x080079fd
 8009d68:	08009ad3 	.word	0x08009ad3

08009d6c <_sbrk_r>:
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	4d06      	ldr	r5, [pc, #24]	; (8009d8c <_sbrk_r+0x20>)
 8009d72:	0004      	movs	r4, r0
 8009d74:	0008      	movs	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f9 fabe 	bl	80032f8 <_sbrk>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d103      	bne.n	8009d88 <_sbrk_r+0x1c>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d000      	beq.n	8009d88 <_sbrk_r+0x1c>
 8009d86:	6023      	str	r3, [r4, #0]
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	200003f8 	.word	0x200003f8

08009d90 <__sread>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	000c      	movs	r4, r1
 8009d94:	250e      	movs	r5, #14
 8009d96:	5f49      	ldrsh	r1, [r1, r5]
 8009d98:	f000 fad6 	bl	800a348 <_read_r>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	db03      	blt.n	8009da8 <__sread+0x18>
 8009da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009da2:	181b      	adds	r3, r3, r0
 8009da4:	6563      	str	r3, [r4, #84]	; 0x54
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	4a02      	ldr	r2, [pc, #8]	; (8009db4 <__sread+0x24>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	e7f9      	b.n	8009da6 <__sread+0x16>
 8009db2:	46c0      	nop			; (mov r8, r8)
 8009db4:	ffffefff 	.word	0xffffefff

08009db8 <__swrite>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	001f      	movs	r7, r3
 8009dbc:	898b      	ldrh	r3, [r1, #12]
 8009dbe:	0005      	movs	r5, r0
 8009dc0:	000c      	movs	r4, r1
 8009dc2:	0016      	movs	r6, r2
 8009dc4:	05db      	lsls	r3, r3, #23
 8009dc6:	d505      	bpl.n	8009dd4 <__swrite+0x1c>
 8009dc8:	230e      	movs	r3, #14
 8009dca:	5ec9      	ldrsh	r1, [r1, r3]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2302      	movs	r3, #2
 8009dd0:	f000 fa18 	bl	800a204 <_lseek_r>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	4a05      	ldr	r2, [pc, #20]	; (8009dec <__swrite+0x34>)
 8009dd8:	0028      	movs	r0, r5
 8009dda:	4013      	ands	r3, r2
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	0032      	movs	r2, r6
 8009de0:	230e      	movs	r3, #14
 8009de2:	5ee1      	ldrsh	r1, [r4, r3]
 8009de4:	003b      	movs	r3, r7
 8009de6:	f000 f875 	bl	8009ed4 <_write_r>
 8009dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dec:	ffffefff 	.word	0xffffefff

08009df0 <__sseek>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	000c      	movs	r4, r1
 8009df4:	250e      	movs	r5, #14
 8009df6:	5f49      	ldrsh	r1, [r1, r5]
 8009df8:	f000 fa04 	bl	800a204 <_lseek_r>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	1c42      	adds	r2, r0, #1
 8009e00:	d103      	bne.n	8009e0a <__sseek+0x1a>
 8009e02:	4a05      	ldr	r2, [pc, #20]	; (8009e18 <__sseek+0x28>)
 8009e04:	4013      	ands	r3, r2
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
 8009e0a:	2280      	movs	r2, #128	; 0x80
 8009e0c:	0152      	lsls	r2, r2, #5
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	6560      	str	r0, [r4, #84]	; 0x54
 8009e14:	e7f8      	b.n	8009e08 <__sseek+0x18>
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	ffffefff 	.word	0xffffefff

08009e1c <__sclose>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	230e      	movs	r3, #14
 8009e20:	5ec9      	ldrsh	r1, [r1, r3]
 8009e22:	f000 f901 	bl	800a028 <_close_r>
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <__swbuf_r>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	0005      	movs	r5, r0
 8009e2c:	000e      	movs	r6, r1
 8009e2e:	0014      	movs	r4, r2
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d004      	beq.n	8009e3e <__swbuf_r+0x16>
 8009e34:	6983      	ldr	r3, [r0, #24]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <__swbuf_r+0x16>
 8009e3a:	f7ff f8c5 	bl	8008fc8 <__sinit>
 8009e3e:	4b22      	ldr	r3, [pc, #136]	; (8009ec8 <__swbuf_r+0xa0>)
 8009e40:	429c      	cmp	r4, r3
 8009e42:	d12e      	bne.n	8009ea2 <__swbuf_r+0x7a>
 8009e44:	686c      	ldr	r4, [r5, #4]
 8009e46:	69a3      	ldr	r3, [r4, #24]
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	071b      	lsls	r3, r3, #28
 8009e4e:	d532      	bpl.n	8009eb6 <__swbuf_r+0x8e>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d02f      	beq.n	8009eb6 <__swbuf_r+0x8e>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	6922      	ldr	r2, [r4, #16]
 8009e5a:	b2f7      	uxtb	r7, r6
 8009e5c:	1a98      	subs	r0, r3, r2
 8009e5e:	6963      	ldr	r3, [r4, #20]
 8009e60:	b2f6      	uxtb	r6, r6
 8009e62:	4283      	cmp	r3, r0
 8009e64:	dc05      	bgt.n	8009e72 <__swbuf_r+0x4a>
 8009e66:	0021      	movs	r1, r4
 8009e68:	0028      	movs	r0, r5
 8009e6a:	f000 f97b 	bl	800a164 <_fflush_r>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d127      	bne.n	8009ec2 <__swbuf_r+0x9a>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	3001      	adds	r0, #1
 8009e76:	3b01      	subs	r3, #1
 8009e78:	60a3      	str	r3, [r4, #8]
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	6022      	str	r2, [r4, #0]
 8009e80:	701f      	strb	r7, [r3, #0]
 8009e82:	6963      	ldr	r3, [r4, #20]
 8009e84:	4283      	cmp	r3, r0
 8009e86:	d004      	beq.n	8009e92 <__swbuf_r+0x6a>
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	07db      	lsls	r3, r3, #31
 8009e8c:	d507      	bpl.n	8009e9e <__swbuf_r+0x76>
 8009e8e:	2e0a      	cmp	r6, #10
 8009e90:	d105      	bne.n	8009e9e <__swbuf_r+0x76>
 8009e92:	0021      	movs	r1, r4
 8009e94:	0028      	movs	r0, r5
 8009e96:	f000 f965 	bl	800a164 <_fflush_r>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d111      	bne.n	8009ec2 <__swbuf_r+0x9a>
 8009e9e:	0030      	movs	r0, r6
 8009ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea2:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <__swbuf_r+0xa4>)
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d101      	bne.n	8009eac <__swbuf_r+0x84>
 8009ea8:	68ac      	ldr	r4, [r5, #8]
 8009eaa:	e7cc      	b.n	8009e46 <__swbuf_r+0x1e>
 8009eac:	4b08      	ldr	r3, [pc, #32]	; (8009ed0 <__swbuf_r+0xa8>)
 8009eae:	429c      	cmp	r4, r3
 8009eb0:	d1c9      	bne.n	8009e46 <__swbuf_r+0x1e>
 8009eb2:	68ec      	ldr	r4, [r5, #12]
 8009eb4:	e7c7      	b.n	8009e46 <__swbuf_r+0x1e>
 8009eb6:	0021      	movs	r1, r4
 8009eb8:	0028      	movs	r0, r5
 8009eba:	f000 f81f 	bl	8009efc <__swsetup_r>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0c9      	beq.n	8009e56 <__swbuf_r+0x2e>
 8009ec2:	2601      	movs	r6, #1
 8009ec4:	4276      	negs	r6, r6
 8009ec6:	e7ea      	b.n	8009e9e <__swbuf_r+0x76>
 8009ec8:	0800a728 	.word	0x0800a728
 8009ecc:	0800a748 	.word	0x0800a748
 8009ed0:	0800a708 	.word	0x0800a708

08009ed4 <_write_r>:
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	0004      	movs	r4, r0
 8009ed8:	0008      	movs	r0, r1
 8009eda:	0011      	movs	r1, r2
 8009edc:	001a      	movs	r2, r3
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4d05      	ldr	r5, [pc, #20]	; (8009ef8 <_write_r+0x24>)
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f9 f9bf 	bl	8003266 <_write>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d103      	bne.n	8009ef4 <_write_r+0x20>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d000      	beq.n	8009ef4 <_write_r+0x20>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd70      	pop	{r4, r5, r6, pc}
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	200003f8 	.word	0x200003f8

08009efc <__swsetup_r>:
 8009efc:	4b37      	ldr	r3, [pc, #220]	; (8009fdc <__swsetup_r+0xe0>)
 8009efe:	b570      	push	{r4, r5, r6, lr}
 8009f00:	681d      	ldr	r5, [r3, #0]
 8009f02:	0006      	movs	r6, r0
 8009f04:	000c      	movs	r4, r1
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	d005      	beq.n	8009f16 <__swsetup_r+0x1a>
 8009f0a:	69ab      	ldr	r3, [r5, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <__swsetup_r+0x1a>
 8009f10:	0028      	movs	r0, r5
 8009f12:	f7ff f859 	bl	8008fc8 <__sinit>
 8009f16:	4b32      	ldr	r3, [pc, #200]	; (8009fe0 <__swsetup_r+0xe4>)
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	d10f      	bne.n	8009f3c <__swsetup_r+0x40>
 8009f1c:	686c      	ldr	r4, [r5, #4]
 8009f1e:	230c      	movs	r3, #12
 8009f20:	5ee2      	ldrsh	r2, [r4, r3]
 8009f22:	b293      	uxth	r3, r2
 8009f24:	0711      	lsls	r1, r2, #28
 8009f26:	d42d      	bmi.n	8009f84 <__swsetup_r+0x88>
 8009f28:	06d9      	lsls	r1, r3, #27
 8009f2a:	d411      	bmi.n	8009f50 <__swsetup_r+0x54>
 8009f2c:	2309      	movs	r3, #9
 8009f2e:	2001      	movs	r0, #1
 8009f30:	6033      	str	r3, [r6, #0]
 8009f32:	3337      	adds	r3, #55	; 0x37
 8009f34:	4313      	orrs	r3, r2
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	4240      	negs	r0, r0
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <__swsetup_r+0xe8>)
 8009f3e:	429c      	cmp	r4, r3
 8009f40:	d101      	bne.n	8009f46 <__swsetup_r+0x4a>
 8009f42:	68ac      	ldr	r4, [r5, #8]
 8009f44:	e7eb      	b.n	8009f1e <__swsetup_r+0x22>
 8009f46:	4b28      	ldr	r3, [pc, #160]	; (8009fe8 <__swsetup_r+0xec>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	d1e8      	bne.n	8009f1e <__swsetup_r+0x22>
 8009f4c:	68ec      	ldr	r4, [r5, #12]
 8009f4e:	e7e6      	b.n	8009f1e <__swsetup_r+0x22>
 8009f50:	075b      	lsls	r3, r3, #29
 8009f52:	d513      	bpl.n	8009f7c <__swsetup_r+0x80>
 8009f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d008      	beq.n	8009f6c <__swsetup_r+0x70>
 8009f5a:	0023      	movs	r3, r4
 8009f5c:	3344      	adds	r3, #68	; 0x44
 8009f5e:	4299      	cmp	r1, r3
 8009f60:	d002      	beq.n	8009f68 <__swsetup_r+0x6c>
 8009f62:	0030      	movs	r0, r6
 8009f64:	f7ff fcbe 	bl	80098e4 <_free_r>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6363      	str	r3, [r4, #52]	; 0x34
 8009f6c:	2224      	movs	r2, #36	; 0x24
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	4393      	bics	r3, r2
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	2300      	movs	r3, #0
 8009f76:	6063      	str	r3, [r4, #4]
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	89a2      	ldrh	r2, [r4, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <__swsetup_r+0xa6>
 8009f8a:	21a0      	movs	r1, #160	; 0xa0
 8009f8c:	2280      	movs	r2, #128	; 0x80
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	0089      	lsls	r1, r1, #2
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	400b      	ands	r3, r1
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <__swsetup_r+0xa6>
 8009f9a:	0021      	movs	r1, r4
 8009f9c:	0030      	movs	r0, r6
 8009f9e:	f000 f96d 	bl	800a27c <__smakebuf_r>
 8009fa2:	220c      	movs	r2, #12
 8009fa4:	5ea3      	ldrsh	r3, [r4, r2]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	001a      	movs	r2, r3
 8009faa:	b299      	uxth	r1, r3
 8009fac:	4002      	ands	r2, r0
 8009fae:	4203      	tst	r3, r0
 8009fb0:	d00f      	beq.n	8009fd2 <__swsetup_r+0xd6>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	60a2      	str	r2, [r4, #8]
 8009fb6:	6962      	ldr	r2, [r4, #20]
 8009fb8:	4252      	negs	r2, r2
 8009fba:	61a2      	str	r2, [r4, #24]
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	6922      	ldr	r2, [r4, #16]
 8009fc0:	4282      	cmp	r2, r0
 8009fc2:	d1ba      	bne.n	8009f3a <__swsetup_r+0x3e>
 8009fc4:	060a      	lsls	r2, r1, #24
 8009fc6:	d5b8      	bpl.n	8009f3a <__swsetup_r+0x3e>
 8009fc8:	2240      	movs	r2, #64	; 0x40
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	3801      	subs	r0, #1
 8009fd0:	e7b3      	b.n	8009f3a <__swsetup_r+0x3e>
 8009fd2:	0788      	lsls	r0, r1, #30
 8009fd4:	d400      	bmi.n	8009fd8 <__swsetup_r+0xdc>
 8009fd6:	6962      	ldr	r2, [r4, #20]
 8009fd8:	60a2      	str	r2, [r4, #8]
 8009fda:	e7ef      	b.n	8009fbc <__swsetup_r+0xc0>
 8009fdc:	20000020 	.word	0x20000020
 8009fe0:	0800a728 	.word	0x0800a728
 8009fe4:	0800a748 	.word	0x0800a748
 8009fe8:	0800a708 	.word	0x0800a708

08009fec <__assert_func>:
 8009fec:	b530      	push	{r4, r5, lr}
 8009fee:	0014      	movs	r4, r2
 8009ff0:	001a      	movs	r2, r3
 8009ff2:	4b09      	ldr	r3, [pc, #36]	; (800a018 <__assert_func+0x2c>)
 8009ff4:	0005      	movs	r5, r0
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	68d8      	ldr	r0, [r3, #12]
 8009ffc:	4b07      	ldr	r3, [pc, #28]	; (800a01c <__assert_func+0x30>)
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	d101      	bne.n	800a006 <__assert_func+0x1a>
 800a002:	4b07      	ldr	r3, [pc, #28]	; (800a020 <__assert_func+0x34>)
 800a004:	001c      	movs	r4, r3
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	9100      	str	r1, [sp, #0]
 800a00a:	002b      	movs	r3, r5
 800a00c:	4905      	ldr	r1, [pc, #20]	; (800a024 <__assert_func+0x38>)
 800a00e:	9402      	str	r4, [sp, #8]
 800a010:	f000 f8e8 	bl	800a1e4 <fiprintf>
 800a014:	f000 f9b9 	bl	800a38a <abort>
 800a018:	20000020 	.word	0x20000020
 800a01c:	0800a8d5 	.word	0x0800a8d5
 800a020:	0800a910 	.word	0x0800a910
 800a024:	0800a8e2 	.word	0x0800a8e2

0800a028 <_close_r>:
 800a028:	2300      	movs	r3, #0
 800a02a:	b570      	push	{r4, r5, r6, lr}
 800a02c:	4d06      	ldr	r5, [pc, #24]	; (800a048 <_close_r+0x20>)
 800a02e:	0004      	movs	r4, r0
 800a030:	0008      	movs	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f9 f933 	bl	800329e <_close>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d103      	bne.n	800a044 <_close_r+0x1c>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d000      	beq.n	800a044 <_close_r+0x1c>
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd70      	pop	{r4, r5, r6, pc}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	200003f8 	.word	0x200003f8

0800a04c <__sflush_r>:
 800a04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a04e:	898b      	ldrh	r3, [r1, #12]
 800a050:	0005      	movs	r5, r0
 800a052:	000c      	movs	r4, r1
 800a054:	071a      	lsls	r2, r3, #28
 800a056:	d45f      	bmi.n	800a118 <__sflush_r+0xcc>
 800a058:	684a      	ldr	r2, [r1, #4]
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	dc04      	bgt.n	800a068 <__sflush_r+0x1c>
 800a05e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a060:	2a00      	cmp	r2, #0
 800a062:	dc01      	bgt.n	800a068 <__sflush_r+0x1c>
 800a064:	2000      	movs	r0, #0
 800a066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a068:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a06a:	2f00      	cmp	r7, #0
 800a06c:	d0fa      	beq.n	800a064 <__sflush_r+0x18>
 800a06e:	2200      	movs	r2, #0
 800a070:	2180      	movs	r1, #128	; 0x80
 800a072:	682e      	ldr	r6, [r5, #0]
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	001a      	movs	r2, r3
 800a078:	0149      	lsls	r1, r1, #5
 800a07a:	400a      	ands	r2, r1
 800a07c:	420b      	tst	r3, r1
 800a07e:	d034      	beq.n	800a0ea <__sflush_r+0x9e>
 800a080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	075b      	lsls	r3, r3, #29
 800a086:	d506      	bpl.n	800a096 <__sflush_r+0x4a>
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	1ac0      	subs	r0, r0, r3
 800a08c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <__sflush_r+0x4a>
 800a092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a094:	1ac0      	subs	r0, r0, r3
 800a096:	0002      	movs	r2, r0
 800a098:	6a21      	ldr	r1, [r4, #32]
 800a09a:	2300      	movs	r3, #0
 800a09c:	0028      	movs	r0, r5
 800a09e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a0a0:	47b8      	blx	r7
 800a0a2:	89a1      	ldrh	r1, [r4, #12]
 800a0a4:	1c43      	adds	r3, r0, #1
 800a0a6:	d106      	bne.n	800a0b6 <__sflush_r+0x6a>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	2b1d      	cmp	r3, #29
 800a0ac:	d831      	bhi.n	800a112 <__sflush_r+0xc6>
 800a0ae:	4a2c      	ldr	r2, [pc, #176]	; (800a160 <__sflush_r+0x114>)
 800a0b0:	40da      	lsrs	r2, r3
 800a0b2:	07d3      	lsls	r3, r2, #31
 800a0b4:	d52d      	bpl.n	800a112 <__sflush_r+0xc6>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6063      	str	r3, [r4, #4]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	04cb      	lsls	r3, r1, #19
 800a0c0:	d505      	bpl.n	800a0ce <__sflush_r+0x82>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	d102      	bne.n	800a0cc <__sflush_r+0x80>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d100      	bne.n	800a0ce <__sflush_r+0x82>
 800a0cc:	6560      	str	r0, [r4, #84]	; 0x54
 800a0ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d0:	602e      	str	r6, [r5, #0]
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	d0c6      	beq.n	800a064 <__sflush_r+0x18>
 800a0d6:	0023      	movs	r3, r4
 800a0d8:	3344      	adds	r3, #68	; 0x44
 800a0da:	4299      	cmp	r1, r3
 800a0dc:	d002      	beq.n	800a0e4 <__sflush_r+0x98>
 800a0de:	0028      	movs	r0, r5
 800a0e0:	f7ff fc00 	bl	80098e4 <_free_r>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	6360      	str	r0, [r4, #52]	; 0x34
 800a0e8:	e7bd      	b.n	800a066 <__sflush_r+0x1a>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	0028      	movs	r0, r5
 800a0ee:	6a21      	ldr	r1, [r4, #32]
 800a0f0:	47b8      	blx	r7
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d1c5      	bne.n	800a082 <__sflush_r+0x36>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0c2      	beq.n	800a082 <__sflush_r+0x36>
 800a0fc:	2b1d      	cmp	r3, #29
 800a0fe:	d001      	beq.n	800a104 <__sflush_r+0xb8>
 800a100:	2b16      	cmp	r3, #22
 800a102:	d101      	bne.n	800a108 <__sflush_r+0xbc>
 800a104:	602e      	str	r6, [r5, #0]
 800a106:	e7ad      	b.n	800a064 <__sflush_r+0x18>
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	89a2      	ldrh	r2, [r4, #12]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	e7a9      	b.n	800a066 <__sflush_r+0x1a>
 800a112:	2340      	movs	r3, #64	; 0x40
 800a114:	430b      	orrs	r3, r1
 800a116:	e7fa      	b.n	800a10e <__sflush_r+0xc2>
 800a118:	690f      	ldr	r7, [r1, #16]
 800a11a:	2f00      	cmp	r7, #0
 800a11c:	d0a2      	beq.n	800a064 <__sflush_r+0x18>
 800a11e:	680a      	ldr	r2, [r1, #0]
 800a120:	600f      	str	r7, [r1, #0]
 800a122:	1bd2      	subs	r2, r2, r7
 800a124:	9201      	str	r2, [sp, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	079b      	lsls	r3, r3, #30
 800a12a:	d100      	bne.n	800a12e <__sflush_r+0xe2>
 800a12c:	694a      	ldr	r2, [r1, #20]
 800a12e:	60a2      	str	r2, [r4, #8]
 800a130:	9b01      	ldr	r3, [sp, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	dc00      	bgt.n	800a138 <__sflush_r+0xec>
 800a136:	e795      	b.n	800a064 <__sflush_r+0x18>
 800a138:	003a      	movs	r2, r7
 800a13a:	0028      	movs	r0, r5
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	6a21      	ldr	r1, [r4, #32]
 800a140:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a142:	47b0      	blx	r6
 800a144:	2800      	cmp	r0, #0
 800a146:	dc06      	bgt.n	800a156 <__sflush_r+0x10a>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	2001      	movs	r0, #1
 800a14c:	89a2      	ldrh	r2, [r4, #12]
 800a14e:	4240      	negs	r0, r0
 800a150:	4313      	orrs	r3, r2
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	e787      	b.n	800a066 <__sflush_r+0x1a>
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	183f      	adds	r7, r7, r0
 800a15a:	1a1b      	subs	r3, r3, r0
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	e7e7      	b.n	800a130 <__sflush_r+0xe4>
 800a160:	20400001 	.word	0x20400001

0800a164 <_fflush_r>:
 800a164:	690b      	ldr	r3, [r1, #16]
 800a166:	b570      	push	{r4, r5, r6, lr}
 800a168:	0005      	movs	r5, r0
 800a16a:	000c      	movs	r4, r1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <_fflush_r+0x12>
 800a170:	2500      	movs	r5, #0
 800a172:	0028      	movs	r0, r5
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	2800      	cmp	r0, #0
 800a178:	d004      	beq.n	800a184 <_fflush_r+0x20>
 800a17a:	6983      	ldr	r3, [r0, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <_fflush_r+0x20>
 800a180:	f7fe ff22 	bl	8008fc8 <__sinit>
 800a184:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <_fflush_r+0x74>)
 800a186:	429c      	cmp	r4, r3
 800a188:	d11b      	bne.n	800a1c2 <_fflush_r+0x5e>
 800a18a:	686c      	ldr	r4, [r5, #4]
 800a18c:	220c      	movs	r2, #12
 800a18e:	5ea3      	ldrsh	r3, [r4, r2]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0ed      	beq.n	800a170 <_fflush_r+0xc>
 800a194:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a196:	07d2      	lsls	r2, r2, #31
 800a198:	d404      	bmi.n	800a1a4 <_fflush_r+0x40>
 800a19a:	059b      	lsls	r3, r3, #22
 800a19c:	d402      	bmi.n	800a1a4 <_fflush_r+0x40>
 800a19e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1a0:	f7fe ffb7 	bl	8009112 <__retarget_lock_acquire_recursive>
 800a1a4:	0028      	movs	r0, r5
 800a1a6:	0021      	movs	r1, r4
 800a1a8:	f7ff ff50 	bl	800a04c <__sflush_r>
 800a1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ae:	0005      	movs	r5, r0
 800a1b0:	07db      	lsls	r3, r3, #31
 800a1b2:	d4de      	bmi.n	800a172 <_fflush_r+0xe>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	059b      	lsls	r3, r3, #22
 800a1b8:	d4db      	bmi.n	800a172 <_fflush_r+0xe>
 800a1ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1bc:	f7fe ffaa 	bl	8009114 <__retarget_lock_release_recursive>
 800a1c0:	e7d7      	b.n	800a172 <_fflush_r+0xe>
 800a1c2:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <_fflush_r+0x78>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	d101      	bne.n	800a1cc <_fflush_r+0x68>
 800a1c8:	68ac      	ldr	r4, [r5, #8]
 800a1ca:	e7df      	b.n	800a18c <_fflush_r+0x28>
 800a1cc:	4b04      	ldr	r3, [pc, #16]	; (800a1e0 <_fflush_r+0x7c>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d1dc      	bne.n	800a18c <_fflush_r+0x28>
 800a1d2:	68ec      	ldr	r4, [r5, #12]
 800a1d4:	e7da      	b.n	800a18c <_fflush_r+0x28>
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	0800a728 	.word	0x0800a728
 800a1dc:	0800a748 	.word	0x0800a748
 800a1e0:	0800a708 	.word	0x0800a708

0800a1e4 <fiprintf>:
 800a1e4:	b40e      	push	{r1, r2, r3}
 800a1e6:	b503      	push	{r0, r1, lr}
 800a1e8:	0001      	movs	r1, r0
 800a1ea:	ab03      	add	r3, sp, #12
 800a1ec:	4804      	ldr	r0, [pc, #16]	; (800a200 <fiprintf+0x1c>)
 800a1ee:	cb04      	ldmia	r3!, {r2}
 800a1f0:	6800      	ldr	r0, [r0, #0]
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	f7ff fc80 	bl	8009af8 <_vfiprintf_r>
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bc08      	pop	{r3}
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4718      	bx	r3
 800a200:	20000020 	.word	0x20000020

0800a204 <_lseek_r>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	0004      	movs	r4, r0
 800a208:	0008      	movs	r0, r1
 800a20a:	0011      	movs	r1, r2
 800a20c:	001a      	movs	r2, r3
 800a20e:	2300      	movs	r3, #0
 800a210:	4d05      	ldr	r5, [pc, #20]	; (800a228 <_lseek_r+0x24>)
 800a212:	602b      	str	r3, [r5, #0]
 800a214:	f7f9 f864 	bl	80032e0 <_lseek>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d103      	bne.n	800a224 <_lseek_r+0x20>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d000      	beq.n	800a224 <_lseek_r+0x20>
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	46c0      	nop			; (mov r8, r8)
 800a228:	200003f8 	.word	0x200003f8

0800a22c <__swhatbuf_r>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	000e      	movs	r6, r1
 800a230:	001d      	movs	r5, r3
 800a232:	230e      	movs	r3, #14
 800a234:	5ec9      	ldrsh	r1, [r1, r3]
 800a236:	0014      	movs	r4, r2
 800a238:	b096      	sub	sp, #88	; 0x58
 800a23a:	2900      	cmp	r1, #0
 800a23c:	da08      	bge.n	800a250 <__swhatbuf_r+0x24>
 800a23e:	220c      	movs	r2, #12
 800a240:	5eb3      	ldrsh	r3, [r6, r2]
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	061b      	lsls	r3, r3, #24
 800a248:	d411      	bmi.n	800a26e <__swhatbuf_r+0x42>
 800a24a:	2380      	movs	r3, #128	; 0x80
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	e00f      	b.n	800a270 <__swhatbuf_r+0x44>
 800a250:	466a      	mov	r2, sp
 800a252:	f000 f8a1 	bl	800a398 <_fstat_r>
 800a256:	2800      	cmp	r0, #0
 800a258:	dbf1      	blt.n	800a23e <__swhatbuf_r+0x12>
 800a25a:	23f0      	movs	r3, #240	; 0xf0
 800a25c:	9901      	ldr	r1, [sp, #4]
 800a25e:	021b      	lsls	r3, r3, #8
 800a260:	4019      	ands	r1, r3
 800a262:	4b05      	ldr	r3, [pc, #20]	; (800a278 <__swhatbuf_r+0x4c>)
 800a264:	18c9      	adds	r1, r1, r3
 800a266:	424b      	negs	r3, r1
 800a268:	4159      	adcs	r1, r3
 800a26a:	6029      	str	r1, [r5, #0]
 800a26c:	e7ed      	b.n	800a24a <__swhatbuf_r+0x1e>
 800a26e:	2340      	movs	r3, #64	; 0x40
 800a270:	2000      	movs	r0, #0
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	b016      	add	sp, #88	; 0x58
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	ffffe000 	.word	0xffffe000

0800a27c <__smakebuf_r>:
 800a27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a27e:	2602      	movs	r6, #2
 800a280:	898b      	ldrh	r3, [r1, #12]
 800a282:	0005      	movs	r5, r0
 800a284:	000c      	movs	r4, r1
 800a286:	4233      	tst	r3, r6
 800a288:	d006      	beq.n	800a298 <__smakebuf_r+0x1c>
 800a28a:	0023      	movs	r3, r4
 800a28c:	3347      	adds	r3, #71	; 0x47
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	2301      	movs	r3, #1
 800a294:	6163      	str	r3, [r4, #20]
 800a296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a298:	466a      	mov	r2, sp
 800a29a:	ab01      	add	r3, sp, #4
 800a29c:	f7ff ffc6 	bl	800a22c <__swhatbuf_r>
 800a2a0:	9900      	ldr	r1, [sp, #0]
 800a2a2:	0007      	movs	r7, r0
 800a2a4:	0028      	movs	r0, r5
 800a2a6:	f7ff fb89 	bl	80099bc <_malloc_r>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d108      	bne.n	800a2c0 <__smakebuf_r+0x44>
 800a2ae:	220c      	movs	r2, #12
 800a2b0:	5ea3      	ldrsh	r3, [r4, r2]
 800a2b2:	059a      	lsls	r2, r3, #22
 800a2b4:	d4ef      	bmi.n	800a296 <__smakebuf_r+0x1a>
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	4393      	bics	r3, r2
 800a2ba:	431e      	orrs	r6, r3
 800a2bc:	81a6      	strh	r6, [r4, #12]
 800a2be:	e7e4      	b.n	800a28a <__smakebuf_r+0xe>
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <__smakebuf_r+0x84>)
 800a2c2:	62ab      	str	r3, [r5, #40]	; 0x28
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	89a2      	ldrh	r2, [r4, #12]
 800a2c8:	6020      	str	r0, [r4, #0]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	9b00      	ldr	r3, [sp, #0]
 800a2d0:	6120      	str	r0, [r4, #16]
 800a2d2:	6163      	str	r3, [r4, #20]
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00d      	beq.n	800a2f6 <__smakebuf_r+0x7a>
 800a2da:	0028      	movs	r0, r5
 800a2dc:	230e      	movs	r3, #14
 800a2de:	5ee1      	ldrsh	r1, [r4, r3]
 800a2e0:	f000 f86c 	bl	800a3bc <_isatty_r>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d006      	beq.n	800a2f6 <__smakebuf_r+0x7a>
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	4393      	bics	r3, r2
 800a2ee:	001a      	movs	r2, r3
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	89a0      	ldrh	r0, [r4, #12]
 800a2f8:	4307      	orrs	r7, r0
 800a2fa:	81a7      	strh	r7, [r4, #12]
 800a2fc:	e7cb      	b.n	800a296 <__smakebuf_r+0x1a>
 800a2fe:	46c0      	nop			; (mov r8, r8)
 800a300:	08008f4d 	.word	0x08008f4d

0800a304 <__ascii_mbtowc>:
 800a304:	b082      	sub	sp, #8
 800a306:	2900      	cmp	r1, #0
 800a308:	d100      	bne.n	800a30c <__ascii_mbtowc+0x8>
 800a30a:	a901      	add	r1, sp, #4
 800a30c:	1e10      	subs	r0, r2, #0
 800a30e:	d006      	beq.n	800a31e <__ascii_mbtowc+0x1a>
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <__ascii_mbtowc+0x1e>
 800a314:	7813      	ldrb	r3, [r2, #0]
 800a316:	600b      	str	r3, [r1, #0]
 800a318:	7810      	ldrb	r0, [r2, #0]
 800a31a:	1e43      	subs	r3, r0, #1
 800a31c:	4198      	sbcs	r0, r3
 800a31e:	b002      	add	sp, #8
 800a320:	4770      	bx	lr
 800a322:	2002      	movs	r0, #2
 800a324:	4240      	negs	r0, r0
 800a326:	e7fa      	b.n	800a31e <__ascii_mbtowc+0x1a>

0800a328 <__malloc_lock>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4802      	ldr	r0, [pc, #8]	; (800a334 <__malloc_lock+0xc>)
 800a32c:	f7fe fef1 	bl	8009112 <__retarget_lock_acquire_recursive>
 800a330:	bd10      	pop	{r4, pc}
 800a332:	46c0      	nop			; (mov r8, r8)
 800a334:	200003ec 	.word	0x200003ec

0800a338 <__malloc_unlock>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	4802      	ldr	r0, [pc, #8]	; (800a344 <__malloc_unlock+0xc>)
 800a33c:	f7fe feea 	bl	8009114 <__retarget_lock_release_recursive>
 800a340:	bd10      	pop	{r4, pc}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	200003ec 	.word	0x200003ec

0800a348 <_read_r>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	0004      	movs	r4, r0
 800a34c:	0008      	movs	r0, r1
 800a34e:	0011      	movs	r1, r2
 800a350:	001a      	movs	r2, r3
 800a352:	2300      	movs	r3, #0
 800a354:	4d05      	ldr	r5, [pc, #20]	; (800a36c <_read_r+0x24>)
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f8 ff68 	bl	800322c <_read>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d103      	bne.n	800a368 <_read_r+0x20>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d000      	beq.n	800a368 <_read_r+0x20>
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	bd70      	pop	{r4, r5, r6, pc}
 800a36a:	46c0      	nop			; (mov r8, r8)
 800a36c:	200003f8 	.word	0x200003f8

0800a370 <__ascii_wctomb>:
 800a370:	0003      	movs	r3, r0
 800a372:	1e08      	subs	r0, r1, #0
 800a374:	d005      	beq.n	800a382 <__ascii_wctomb+0x12>
 800a376:	2aff      	cmp	r2, #255	; 0xff
 800a378:	d904      	bls.n	800a384 <__ascii_wctomb+0x14>
 800a37a:	228a      	movs	r2, #138	; 0x8a
 800a37c:	2001      	movs	r0, #1
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	4240      	negs	r0, r0
 800a382:	4770      	bx	lr
 800a384:	2001      	movs	r0, #1
 800a386:	700a      	strb	r2, [r1, #0]
 800a388:	e7fb      	b.n	800a382 <__ascii_wctomb+0x12>

0800a38a <abort>:
 800a38a:	2006      	movs	r0, #6
 800a38c:	b510      	push	{r4, lr}
 800a38e:	f000 f851 	bl	800a434 <raise>
 800a392:	2001      	movs	r0, #1
 800a394:	f7f8 ff3e 	bl	8003214 <_exit>

0800a398 <_fstat_r>:
 800a398:	2300      	movs	r3, #0
 800a39a:	b570      	push	{r4, r5, r6, lr}
 800a39c:	4d06      	ldr	r5, [pc, #24]	; (800a3b8 <_fstat_r+0x20>)
 800a39e:	0004      	movs	r4, r0
 800a3a0:	0008      	movs	r0, r1
 800a3a2:	0011      	movs	r1, r2
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	f7f8 ff84 	bl	80032b2 <_fstat>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d103      	bne.n	800a3b6 <_fstat_r+0x1e>
 800a3ae:	682b      	ldr	r3, [r5, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d000      	beq.n	800a3b6 <_fstat_r+0x1e>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	200003f8 	.word	0x200003f8

0800a3bc <_isatty_r>:
 800a3bc:	2300      	movs	r3, #0
 800a3be:	b570      	push	{r4, r5, r6, lr}
 800a3c0:	4d06      	ldr	r5, [pc, #24]	; (800a3dc <_isatty_r+0x20>)
 800a3c2:	0004      	movs	r4, r0
 800a3c4:	0008      	movs	r0, r1
 800a3c6:	602b      	str	r3, [r5, #0]
 800a3c8:	f7f8 ff81 	bl	80032ce <_isatty>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d103      	bne.n	800a3d8 <_isatty_r+0x1c>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d000      	beq.n	800a3d8 <_isatty_r+0x1c>
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	46c0      	nop			; (mov r8, r8)
 800a3dc:	200003f8 	.word	0x200003f8

0800a3e0 <_raise_r>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	0004      	movs	r4, r0
 800a3e4:	000d      	movs	r5, r1
 800a3e6:	291f      	cmp	r1, #31
 800a3e8:	d904      	bls.n	800a3f4 <_raise_r+0x14>
 800a3ea:	2316      	movs	r3, #22
 800a3ec:	6003      	str	r3, [r0, #0]
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	4240      	negs	r0, r0
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <_raise_r+0x24>
 800a3fa:	008a      	lsls	r2, r1, #2
 800a3fc:	189b      	adds	r3, r3, r2
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	2a00      	cmp	r2, #0
 800a402:	d108      	bne.n	800a416 <_raise_r+0x36>
 800a404:	0020      	movs	r0, r4
 800a406:	f000 f831 	bl	800a46c <_getpid_r>
 800a40a:	002a      	movs	r2, r5
 800a40c:	0001      	movs	r1, r0
 800a40e:	0020      	movs	r0, r4
 800a410:	f000 f81a 	bl	800a448 <_kill_r>
 800a414:	e7ed      	b.n	800a3f2 <_raise_r+0x12>
 800a416:	2000      	movs	r0, #0
 800a418:	2a01      	cmp	r2, #1
 800a41a:	d0ea      	beq.n	800a3f2 <_raise_r+0x12>
 800a41c:	1c51      	adds	r1, r2, #1
 800a41e:	d103      	bne.n	800a428 <_raise_r+0x48>
 800a420:	2316      	movs	r3, #22
 800a422:	3001      	adds	r0, #1
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	e7e4      	b.n	800a3f2 <_raise_r+0x12>
 800a428:	2400      	movs	r4, #0
 800a42a:	0028      	movs	r0, r5
 800a42c:	601c      	str	r4, [r3, #0]
 800a42e:	4790      	blx	r2
 800a430:	0020      	movs	r0, r4
 800a432:	e7de      	b.n	800a3f2 <_raise_r+0x12>

0800a434 <raise>:
 800a434:	b510      	push	{r4, lr}
 800a436:	4b03      	ldr	r3, [pc, #12]	; (800a444 <raise+0x10>)
 800a438:	0001      	movs	r1, r0
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	f7ff ffd0 	bl	800a3e0 <_raise_r>
 800a440:	bd10      	pop	{r4, pc}
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	20000020 	.word	0x20000020

0800a448 <_kill_r>:
 800a448:	2300      	movs	r3, #0
 800a44a:	b570      	push	{r4, r5, r6, lr}
 800a44c:	4d06      	ldr	r5, [pc, #24]	; (800a468 <_kill_r+0x20>)
 800a44e:	0004      	movs	r4, r0
 800a450:	0008      	movs	r0, r1
 800a452:	0011      	movs	r1, r2
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	f7f8 fecd 	bl	80031f4 <_kill>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d103      	bne.n	800a466 <_kill_r+0x1e>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d000      	beq.n	800a466 <_kill_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	200003f8 	.word	0x200003f8

0800a46c <_getpid_r>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	f7f8 febb 	bl	80031e8 <_getpid>
 800a472:	bd10      	pop	{r4, pc}

0800a474 <_init>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr

0800a480 <_fini>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a486:	bc08      	pop	{r3}
 800a488:	469e      	mov	lr, r3
 800a48a:	4770      	bx	lr
