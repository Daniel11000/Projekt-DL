
Line_Follower_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005330  08005330  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080053a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080053a8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f793  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269b  00000000  00000000  0002f82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166a6  00000000  00000000  000338a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011351  00000000  00000000  00049f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845b6  00000000  00000000  0005b297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  000df8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800516c 	.word	0x0800516c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800516c 	.word	0x0800516c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_uldivmod>:
 800041c:	2b00      	cmp	r3, #0
 800041e:	d111      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000420:	2a00      	cmp	r2, #0
 8000422:	d10f      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000424:	2900      	cmp	r1, #0
 8000426:	d100      	bne.n	800042a <__aeabi_uldivmod+0xe>
 8000428:	2800      	cmp	r0, #0
 800042a:	d002      	beq.n	8000432 <__aeabi_uldivmod+0x16>
 800042c:	2100      	movs	r1, #0
 800042e:	43c9      	mvns	r1, r1
 8000430:	0008      	movs	r0, r1
 8000432:	b407      	push	{r0, r1, r2}
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <__aeabi_uldivmod+0x24>)
 8000436:	a102      	add	r1, pc, #8	; (adr r1, 8000440 <__aeabi_uldivmod+0x24>)
 8000438:	1840      	adds	r0, r0, r1
 800043a:	9002      	str	r0, [sp, #8]
 800043c:	bd03      	pop	{r0, r1, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	ffffffd9 	.word	0xffffffd9
 8000444:	b403      	push	{r0, r1}
 8000446:	4668      	mov	r0, sp
 8000448:	b501      	push	{r0, lr}
 800044a:	9802      	ldr	r0, [sp, #8]
 800044c:	f000 f834 	bl	80004b8 <__udivmoddi4>
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	469e      	mov	lr, r3
 8000454:	b002      	add	sp, #8
 8000456:	bc0c      	pop	{r2, r3}
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_lmul>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	46ce      	mov	lr, r9
 8000460:	4647      	mov	r7, r8
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	4699      	mov	r9, r3
 8000468:	0c3b      	lsrs	r3, r7, #16
 800046a:	469c      	mov	ip, r3
 800046c:	0413      	lsls	r3, r2, #16
 800046e:	0c1b      	lsrs	r3, r3, #16
 8000470:	001d      	movs	r5, r3
 8000472:	000e      	movs	r6, r1
 8000474:	4661      	mov	r1, ip
 8000476:	0400      	lsls	r0, r0, #16
 8000478:	0c14      	lsrs	r4, r2, #16
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	4345      	muls	r5, r0
 800047e:	434b      	muls	r3, r1
 8000480:	4360      	muls	r0, r4
 8000482:	4361      	muls	r1, r4
 8000484:	18c0      	adds	r0, r0, r3
 8000486:	0c2c      	lsrs	r4, r5, #16
 8000488:	1820      	adds	r0, r4, r0
 800048a:	468c      	mov	ip, r1
 800048c:	4283      	cmp	r3, r0
 800048e:	d903      	bls.n	8000498 <__aeabi_lmul+0x3c>
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	025b      	lsls	r3, r3, #9
 8000494:	4698      	mov	r8, r3
 8000496:	44c4      	add	ip, r8
 8000498:	4649      	mov	r1, r9
 800049a:	4379      	muls	r1, r7
 800049c:	4372      	muls	r2, r6
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	4463      	add	r3, ip
 80004a2:	042d      	lsls	r5, r5, #16
 80004a4:	0c2d      	lsrs	r5, r5, #16
 80004a6:	18c9      	adds	r1, r1, r3
 80004a8:	0400      	lsls	r0, r0, #16
 80004aa:	1940      	adds	r0, r0, r5
 80004ac:	1889      	adds	r1, r1, r2
 80004ae:	bcc0      	pop	{r6, r7}
 80004b0:	46b9      	mov	r9, r7
 80004b2:	46b0      	mov	r8, r6
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__udivmoddi4>:
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	4657      	mov	r7, sl
 80004bc:	464e      	mov	r6, r9
 80004be:	4645      	mov	r5, r8
 80004c0:	46de      	mov	lr, fp
 80004c2:	b5e0      	push	{r5, r6, r7, lr}
 80004c4:	0004      	movs	r4, r0
 80004c6:	000d      	movs	r5, r1
 80004c8:	4692      	mov	sl, r2
 80004ca:	4699      	mov	r9, r3
 80004cc:	b083      	sub	sp, #12
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d830      	bhi.n	8000534 <__udivmoddi4+0x7c>
 80004d2:	d02d      	beq.n	8000530 <__udivmoddi4+0x78>
 80004d4:	4649      	mov	r1, r9
 80004d6:	4650      	mov	r0, sl
 80004d8:	f000 f8ba 	bl	8000650 <__clzdi2>
 80004dc:	0029      	movs	r1, r5
 80004de:	0006      	movs	r6, r0
 80004e0:	0020      	movs	r0, r4
 80004e2:	f000 f8b5 	bl	8000650 <__clzdi2>
 80004e6:	1a33      	subs	r3, r6, r0
 80004e8:	4698      	mov	r8, r3
 80004ea:	3b20      	subs	r3, #32
 80004ec:	469b      	mov	fp, r3
 80004ee:	d433      	bmi.n	8000558 <__udivmoddi4+0xa0>
 80004f0:	465a      	mov	r2, fp
 80004f2:	4653      	mov	r3, sl
 80004f4:	4093      	lsls	r3, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	001f      	movs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d83a      	bhi.n	800057a <__udivmoddi4+0xc2>
 8000504:	42af      	cmp	r7, r5
 8000506:	d100      	bne.n	800050a <__udivmoddi4+0x52>
 8000508:	e078      	b.n	80005fc <__udivmoddi4+0x144>
 800050a:	465b      	mov	r3, fp
 800050c:	1ba4      	subs	r4, r4, r6
 800050e:	41bd      	sbcs	r5, r7
 8000510:	2b00      	cmp	r3, #0
 8000512:	da00      	bge.n	8000516 <__udivmoddi4+0x5e>
 8000514:	e075      	b.n	8000602 <__udivmoddi4+0x14a>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	465a      	mov	r2, fp
 8000522:	4093      	lsls	r3, r2
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2301      	movs	r3, #1
 8000528:	4642      	mov	r2, r8
 800052a:	4093      	lsls	r3, r2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	e028      	b.n	8000582 <__udivmoddi4+0xca>
 8000530:	4282      	cmp	r2, r0
 8000532:	d9cf      	bls.n	80004d4 <__udivmoddi4+0x1c>
 8000534:	2200      	movs	r2, #0
 8000536:	2300      	movs	r3, #0
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <__udivmoddi4+0x8e>
 8000542:	601c      	str	r4, [r3, #0]
 8000544:	605d      	str	r5, [r3, #4]
 8000546:	9800      	ldr	r0, [sp, #0]
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	b003      	add	sp, #12
 800054c:	bcf0      	pop	{r4, r5, r6, r7}
 800054e:	46bb      	mov	fp, r7
 8000550:	46b2      	mov	sl, r6
 8000552:	46a9      	mov	r9, r5
 8000554:	46a0      	mov	r8, r4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4642      	mov	r2, r8
 800055a:	2320      	movs	r3, #32
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	4652      	mov	r2, sl
 8000560:	40da      	lsrs	r2, r3
 8000562:	4641      	mov	r1, r8
 8000564:	0013      	movs	r3, r2
 8000566:	464a      	mov	r2, r9
 8000568:	408a      	lsls	r2, r1
 800056a:	0017      	movs	r7, r2
 800056c:	4642      	mov	r2, r8
 800056e:	431f      	orrs	r7, r3
 8000570:	4653      	mov	r3, sl
 8000572:	4093      	lsls	r3, r2
 8000574:	001e      	movs	r6, r3
 8000576:	42af      	cmp	r7, r5
 8000578:	d9c4      	bls.n	8000504 <__udivmoddi4+0x4c>
 800057a:	2200      	movs	r2, #0
 800057c:	2300      	movs	r3, #0
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	4643      	mov	r3, r8
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0d9      	beq.n	800053c <__udivmoddi4+0x84>
 8000588:	07fb      	lsls	r3, r7, #31
 800058a:	0872      	lsrs	r2, r6, #1
 800058c:	431a      	orrs	r2, r3
 800058e:	4646      	mov	r6, r8
 8000590:	087b      	lsrs	r3, r7, #1
 8000592:	e00e      	b.n	80005b2 <__udivmoddi4+0xfa>
 8000594:	42ab      	cmp	r3, r5
 8000596:	d101      	bne.n	800059c <__udivmoddi4+0xe4>
 8000598:	42a2      	cmp	r2, r4
 800059a:	d80c      	bhi.n	80005b6 <__udivmoddi4+0xfe>
 800059c:	1aa4      	subs	r4, r4, r2
 800059e:	419d      	sbcs	r5, r3
 80005a0:	2001      	movs	r0, #1
 80005a2:	1924      	adds	r4, r4, r4
 80005a4:	416d      	adcs	r5, r5
 80005a6:	2100      	movs	r1, #0
 80005a8:	3e01      	subs	r6, #1
 80005aa:	1824      	adds	r4, r4, r0
 80005ac:	414d      	adcs	r5, r1
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d006      	beq.n	80005c0 <__udivmoddi4+0x108>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d9ee      	bls.n	8000594 <__udivmoddi4+0xdc>
 80005b6:	3e01      	subs	r6, #1
 80005b8:	1924      	adds	r4, r4, r4
 80005ba:	416d      	adcs	r5, r5
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d1f8      	bne.n	80005b2 <__udivmoddi4+0xfa>
 80005c0:	9800      	ldr	r0, [sp, #0]
 80005c2:	9901      	ldr	r1, [sp, #4]
 80005c4:	465b      	mov	r3, fp
 80005c6:	1900      	adds	r0, r0, r4
 80005c8:	4169      	adcs	r1, r5
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db24      	blt.n	8000618 <__udivmoddi4+0x160>
 80005ce:	002b      	movs	r3, r5
 80005d0:	465a      	mov	r2, fp
 80005d2:	4644      	mov	r4, r8
 80005d4:	40d3      	lsrs	r3, r2
 80005d6:	002a      	movs	r2, r5
 80005d8:	40e2      	lsrs	r2, r4
 80005da:	001c      	movs	r4, r3
 80005dc:	465b      	mov	r3, fp
 80005de:	0015      	movs	r5, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db2a      	blt.n	800063a <__udivmoddi4+0x182>
 80005e4:	0026      	movs	r6, r4
 80005e6:	409e      	lsls	r6, r3
 80005e8:	0033      	movs	r3, r6
 80005ea:	0026      	movs	r6, r4
 80005ec:	4647      	mov	r7, r8
 80005ee:	40be      	lsls	r6, r7
 80005f0:	0032      	movs	r2, r6
 80005f2:	1a80      	subs	r0, r0, r2
 80005f4:	4199      	sbcs	r1, r3
 80005f6:	9000      	str	r0, [sp, #0]
 80005f8:	9101      	str	r1, [sp, #4]
 80005fa:	e79f      	b.n	800053c <__udivmoddi4+0x84>
 80005fc:	42a3      	cmp	r3, r4
 80005fe:	d8bc      	bhi.n	800057a <__udivmoddi4+0xc2>
 8000600:	e783      	b.n	800050a <__udivmoddi4+0x52>
 8000602:	4642      	mov	r2, r8
 8000604:	2320      	movs	r3, #32
 8000606:	2100      	movs	r1, #0
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	2200      	movs	r2, #0
 800060c:	9100      	str	r1, [sp, #0]
 800060e:	9201      	str	r2, [sp, #4]
 8000610:	2201      	movs	r2, #1
 8000612:	40da      	lsrs	r2, r3
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	e786      	b.n	8000526 <__udivmoddi4+0x6e>
 8000618:	4642      	mov	r2, r8
 800061a:	2320      	movs	r3, #32
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	002a      	movs	r2, r5
 8000620:	4646      	mov	r6, r8
 8000622:	409a      	lsls	r2, r3
 8000624:	0023      	movs	r3, r4
 8000626:	40f3      	lsrs	r3, r6
 8000628:	4644      	mov	r4, r8
 800062a:	4313      	orrs	r3, r2
 800062c:	002a      	movs	r2, r5
 800062e:	40e2      	lsrs	r2, r4
 8000630:	001c      	movs	r4, r3
 8000632:	465b      	mov	r3, fp
 8000634:	0015      	movs	r5, r2
 8000636:	2b00      	cmp	r3, #0
 8000638:	dad4      	bge.n	80005e4 <__udivmoddi4+0x12c>
 800063a:	4642      	mov	r2, r8
 800063c:	002f      	movs	r7, r5
 800063e:	2320      	movs	r3, #32
 8000640:	0026      	movs	r6, r4
 8000642:	4097      	lsls	r7, r2
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	40de      	lsrs	r6, r3
 8000648:	003b      	movs	r3, r7
 800064a:	4333      	orrs	r3, r6
 800064c:	e7cd      	b.n	80005ea <__udivmoddi4+0x132>
 800064e:	46c0      	nop			; (mov r8, r8)

08000650 <__clzdi2>:
 8000650:	b510      	push	{r4, lr}
 8000652:	2900      	cmp	r1, #0
 8000654:	d103      	bne.n	800065e <__clzdi2+0xe>
 8000656:	f000 f807 	bl	8000668 <__clzsi2>
 800065a:	3020      	adds	r0, #32
 800065c:	e002      	b.n	8000664 <__clzdi2+0x14>
 800065e:	0008      	movs	r0, r1
 8000660:	f000 f802 	bl	8000668 <__clzsi2>
 8000664:	bd10      	pop	{r4, pc}
 8000666:	46c0      	nop			; (mov r8, r8)

08000668 <__clzsi2>:
 8000668:	211c      	movs	r1, #28
 800066a:	2301      	movs	r3, #1
 800066c:	041b      	lsls	r3, r3, #16
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0xe>
 8000672:	0c00      	lsrs	r0, r0, #16
 8000674:	3910      	subs	r1, #16
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	4298      	cmp	r0, r3
 800067a:	d301      	bcc.n	8000680 <__clzsi2+0x18>
 800067c:	0a00      	lsrs	r0, r0, #8
 800067e:	3908      	subs	r1, #8
 8000680:	091b      	lsrs	r3, r3, #4
 8000682:	4298      	cmp	r0, r3
 8000684:	d301      	bcc.n	800068a <__clzsi2+0x22>
 8000686:	0900      	lsrs	r0, r0, #4
 8000688:	3904      	subs	r1, #4
 800068a:	a202      	add	r2, pc, #8	; (adr r2, 8000694 <__clzsi2+0x2c>)
 800068c:	5c10      	ldrb	r0, [r2, r0]
 800068e:	1840      	adds	r0, r0, r1
 8000690:	4770      	bx	lr
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	02020304 	.word	0x02020304
 8000698:	01010101 	.word	0x01010101
	...

080006a4 <left_motor_drive>:
#include <stdio.h>
#include <string.h>

#define SENSORS_OFFSET 50

void left_motor_drive(int PWM, char command[]){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]

	PWM %= 101;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2165      	movs	r1, #101	; 0x65
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff feac 	bl	8000410 <__aeabi_idivmod>
 80006b8:	000b      	movs	r3, r1
 80006ba:	607b      	str	r3, [r7, #4]

	if(!strcmp(command, "FORWARD")){
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <left_motor_drive+0xe8>)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fd20 	bl	8000108 <strcmp>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d110      	bne.n	80006ee <left_motor_drive+0x4a>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80006cc:	4b30      	ldr	r3, [pc, #192]	; (8000790 <left_motor_drive+0xec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fcc8 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <left_motor_drive+0xec>)
 80006da:	2201      	movs	r2, #1
 80006dc:	2102      	movs	r1, #2
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fcc2 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <left_motor_drive+0xf0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(!strcmp(command, "SOFT STOP")){
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	}
}
 80006ec:	e049      	b.n	8000782 <left_motor_drive+0xde>
	}else if(!strcmp(command, "BACKWARD")){
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <left_motor_drive+0xf4>)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff fd07 	bl	8000108 <strcmp>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d110      	bne.n	8000720 <left_motor_drive+0x7c>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <left_motor_drive+0xec>)
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fcaf 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <left_motor_drive+0xec>)
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fca9 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <left_motor_drive+0xf0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800071e:	e030      	b.n	8000782 <left_motor_drive+0xde>
	}else if(!strcmp(command, "FAST STOP")){
 8000720:	4a1e      	ldr	r2, [pc, #120]	; (800079c <left_motor_drive+0xf8>)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff fcee 	bl	8000108 <strcmp>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d110      	bne.n	8000752 <left_motor_drive+0xae>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <left_motor_drive+0xec>)
 8000732:	2201      	movs	r2, #1
 8000734:	2101      	movs	r1, #1
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fc96 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <left_motor_drive+0xec>)
 800073e:	2201      	movs	r2, #1
 8000740:	2102      	movs	r1, #2
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fc90 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <left_motor_drive+0xf0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000750:	e017      	b.n	8000782 <left_motor_drive+0xde>
	}else if(!strcmp(command, "SOFT STOP")){
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <left_motor_drive+0xfc>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f7ff fcd5 	bl	8000108 <strcmp>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d10f      	bne.n	8000782 <left_motor_drive+0xde>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <left_motor_drive+0xec>)
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fc7d 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <left_motor_drive+0xec>)
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fc77 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <left_motor_drive+0xf0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	08005184 	.word	0x08005184
 8000790:	50000800 	.word	0x50000800
 8000794:	200000f0 	.word	0x200000f0
 8000798:	0800518c 	.word	0x0800518c
 800079c:	08005198 	.word	0x08005198
 80007a0:	080051a4 	.word	0x080051a4

080007a4 <right_motor_drive>:

void right_motor_drive(int PWM, char command[]){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	PWM %= 101;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2165      	movs	r1, #101	; 0x65
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fe2c 	bl	8000410 <__aeabi_idivmod>
 80007b8:	000b      	movs	r3, r1
 80007ba:	607b      	str	r3, [r7, #4]

	if(!strcmp(command, "FORWARD")){
 80007bc:	4a33      	ldr	r2, [pc, #204]	; (800088c <right_motor_drive+0xe8>)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fca0 	bl	8000108 <strcmp>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d110      	bne.n	80007ee <right_motor_drive+0x4a>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <right_motor_drive+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	2104      	movs	r1, #4
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fc48 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <right_motor_drive+0xec>)
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fc42 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <right_motor_drive+0xf0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	63da      	str	r2, [r3, #60]	; 0x3c
	}else if(!strcmp(command, "SOFT STOP")){
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
	}
}
 80007ec:	e049      	b.n	8000882 <right_motor_drive+0xde>
	}else if(!strcmp(command, "BACKWARD")){
 80007ee:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <right_motor_drive+0xf4>)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff fc87 	bl	8000108 <strcmp>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d110      	bne.n	8000820 <right_motor_drive+0x7c>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <right_motor_drive+0xec>)
 8000800:	2201      	movs	r2, #1
 8000802:	2104      	movs	r1, #4
 8000804:	0018      	movs	r0, r3
 8000806:	f001 fc2f 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <right_motor_drive+0xec>)
 800080c:	2200      	movs	r2, #0
 800080e:	2108      	movs	r1, #8
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fc29 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <right_motor_drive+0xf0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800081e:	e030      	b.n	8000882 <right_motor_drive+0xde>
	}else if(!strcmp(command, "FAST STOP")){
 8000820:	4a1e      	ldr	r2, [pc, #120]	; (800089c <right_motor_drive+0xf8>)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fc6e 	bl	8000108 <strcmp>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d110      	bne.n	8000852 <right_motor_drive+0xae>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <right_motor_drive+0xec>)
 8000832:	2201      	movs	r2, #1
 8000834:	2104      	movs	r1, #4
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fc16 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <right_motor_drive+0xec>)
 800083e:	2201      	movs	r2, #1
 8000840:	2108      	movs	r1, #8
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fc10 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <right_motor_drive+0xf0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000850:	e017      	b.n	8000882 <right_motor_drive+0xde>
	}else if(!strcmp(command, "SOFT STOP")){
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <right_motor_drive+0xfc>)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fc55 	bl	8000108 <strcmp>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d10f      	bne.n	8000882 <right_motor_drive+0xde>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <right_motor_drive+0xec>)
 8000864:	2201      	movs	r2, #1
 8000866:	2104      	movs	r1, #4
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fbfd 	bl	8002068 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <right_motor_drive+0xec>)
 8000870:	2201      	movs	r2, #1
 8000872:	2108      	movs	r1, #8
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fbf7 	bl	8002068 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <right_motor_drive+0xf0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	08005184 	.word	0x08005184
 8000890:	50000800 	.word	0x50000800
 8000894:	200000f0 	.word	0x200000f0
 8000898:	0800518c 	.word	0x0800518c
 800089c:	08005198 	.word	0x08005198
 80008a0:	080051a4 	.word	0x080051a4

080008a4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	003b      	movs	r3, r7
 80008ac:	0018      	movs	r0, r3
 80008ae:	2308      	movs	r3, #8
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f003 fc7a 	bl	80041ac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008b8:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_ADC_Init+0xd8>)
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <MX_ADC_Init+0xdc>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_ADC_Init+0xd8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_ADC_Init+0xd8>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	05d2      	lsls	r2, r2, #23
 80008ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_ADC_Init+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC_Init+0xd8>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC_Init+0xd8>)
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_ADC_Init+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC_Init+0xd8>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_ADC_Init+0xd8>)
 80008ee:	2221      	movs	r2, #33	; 0x21
 80008f0:	2100      	movs	r1, #0
 80008f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_ADC_Init+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_ADC_Init+0xd8>)
 80008fc:	22c2      	movs	r2, #194	; 0xc2
 80008fe:	32ff      	adds	r2, #255	; 0xff
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC_Init+0xd8>)
 8000904:	222c      	movs	r2, #44	; 0x2c
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC_Init+0xd8>)
 800090c:	2204      	movs	r2, #4
 800090e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_ADC_Init+0xd8>)
 8000912:	2200      	movs	r2, #0
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC_Init+0xd8>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_ADC_Init+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_ADC_Init+0xd8>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_ADC_Init+0xd8>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fd12 	bl	8001354 <HAL_ADC_Init>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000934:	f000 fa46 	bl	8000dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000938:	003b      	movs	r3, r7
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800093e:	003b      	movs	r3, r7
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0152      	lsls	r2, r2, #5
 8000944:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000946:	003a      	movs	r2, r7
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_ADC_Init+0xd8>)
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 ff71 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000956:	f000 fa35 	bl	8000dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800095a:	003b      	movs	r3, r7
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <MX_ADC_Init+0xe0>)
 800095e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000960:	003a      	movs	r2, r7
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_ADC_Init+0xd8>)
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 ff64 	bl	8001834 <HAL_ADC_ConfigChannel>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000970:	f000 fa28 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000008c 	.word	0x2000008c
 8000980:	40012400 	.word	0x40012400
 8000984:	04000002 	.word	0x04000002

08000988 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	240c      	movs	r4, #12
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f003 fc06 	bl	80041ac <memset>
  if(adcHandle->Instance==ADC1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <HAL_ADC_MspInit+0x70>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d122      	bne.n	80009f0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_ADC_MspInit+0x74>)
 80009ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_ADC_MspInit+0x74>)
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0089      	lsls	r1, r1, #2
 80009b4:	430a      	orrs	r2, r1
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_ADC_MspInit+0x74>)
 80009ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_ADC_MspInit+0x74>)
 80009be:	2101      	movs	r1, #1
 80009c0:	430a      	orrs	r2, r1
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_ADC_MspInit+0x74>)
 80009c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2203      	movs	r2, #3
 80009d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2203      	movs	r2, #3
 80009da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	193a      	adds	r2, r7, r4
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 f9c6 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b009      	add	sp, #36	; 0x24
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40012400 	.word	0x40012400
 80009fc:	40021000 	.word	0x40021000

08000a00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	2414      	movs	r4, #20
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f003 fbcb 	bl	80041ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	2204      	movs	r2, #4
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	430a      	orrs	r2, r1
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a56:	2201      	movs	r2, #1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a64:	2102      	movs	r1, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x11c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 faf3 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 faec 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0192      	lsls	r2, r2, #6
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2284      	movs	r2, #132	; 0x84
 8000a9c:	0392      	lsls	r2, r2, #14
 8000a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_GPIO_Init+0x11c>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f001 f965 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <MX_GPIO_Init+0x11c>)
 8000ace:	0019      	movs	r1, r3
 8000ad0:	0010      	movs	r0, r2
 8000ad2:	f001 f953 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad6:	0021      	movs	r1, r4
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2220      	movs	r2, #32
 8000adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000af0:	187a      	adds	r2, r7, r1
 8000af2:	23a0      	movs	r3, #160	; 0xa0
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 f93f 	bl	8001d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	2007      	movs	r0, #7
 8000b04:	f001 f908 	bl	8001d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b08:	2007      	movs	r0, #7
 8000b0a:	f001 f91a 	bl	8001d42 <HAL_NVIC_EnableIRQ>

}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b00b      	add	sp, #44	; 0x2c
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	50000800 	.word	0x50000800

08000b20 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d102      	bne.n	8000b34 <__io_putchar+0x14>
    __io_putchar('\r');
 8000b2e:	200d      	movs	r0, #13
 8000b30:	f7ff fff6 	bl	8000b20 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	1d39      	adds	r1, r7, #4
 8000b3a:	4804      	ldr	r0, [pc, #16]	; (8000b4c <__io_putchar+0x2c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f002 fe1f 	bl	8003780 <HAL_UART_Transmit>

  return 1;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000130 	.word	0x20000130

08000b50 <HAL_GPIO_EXTI_Callback>:

volatile int on = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin) {
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	881a      	ldrh	r2, [r3, #0]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	019b      	lsls	r3, r3, #6
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d10a      	bne.n	8000b7e <HAL_GPIO_EXTI_Callback+0x2e>
	  if(on){
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0x28>
		  on = 0;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	  }else{
		  on = 1;
	  }

  }
}
 8000b76:	e002      	b.n	8000b7e <HAL_GPIO_EXTI_Callback+0x2e>
		  on = 1;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	200000e8 	.word	0x200000e8

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 fb6f 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f8a3 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f7ff ff31 	bl	8000a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9e:	f000 facb 	bl	8001138 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000ba2:	f7ff fe7f 	bl	80008a4 <MX_ADC_Init>
  MX_TIM2_Init();
 8000ba6:	f000 f9e9 	bl	8000f7c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim2);
 8000baa:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <main+0x130>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f002 f9e1 	bl	8002f74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <main+0x130>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fa68 	bl	800308c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <main+0x130>)
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fa63 	bl	800308c <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <main+0x134>)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 ff5a 	bl	8001a84 <HAL_ADCEx_Calibration_Start>

  int roznica = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  int value[2];

  while (1)
  {

	  while(on){
 8000bd4:	e063      	b.n	8000c9e <main+0x112>

		  	  HAL_ADC_Start(&hadc);
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <main+0x134>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fd2f 	bl	800163c <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000bde:	2301      	movs	r3, #1
 8000be0:	425a      	negs	r2, r3
 8000be2:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <main+0x134>)
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fd7c 	bl	80016e4 <HAL_ADC_PollForConversion>
		  	  value[0] = HAL_ADC_GetValue(&hadc);
 8000bec:	4b34      	ldr	r3, [pc, #208]	; (8000cc0 <main+0x134>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fe14 	bl	800181c <HAL_ADC_GetValue>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	601a      	str	r2, [r3, #0]

		  	  HAL_ADC_Start(&hadc);
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <main+0x134>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fd1c 	bl	800163c <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000c04:	2301      	movs	r3, #1
 8000c06:	425a      	negs	r2, r3
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <main+0x134>)
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fd69 	bl	80016e4 <HAL_ADC_PollForConversion>
		  	  value[1] = HAL_ADC_GetValue(&hadc);
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <main+0x134>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 fe01 	bl	800181c <HAL_ADC_GetValue>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	605a      	str	r2, [r3, #4]

		  	  roznica = value[0] - value[1];
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	60fb      	str	r3, [r7, #12]

		  	  if(roznica > 30)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b1e      	cmp	r3, #30
 8000c32:	dd10      	ble.n	8000c56 <main+0xca>
		  	  {
		  		printf("roznica = %i (lewa strona)\n", roznica);
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <main+0x138>)
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f003 fabe 	bl	80041bc <iprintf>
		  			left_motor_drive(75,"BACKWARD");
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <main+0x13c>)
 8000c42:	0019      	movs	r1, r3
 8000c44:	204b      	movs	r0, #75	; 0x4b
 8000c46:	f7ff fd2d 	bl	80006a4 <left_motor_drive>
		  			right_motor_drive(75,"FORWARD");
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <main+0x140>)
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	204b      	movs	r0, #75	; 0x4b
 8000c50:	f7ff fda8 	bl	80007a4 <right_motor_drive>
 8000c54:	e023      	b.n	8000c9e <main+0x112>
		  	  }else if(roznica < -30){
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	331e      	adds	r3, #30
 8000c5a:	da10      	bge.n	8000c7e <main+0xf2>
		  		printf("roznica = %i (prawa strona)\n", roznica);
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <main+0x144>)
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f003 faaa 	bl	80041bc <iprintf>
		  			left_motor_drive(75,"FORWARD");
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <main+0x140>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	204b      	movs	r0, #75	; 0x4b
 8000c6e:	f7ff fd19 	bl	80006a4 <left_motor_drive>
		  			right_motor_drive(75,"BACKWARD");
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <main+0x13c>)
 8000c74:	0019      	movs	r1, r3
 8000c76:	204b      	movs	r0, #75	; 0x4b
 8000c78:	f7ff fd94 	bl	80007a4 <right_motor_drive>
 8000c7c:	e00f      	b.n	8000c9e <main+0x112>
		  	  }else{
		  		printf("roznica = %i (srodek)\n", roznica);
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <main+0x148>)
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f003 fa99 	bl	80041bc <iprintf>
	  			left_motor_drive(75,"FORWARD");
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <main+0x140>)
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	204b      	movs	r0, #75	; 0x4b
 8000c90:	f7ff fd08 	bl	80006a4 <left_motor_drive>
	  			right_motor_drive(75,"FORWARD");
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <main+0x140>)
 8000c96:	0019      	movs	r1, r3
 8000c98:	204b      	movs	r0, #75	; 0x4b
 8000c9a:	f7ff fd83 	bl	80007a4 <right_motor_drive>
	  while(on){
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <main+0x14c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d197      	bne.n	8000bd6 <main+0x4a>
		  	  }
	  }
		left_motor_drive(100,"FAST STOP");
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <main+0x150>)
 8000ca8:	0019      	movs	r1, r3
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f7ff fcfa 	bl	80006a4 <left_motor_drive>
		right_motor_drive(100,"FAST STOP");
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <main+0x150>)
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f7ff fd75 	bl	80007a4 <right_motor_drive>
	  while(on){
 8000cba:	e7f0      	b.n	8000c9e <main+0x112>
 8000cbc:	200000f0 	.word	0x200000f0
 8000cc0:	2000008c 	.word	0x2000008c
 8000cc4:	080051b0 	.word	0x080051b0
 8000cc8:	080051cc 	.word	0x080051cc
 8000ccc:	080051d8 	.word	0x080051d8
 8000cd0:	080051e0 	.word	0x080051e0
 8000cd4:	08005200 	.word	0x08005200
 8000cd8:	200000e8 	.word	0x200000e8
 8000cdc:	08005218 	.word	0x08005218

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b09d      	sub	sp, #116	; 0x74
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	2438      	movs	r4, #56	; 0x38
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	0018      	movs	r0, r3
 8000cec:	2338      	movs	r3, #56	; 0x38
 8000cee:	001a      	movs	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f003 fa5b 	bl	80041ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf6:	2324      	movs	r3, #36	; 0x24
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	2314      	movs	r3, #20
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2100      	movs	r1, #0
 8000d02:	f003 fa53 	bl	80041ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d06:	003b      	movs	r3, r7
 8000d08:	0018      	movs	r0, r3
 8000d0a:	2324      	movs	r3, #36	; 0x24
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f003 fa4c 	bl	80041ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <SystemClock_Config+0xdc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <SystemClock_Config+0xe0>)
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <SystemClock_Config+0xdc>)
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	0109      	lsls	r1, r1, #4
 8000d22:	430a      	orrs	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	22a0      	movs	r2, #160	; 0xa0
 8000d32:	02d2      	lsls	r2, r2, #11
 8000d34:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2202      	movs	r2, #2
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	0252      	lsls	r2, r2, #9
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	22c0      	movs	r2, #192	; 0xc0
 8000d48:	0312      	lsls	r2, r2, #12
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	03d2      	lsls	r2, r2, #15
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	0018      	movs	r0, r3
 8000d58:	f001 f9c0 	bl	80020dc <HAL_RCC_OscConfig>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d60:	f000 f830 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	2124      	movs	r1, #36	; 0x24
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	220f      	movs	r2, #15
 8000d6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2101      	movs	r1, #1
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 fd6b 	bl	8002864 <HAL_RCC_ClockConfig>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d92:	f000 f817 	bl	8000dc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2202      	movs	r2, #2
 8000d9a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	003b      	movs	r3, r7
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 ff81 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000dae:	f000 f809 	bl	8000dc4 <Error_Handler>
  }
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b01d      	add	sp, #116	; 0x74
 8000db8:	bd90      	pop	{r4, r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	40007000 	.word	0x40007000
 8000dc0:	ffffe7ff 	.word	0xffffe7ff

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_MspInit+0x24>)
 8000dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x24>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_MspInit+0x24>)
 8000de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_MspInit+0x24>)
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	0549      	lsls	r1, r1, #21
 8000dea:	430a      	orrs	r2, r1
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 fa7e 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	019b      	lsls	r3, r3, #6
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 f938 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e00a      	b.n	8000e62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e4c:	e000      	b.n	8000e50 <_read+0x16>
 8000e4e:	bf00      	nop
 8000e50:	0001      	movs	r1, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	b2ca      	uxtb	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dbf0      	blt.n	8000e4c <_read+0x12>
	}

return len;
 8000e6a:	687b      	ldr	r3, [r7, #4]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e009      	b.n	8000e9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	60ba      	str	r2, [r7, #8]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fe46 	bl	8000b20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbf1      	blt.n	8000e86 <_write+0x12>
	}
	return len;
 8000ea2:	687b      	ldr	r3, [r7, #4]
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b006      	add	sp, #24
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_close>:

int _close(int file)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return -1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	0192      	lsls	r2, r2, #6
 8000ed0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_isatty>:

int _isatty(int file)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	return 1;
 8000ee4:	2301      	movs	r3, #1
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
	return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b004      	add	sp, #16
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f003 f910 	bl	8004158 <__errno>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	425b      	negs	r3, r3
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	18d2      	adds	r2, r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b006      	add	sp, #24
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20002000 	.word	0x20002000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	200000ec 	.word	0x200000ec
 8000f6c:	200001c8 	.word	0x200001c8

08000f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f82:	2310      	movs	r3, #16
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	0018      	movs	r0, r3
 8000f88:	2308      	movs	r3, #8
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f003 f90d 	bl	80041ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	003b      	movs	r3, r7
 8000f94:	0018      	movs	r0, r3
 8000f96:	2310      	movs	r3, #16
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f003 f906 	bl	80041ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	05d2      	lsls	r2, r2, #23
 8000fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000faa:	220f      	movs	r2, #15
 8000fac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fb6:	2264      	movs	r2, #100	; 0x64
 8000fb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f002 f81f 	bl	800300c <HAL_TIM_PWM_Init>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fd2:	f7ff fef7 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_TIM2_Init+0xcc>)
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f002 fb1c 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ff4:	f7ff fee6 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2260      	movs	r2, #96	; 0x60
 8000ffc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2219      	movs	r2, #25
 8001002:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	003b      	movs	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	0039      	movs	r1, r7
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_TIM2_Init+0xcc>)
 8001014:	2200      	movs	r2, #0
 8001016:	0018      	movs	r0, r3
 8001018:	f002 f8c4 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001020:	f7ff fed0 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001024:	0039      	movs	r1, r7
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_TIM2_Init+0xcc>)
 8001028:	2208      	movs	r2, #8
 800102a:	0018      	movs	r0, r3
 800102c:	f002 f8ba 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001034:	f7ff fec6 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <MX_TIM2_Init+0xcc>)
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f81c 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b006      	add	sp, #24
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000f0 	.word	0x200000f0

0800104c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	429a      	cmp	r2, r3
 800105e:	d105      	bne.n	800106c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_TIM_PWM_MspInit+0x28>)
 8001062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_TIM_PWM_MspInit+0x28>)
 8001066:	2101      	movs	r1, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2414      	movs	r4, #20
 8001082:	193b      	adds	r3, r7, r4
 8001084:	0018      	movs	r0, r3
 8001086:	2314      	movs	r3, #20
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f003 f88e 	bl	80041ac <memset>
  if(timHandle->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	429a      	cmp	r2, r3
 800109a:	d145      	bne.n	8001128 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <HAL_TIM_MspPostInit+0xb8>)
 800109e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_TIM_MspPostInit+0xb8>)
 80010a2:	2102      	movs	r1, #2
 80010a4:	430a      	orrs	r2, r1
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_TIM_MspPostInit+0xb8>)
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_TIM_MspPostInit+0xb8>)
 80010b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_TIM_MspPostInit+0xb8>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_TIM_MspPostInit+0xb8>)
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2202      	movs	r2, #2
 80010d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2202      	movs	r2, #2
 80010ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_TIM_MspPostInit+0xbc>)
 80010f0:	0019      	movs	r1, r3
 80010f2:	0010      	movs	r0, r2
 80010f4:	f000 fe42 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010f8:	0021      	movs	r1, r4
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0212      	lsls	r2, r2, #8
 8001100:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2202      	movs	r2, #2
 8001106:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2205      	movs	r2, #5
 8001118:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	187a      	adds	r2, r7, r1
 800111c:	23a0      	movs	r3, #160	; 0xa0
 800111e:	05db      	lsls	r3, r3, #23
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fe2a 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b00b      	add	sp, #44	; 0x2c
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	50000400 	.word	0x50000400

08001138 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART2_UART_Init+0x58>)
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <MX_USART2_UART_Init+0x5c>)
 8001140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART2_UART_Init+0x58>)
 8001144:	22e1      	movs	r2, #225	; 0xe1
 8001146:	0252      	lsls	r2, r2, #9
 8001148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_USART2_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART2_UART_Init+0x58>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART2_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART2_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <MX_USART2_UART_Init+0x58>)
 800117c:	0018      	movs	r0, r3
 800117e:	f002 faab 	bl	80036d8 <HAL_UART_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001186:	f7ff fe1d 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000130 	.word	0x20000130
 8001194:	40004400 	.word	0x40004400

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	240c      	movs	r4, #12
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	0018      	movs	r0, r3
 80011a6:	2314      	movs	r3, #20
 80011a8:	001a      	movs	r2, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	f002 fffe 	bl	80041ac <memset>
  if(uartHandle->Instance==USART2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d129      	bne.n	800120e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_UART_MspInit+0x84>)
 80011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_UART_MspInit+0x84>)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0289      	lsls	r1, r1, #10
 80011c4:	430a      	orrs	r2, r1
 80011c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_UART_MspInit+0x84>)
 80011ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_UART_MspInit+0x84>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	430a      	orrs	r2, r1
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_UART_MspInit+0x84>)
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2201      	movs	r2, #1
 80011da:	4013      	ands	r3, r2
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011e0:	0021      	movs	r1, r4
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	220c      	movs	r2, #12
 80011e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2202      	movs	r2, #2
 80011ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2203      	movs	r2, #3
 80011f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2204      	movs	r2, #4
 80011fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	187a      	adds	r2, r7, r1
 8001202:	23a0      	movs	r3, #160	; 0xa0
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f000 fdb7 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b009      	add	sp, #36	; 0x24
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40004400 	.word	0x40004400
 800121c:	40021000 	.word	0x40021000

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x6>)
  ldr r1, =_edata
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <LoopForever+0xe>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800123c:	4c0b      	ldr	r4, [pc, #44]	; (800126c <LoopForever+0x16>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800124a:	f7ff fe91 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124e:	f002 ff89 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff fc9b 	bl	8000b8c <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
  ldr   r0, =_estack
 8001258:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001264:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 8001268:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800126c:	200001c8 	.word	0x200001c8

08001270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_COMP_IRQHandler>
	...

08001274 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x3c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Init+0x3c>)
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f811 	bl	80012b4 <HAL_InitTick>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d003      	beq.n	800129e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e001      	b.n	80012a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800129e:	f7ff fd97 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_InitTick+0x5c>)
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_InitTick+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	0019      	movs	r1, r3
 80012c6:	23fa      	movs	r3, #250	; 0xfa
 80012c8:	0098      	lsls	r0, r3, #2
 80012ca:	f7fe ff31 	bl	8000130 <__udivsi3>
 80012ce:	0003      	movs	r3, r0
 80012d0:	0019      	movs	r1, r3
 80012d2:	0020      	movs	r0, r4
 80012d4:	f7fe ff2c 	bl	8000130 <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fd41 	bl	8001d62 <HAL_SYSTICK_Config>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e00f      	b.n	8001308 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d80b      	bhi.n	8001306 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2301      	movs	r3, #1
 80012f2:	425b      	negs	r3, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fd0e 	bl	8001d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_InitTick+0x64>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b003      	add	sp, #12
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x1c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	001a      	movs	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_IncTick+0x20>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	18d2      	adds	r2, r2, r3
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_IncTick+0x20>)
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000008 	.word	0x20000008
 800133c:	200001b4 	.word	0x200001b4

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_GetTick+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	200001b4 	.word	0x200001b4

08001354 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e159      	b.n	800161a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2250      	movs	r2, #80	; 0x50
 8001378:	2100      	movs	r1, #0
 800137a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fb02 	bl	8000988 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	2210      	movs	r2, #16
 800138a:	4013      	ands	r3, r2
 800138c:	2b10      	cmp	r3, #16
 800138e:	d005      	beq.n	800139c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800139a:	d00b      	beq.n	80013b4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	2210      	movs	r2, #16
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2250      	movs	r2, #80	; 0x50
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e132      	b.n	800161a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b8:	4a9a      	ldr	r2, [pc, #616]	; (8001624 <HAL_ADC_Init+0x2d0>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	2202      	movs	r2, #2
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2203      	movs	r2, #3
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_Init+0x90>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Init+0x90>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_ADC_Init+0x92>
 80013e4:	2300      	movs	r3, #0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d149      	bne.n	800147e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	23c0      	movs	r3, #192	; 0xc0
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d00b      	beq.n	800140e <HAL_ADC_Init+0xba>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	429a      	cmp	r2, r3
 8001400:	d005      	beq.n	800140e <HAL_ADC_Init+0xba>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	429a      	cmp	r2, r3
 800140c:	d111      	bne.n	8001432 <HAL_ADC_Init+0xde>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	0892      	lsrs	r2, r2, #2
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6919      	ldr	r1, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	e014      	b.n	800145c <HAL_ADC_Init+0x108>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	0892      	lsrs	r2, r2, #2
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	4b79      	ldr	r3, [pc, #484]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001448:	4978      	ldr	r1, [pc, #480]	; (800162c <HAL_ADC_Init+0x2d8>)
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b76      	ldr	r3, [pc, #472]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2118      	movs	r1, #24
 8001468:	438a      	bics	r2, r1
 800146a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68d9      	ldr	r1, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b69      	ldr	r3, [pc, #420]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001484:	496a      	ldr	r1, [pc, #424]	; (8001630 <HAL_ADC_Init+0x2dc>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_ADC_Init+0x2d4>)
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	065a      	lsls	r2, r3, #25
 8001494:	4b64      	ldr	r3, [pc, #400]	; (8001628 <HAL_ADC_Init+0x2d4>)
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	055b      	lsls	r3, r3, #21
 80014a4:	4013      	ands	r3, r2
 80014a6:	d108      	bne.n	80014ba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0549      	lsls	r1, r1, #21
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	495b      	ldr	r1, [pc, #364]	; (8001634 <HAL_ADC_Init+0x2e0>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d101      	bne.n	80014e0 <HAL_ADC_Init+0x18c>
 80014dc:	2304      	movs	r3, #4
 80014de:	e000      	b.n	80014e2 <HAL_ADC_Init+0x18e>
 80014e0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014e2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2020      	movs	r0, #32
 80014e8:	5c1b      	ldrb	r3, [r3, r0]
 80014ea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014ec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	202c      	movs	r0, #44	; 0x2c
 80014f2:	5c1b      	ldrb	r3, [r3, r0]
 80014f4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014f6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001504:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800150c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	23c2      	movs	r3, #194	; 0xc2
 800151c:	33ff      	adds	r3, #255	; 0xff
 800151e:	429a      	cmp	r2, r3
 8001520:	d00b      	beq.n	800153a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68d9      	ldr	r1, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2221      	movs	r2, #33	; 0x21
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d11a      	bne.n	800157a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	5c9b      	ldrb	r3, [r3, r2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0249      	lsls	r1, r1, #9
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	e00b      	b.n	800157a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	2220      	movs	r2, #32
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	2201      	movs	r2, #1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157e:	2b01      	cmp	r3, #1
 8001580:	d11f      	bne.n	80015c2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	492a      	ldr	r1, [pc, #168]	; (8001638 <HAL_ADC_Init+0x2e4>)
 800158e:	400a      	ands	r2, r1
 8001590:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6919      	ldr	r1, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015a0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80015a6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	e00e      	b.n	80015e0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	438a      	bics	r2, r1
 80015de:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2107      	movs	r1, #7
 80015ec:	438a      	bics	r2, r1
 80015ee:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6959      	ldr	r1, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	2203      	movs	r2, #3
 800160e:	4393      	bics	r3, r2
 8001610:	2201      	movs	r2, #1
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	fffffefd 	.word	0xfffffefd
 8001628:	40012708 	.word	0x40012708
 800162c:	ffc3ffff 	.word	0xffc3ffff
 8001630:	fdffffff 	.word	0xfdffffff
 8001634:	fffe0219 	.word	0xfffe0219
 8001638:	fffffc03 	.word	0xfffffc03

0800163c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	230f      	movs	r3, #15
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2204      	movs	r2, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d138      	bne.n	80016ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2250      	movs	r2, #80	; 0x50
 800165c:	5c9b      	ldrb	r3, [r3, r2]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_ADC_Start+0x2a>
 8001662:	2302      	movs	r3, #2
 8001664:	e038      	b.n	80016d8 <HAL_ADC_Start+0x9c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2250      	movs	r2, #80	; 0x50
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d007      	beq.n	8001686 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001676:	230f      	movs	r3, #15
 8001678:	18fc      	adds	r4, r7, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f000 f979 	bl	8001974 <ADC_Enable>
 8001682:	0003      	movs	r3, r0
 8001684:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d120      	bne.n	80016d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_ADC_Start+0xa4>)
 8001696:	4013      	ands	r3, r2
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	0052      	lsls	r2, r2, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2250      	movs	r2, #80	; 0x50
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	221c      	movs	r2, #28
 80016b6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2104      	movs	r1, #4
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e003      	b.n	80016d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ca:	230f      	movs	r3, #15
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016d2:	230f      	movs	r3, #15
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b005      	add	sp, #20
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	fffff0fe 	.word	0xfffff0fe

080016e4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d102      	bne.n	8001704 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016fe:	2308      	movs	r3, #8
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e014      	b.n	800172e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10b      	bne.n	800172a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	2220      	movs	r2, #32
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2250      	movs	r2, #80	; 0x50
 8001722:	2100      	movs	r1, #0
 8001724:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e072      	b.n	8001810 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800172a:	230c      	movs	r3, #12
 800172c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800172e:	f7ff fe07 	bl	8001340 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001736:	e01f      	b.n	8001778 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	d01c      	beq.n	8001778 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_ADC_PollForConversion+0x70>
 8001744:	f7ff fdfc 	bl	8001340 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d211      	bcs.n	8001778 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	2204      	movs	r2, #4
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2250      	movs	r2, #80	; 0x50
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e04b      	b.n	8001810 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	d0d9      	beq.n	8001738 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4013      	ands	r3, r2
 800179e:	d12e      	bne.n	80017fe <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d129      	bne.n	80017fe <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d122      	bne.n	80017fe <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d110      	bne.n	80017e6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	210c      	movs	r1, #12
 80017d0:	438a      	bics	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_ADC_PollForConversion+0x134>)
 80017da:	4013      	ands	r3, r2
 80017dc:	2201      	movs	r2, #1
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
 80017e4:	e00b      	b.n	80017fe <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	2220      	movs	r2, #32
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	2201      	movs	r2, #1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}
 8001818:	fffffefe 	.word	0xfffffefe

0800181c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2250      	movs	r2, #80	; 0x50
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x18>
 8001848:	2302      	movs	r3, #2
 800184a:	e085      	b.n	8001958 <HAL_ADC_ConfigChannel+0x124>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2250      	movs	r2, #80	; 0x50
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d00b      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	2220      	movs	r2, #32
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2250      	movs	r2, #80	; 0x50
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e06f      	b.n	8001958 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a38      	ldr	r2, [pc, #224]	; (8001960 <HAL_ADC_ConfigChannel+0x12c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d035      	beq.n	80018ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	0b5a      	lsrs	r2, r3, #13
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	02db      	lsls	r3, r3, #11
 80018a0:	4013      	ands	r3, r2
 80018a2:	d009      	beq.n	80018b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0409      	lsls	r1, r1, #16
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f000 f8c6 	bl	8001a44 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	029b      	lsls	r3, r3, #10
 80018c0:	4013      	ands	r3, r2
 80018c2:	d006      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	03c9      	lsls	r1, r1, #15
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	4013      	ands	r3, r2
 80018dc:	d037      	beq.n	800194e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0449      	lsls	r1, r1, #17
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e02f      	b.n	800194e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	035b      	lsls	r3, r3, #13
 80018fa:	0b5b      	lsrs	r3, r3, #13
 80018fc:	43d9      	mvns	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	400a      	ands	r2, r1
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	02db      	lsls	r3, r3, #11
 800190e:	4013      	ands	r3, r2
 8001910:	d005      	beq.n	800191e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001918:	4913      	ldr	r1, [pc, #76]	; (8001968 <HAL_ADC_ConfigChannel+0x134>)
 800191a:	400a      	ands	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	029b      	lsls	r3, r3, #10
 8001926:	4013      	ands	r3, r2
 8001928:	d005      	beq.n	8001936 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_ADC_ConfigChannel+0x138>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	4013      	ands	r3, r2
 8001940:	d005      	beq.n	800194e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_ADC_ConfigChannel+0x130>)
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <HAL_ADC_ConfigChannel+0x13c>)
 800194a:	400a      	ands	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2250      	movs	r2, #80	; 0x50
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00001001 	.word	0x00001001
 8001964:	40012708 	.word	0x40012708
 8001968:	ff7fffff 	.word	0xff7fffff
 800196c:	ffbfffff 	.word	0xffbfffff
 8001970:	feffffff 	.word	0xfeffffff

08001974 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2203      	movs	r2, #3
 8001988:	4013      	ands	r3, r2
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <ADC_Enable+0x2c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <ADC_Enable+0x2c>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <ADC_Enable+0x2e>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d146      	bne.n	8001a34 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <ADC_Enable+0xcc>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	d00d      	beq.n	80019ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	2210      	movs	r2, #16
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	2201      	movs	r2, #1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e033      	b.n	8001a36 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 f830 	bl	8001a44 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fcac 	bl	8001340 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ec:	e01b      	b.n	8001a26 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ee:	f7ff fca7 	bl	8001340 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b0a      	cmp	r3, #10
 80019fa:	d914      	bls.n	8001a26 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d00d      	beq.n	8001a26 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	2210      	movs	r2, #16
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e007      	b.n	8001a36 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d1dc      	bne.n	80019ee <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	80000017 	.word	0x80000017

08001a44 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <ADC_DelayMicroSecond+0x38>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	490b      	ldr	r1, [pc, #44]	; (8001a80 <ADC_DelayMicroSecond+0x3c>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7fe fb6c 	bl	8000130 <__udivsi3>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4353      	muls	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001a62:	e002      	b.n	8001a6a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	000f4240 	.word	0x000f4240

08001a84 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8e:	2317      	movs	r3, #23
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2250      	movs	r2, #80	; 0x50
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADCEx_Calibration_Start+0x28>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e083      	b.n	8001bb4 <HAL_ADCEx_Calibration_Start+0x130>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2250      	movs	r2, #80	; 0x50
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2203      	movs	r2, #3
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_ADCEx_Calibration_Start+0x50>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADCEx_Calibration_Start+0x50>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_ADCEx_Calibration_Start+0x52>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d15b      	bne.n	8001b92 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	4a37      	ldr	r2, [pc, #220]	; (8001bbc <HAL_ADCEx_Calibration_Start+0x138>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2203      	movs	r2, #3
 8001af2:	4013      	ands	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2103      	movs	r1, #3
 8001b02:	438a      	bics	r2, r1
 8001b04:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0609      	lsls	r1, r1, #24
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b18:	f7ff fc12 	bl	8001340 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b20:	e01d      	b.n	8001b5e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b22:	f7ff fc0d 	bl	8001340 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b0a      	cmp	r3, #10
 8001b2e:	d916      	bls.n	8001b5e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0fdb      	lsrs	r3, r3, #31
 8001b38:	07da      	lsls	r2, r3, #31
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d10d      	bne.n	8001b5e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	2212      	movs	r2, #18
 8001b48:	4393      	bics	r3, r2
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2250      	movs	r2, #80	; 0x50
 8001b56:	2100      	movs	r1, #0
 8001b58:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e02a      	b.n	8001bb4 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	0fdb      	lsrs	r3, r3, #31
 8001b66:	07da      	lsls	r2, r3, #31
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	061b      	lsls	r3, r3, #24
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d0d8      	beq.n	8001b22 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68d9      	ldr	r1, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	2203      	movs	r2, #3
 8001b86:	4393      	bics	r3, r2
 8001b88:	2201      	movs	r2, #1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b90:	e009      	b.n	8001ba6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	2220      	movs	r2, #32
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001b9e:	2317      	movs	r3, #23
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2250      	movs	r2, #80	; 0x50
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001bae:	2317      	movs	r3, #23
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b006      	add	sp, #24
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	fffffefd 	.word	0xfffffefd

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd2:	d809      	bhi.n	8001be8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	001a      	movs	r2, r3
 8001bda:	231f      	movs	r3, #31
 8001bdc:	401a      	ands	r2, r3
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_EnableIRQ+0x30>)
 8001be0:	2101      	movs	r1, #1
 8001be2:	4091      	lsls	r1, r2
 8001be4:	000a      	movs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
  }
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b7f      	cmp	r3, #127	; 0x7f
 8001c08:	d828      	bhi.n	8001c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c0a:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <__NVIC_SetPriority+0xd4>)
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	33c0      	adds	r3, #192	; 0xc0
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	589b      	ldr	r3, [r3, r2]
 8001c1a:	1dfa      	adds	r2, r7, #7
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	0011      	movs	r1, r2
 8001c20:	2203      	movs	r2, #3
 8001c22:	400a      	ands	r2, r1
 8001c24:	00d2      	lsls	r2, r2, #3
 8001c26:	21ff      	movs	r1, #255	; 0xff
 8001c28:	4091      	lsls	r1, r2
 8001c2a:	000a      	movs	r2, r1
 8001c2c:	43d2      	mvns	r2, r2
 8001c2e:	401a      	ands	r2, r3
 8001c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	22ff      	movs	r2, #255	; 0xff
 8001c38:	401a      	ands	r2, r3
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2303      	movs	r3, #3
 8001c42:	4003      	ands	r3, r0
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c48:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <__NVIC_SetPriority+0xd4>)
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	430a      	orrs	r2, r1
 8001c54:	33c0      	adds	r3, #192	; 0xc0
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c5a:	e031      	b.n	8001cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <__NVIC_SetPriority+0xd8>)
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	0019      	movs	r1, r3
 8001c64:	230f      	movs	r3, #15
 8001c66:	400b      	ands	r3, r1
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3306      	adds	r3, #6
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	3304      	adds	r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	1dfa      	adds	r2, r7, #7
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	400a      	ands	r2, r1
 8001c80:	00d2      	lsls	r2, r2, #3
 8001c82:	21ff      	movs	r1, #255	; 0xff
 8001c84:	4091      	lsls	r1, r2
 8001c86:	000a      	movs	r2, r1
 8001c88:	43d2      	mvns	r2, r2
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	22ff      	movs	r2, #255	; 0xff
 8001c94:	401a      	ands	r2, r3
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	4003      	ands	r3, r0
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca4:	4809      	ldr	r0, [pc, #36]	; (8001ccc <__NVIC_SetPriority+0xd8>)
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	001c      	movs	r4, r3
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	3b08      	subs	r3, #8
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	3306      	adds	r3, #6
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	18c3      	adds	r3, r0, r3
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b003      	add	sp, #12
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1e5a      	subs	r2, r3, #1
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	045b      	lsls	r3, r3, #17
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d301      	bcc.n	8001ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e010      	b.n	8001d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <SysTick_Config+0x44>)
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	3a01      	subs	r2, #1
 8001cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff ff7c 	bl	8001bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SysTick_Config+0x44>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SysTick_Config+0x44>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	210f      	movs	r1, #15
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	1c02      	adds	r2, r0, #0
 8001d28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7ff ff5d 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	0002      	movs	r2, r0
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7ff ff33 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ffaf 	bl	8001cd0 <SysTick_Config>
 8001d72:	0003      	movs	r3, r0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d92:	e14f      	b.n	8002034 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2101      	movs	r1, #1
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4091      	lsls	r1, r2
 8001d9e:	000a      	movs	r2, r1
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d100      	bne.n	8001dac <HAL_GPIO_Init+0x30>
 8001daa:	e140      	b.n	800202e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d005      	beq.n	8001dc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d130      	bne.n	8001e26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	0013      	movs	r3, r2
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	43da      	mvns	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	2201      	movs	r2, #1
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d017      	beq.n	8001e62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d123      	bne.n	8001eb6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	58d3      	ldr	r3, [r2, r3]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2207      	movs	r2, #7
 8001e80:	4013      	ands	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	409a      	lsls	r2, r3
 8001e88:	0013      	movs	r3, r2
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2107      	movs	r1, #7
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	6939      	ldr	r1, [r7, #16]
 8001eb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d100      	bne.n	8001ef8 <HAL_GPIO_Init+0x17c>
 8001ef6:	e09a      	b.n	800202e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef8:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2d4>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	589b      	ldr	r3, [r3, r2]
 8001f10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	43da      	mvns	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	23a0      	movs	r3, #160	; 0xa0
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x1ea>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_GPIO_Init+0x2d8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1e6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_GPIO_Init+0x2dc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1e2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a45      	ldr	r2, [pc, #276]	; (800205c <HAL_GPIO_Init+0x2e0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1de>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a44      	ldr	r2, [pc, #272]	; (8002060 <HAL_GPIO_Init+0x2e4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1da>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f66:	2300      	movs	r3, #0
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2d4>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	035b      	lsls	r3, r3, #13
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43da      	mvns	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	039b      	lsls	r3, r3, #14
 800201c:	4013      	ands	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	40da      	lsrs	r2, r3
 800203c:	1e13      	subs	r3, r2, #0
 800203e:	d000      	beq.n	8002042 <HAL_GPIO_Init+0x2c6>
 8002040:	e6a8      	b.n	8001d94 <HAL_GPIO_Init+0x18>
  }
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	50000400 	.word	0x50000400
 8002058:	50000800 	.word	0x50000800
 800205c:	50000c00 	.word	0x50000c00
 8002060:	50001c00 	.word	0x50001c00
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	0008      	movs	r0, r1
 8002072:	0011      	movs	r1, r2
 8002074:	1cbb      	adds	r3, r7, #2
 8002076:	1c02      	adds	r2, r0, #0
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	1c7b      	adds	r3, r7, #1
 800207c:	1c0a      	adds	r2, r1, #0
 800207e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	1c7b      	adds	r3, r7, #1
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002088:	1cbb      	adds	r3, r7, #2
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002092:	1cbb      	adds	r3, r7, #2
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	0002      	movs	r2, r0
 80020ac:	1dbb      	adds	r3, r7, #6
 80020ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	1dba      	adds	r2, r7, #6
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	4013      	ands	r3, r2
 80020ba:	d008      	beq.n	80020ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020be:	1dba      	adds	r2, r7, #6
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe fd41 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f000 fbaf 	bl	800284e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f0:	4bcf      	ldr	r3, [pc, #828]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	220c      	movs	r2, #12
 80020f6:	4013      	ands	r3, r2
 80020f8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fa:	4bcd      	ldr	r3, [pc, #820]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	025b      	lsls	r3, r3, #9
 8002102:	4013      	ands	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d100      	bne.n	8002112 <HAL_RCC_OscConfig+0x36>
 8002110:	e07e      	b.n	8002210 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d007      	beq.n	8002128 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	429a      	cmp	r2, r3
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4bc1      	ldr	r3, [pc, #772]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x5a>
 8002134:	e06b      	b.n	800220e <HAL_RCC_OscConfig+0x132>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d167      	bne.n	800220e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 fb85 	bl	800284e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	025b      	lsls	r3, r3, #9
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x84>
 8002150:	4bb7      	ldr	r3, [pc, #732]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4bb6      	ldr	r3, [pc, #728]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0249      	lsls	r1, r1, #9
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e027      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	23a0      	movs	r3, #160	; 0xa0
 8002166:	02db      	lsls	r3, r3, #11
 8002168:	429a      	cmp	r2, r3
 800216a:	d10e      	bne.n	800218a <HAL_RCC_OscConfig+0xae>
 800216c:	4bb0      	ldr	r3, [pc, #704]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4baf      	ldr	r3, [pc, #700]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	02c9      	lsls	r1, r1, #11
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4bad      	ldr	r3, [pc, #692]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4bac      	ldr	r3, [pc, #688]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0249      	lsls	r1, r1, #9
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e012      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 800218a:	4ba9      	ldr	r3, [pc, #676]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4ba8      	ldr	r3, [pc, #672]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002190:	49a8      	ldr	r1, [pc, #672]	; (8002434 <HAL_RCC_OscConfig+0x358>)
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4ba6      	ldr	r3, [pc, #664]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	025b      	lsls	r3, r3, #9
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4ba2      	ldr	r3, [pc, #648]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4ba1      	ldr	r3, [pc, #644]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80021aa:	49a3      	ldr	r1, [pc, #652]	; (8002438 <HAL_RCC_OscConfig+0x35c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f8c2 	bl	8001340 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c2:	f7ff f8bd 	bl	8001340 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d902      	bls.n	80021d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	f000 fb3c 	bl	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d6:	4b96      	ldr	r3, [pc, #600]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	029b      	lsls	r3, r3, #10
 80021de:	4013      	ands	r3, r2
 80021e0:	d0ef      	beq.n	80021c2 <HAL_RCC_OscConfig+0xe6>
 80021e2:	e015      	b.n	8002210 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f8ac 	bl	8001340 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ee:	f7ff f8a7 	bl	8001340 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e326      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002200:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	4013      	ands	r3, r2
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x112>
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x140>
 800221a:	e08b      	b.n	8002334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d13e      	bne.n	80022ac <HAL_RCC_OscConfig+0x1d0>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d13b      	bne.n	80022ac <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2204      	movs	r2, #4
 800223a:	4013      	ands	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_RCC_OscConfig+0x16c>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e302      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b79      	ldr	r3, [pc, #484]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a7b      	ldr	r2, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x360>)
 800224e:	4013      	ands	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	021a      	lsls	r2, r3, #8
 8002258:	4b75      	ldr	r3, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2209      	movs	r2, #9
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	4b71      	ldr	r3, [pc, #452]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002270:	f000 fc40 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002274:	0001      	movs	r1, r0
 8002276:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	220f      	movs	r2, #15
 800227e:	4013      	ands	r3, r2
 8002280:	4a6f      	ldr	r2, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x364>)
 8002282:	5cd3      	ldrb	r3, [r2, r3]
 8002284:	000a      	movs	r2, r1
 8002286:	40da      	lsrs	r2, r3
 8002288:	4b6e      	ldr	r3, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x368>)
 800228a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800228c:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x36c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2513      	movs	r5, #19
 8002292:	197c      	adds	r4, r7, r5
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff f80d 	bl	80012b4 <HAL_InitTick>
 800229a:	0003      	movs	r3, r0
 800229c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800229e:	197b      	adds	r3, r7, r5
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d046      	beq.n	8002334 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	e2d0      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d027      	beq.n	8002302 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2209      	movs	r2, #9
 80022b8:	4393      	bics	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff f83c 	bl	8001340 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff f837 	bl	8001340 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e2b6      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2204      	movs	r2, #4
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f1      	beq.n	80022ce <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b51      	ldr	r3, [pc, #324]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a53      	ldr	r2, [pc, #332]	; (800243c <HAL_RCC_OscConfig+0x360>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	e018      	b.n	8002334 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002308:	2101      	movs	r1, #1
 800230a:	438a      	bics	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff f817 	bl	8001340 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff f812 	bl	8001340 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e291      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d1f1      	bne.n	8002318 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	4013      	ands	r3, r2
 800233c:	d100      	bne.n	8002340 <HAL_RCC_OscConfig+0x264>
 800233e:	e0a1      	b.n	8002484 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d140      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002346:	4b3a      	ldr	r3, [pc, #232]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4013      	ands	r3, r2
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x282>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e277      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235e:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a3a      	ldr	r2, [pc, #232]	; (800244c <HAL_RCC_OscConfig+0x370>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236c:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	0a19      	lsrs	r1, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	061a      	lsls	r2, r3, #24
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	0b5b      	lsrs	r3, r3, #13
 800238c:	3301      	adds	r3, #1
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0212      	lsls	r2, r2, #8
 8002392:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	210f      	movs	r1, #15
 800239c:	400b      	ands	r3, r1
 800239e:	4928      	ldr	r1, [pc, #160]	; (8002440 <HAL_RCC_OscConfig+0x364>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x368>)
 80023a6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x36c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2513      	movs	r5, #19
 80023ae:	197c      	adds	r4, r7, r5
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7fe ff7f 	bl	80012b4 <HAL_InitTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80023ba:	197b      	adds	r3, r7, r5
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d060      	beq.n	8002484 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80023c2:	197b      	adds	r3, r7, r5
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	e242      	b.n	800284e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03f      	beq.n	8002450 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	0049      	lsls	r1, r1, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe ffaf 	bl	8001340 <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e8:	f7fe ffaa 	bl	8001340 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e229      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x370>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	0a19      	lsrs	r1, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	061a      	lsls	r2, r3, #24
 8002428:	4b01      	ldr	r3, [pc, #4]	; (8002430 <HAL_RCC_OscConfig+0x354>)
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	e029      	b.n	8002484 <HAL_RCC_OscConfig+0x3a8>
 8002430:	40021000 	.word	0x40021000
 8002434:	fffeffff 	.word	0xfffeffff
 8002438:	fffbffff 	.word	0xfffbffff
 800243c:	ffffe0ff 	.word	0xffffe0ff
 8002440:	08005224 	.word	0x08005224
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004
 800244c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002450:	4bbd      	ldr	r3, [pc, #756]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4bbc      	ldr	r3, [pc, #752]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002456:	49bd      	ldr	r1, [pc, #756]	; (800274c <HAL_RCC_OscConfig+0x670>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe ff70 	bl	8001340 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002466:	f7fe ff6b 	bl	8001340 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1ea      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002478:	4bb3      	ldr	r3, [pc, #716]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2208      	movs	r2, #8
 800248a:	4013      	ands	r3, r2
 800248c:	d036      	beq.n	80024fc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4bac      	ldr	r3, [pc, #688]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800249a:	4bab      	ldr	r3, [pc, #684]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800249c:	2101      	movs	r1, #1
 800249e:	430a      	orrs	r2, r1
 80024a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe ff4d 	bl	8001340 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe ff48 	bl	8001340 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1c7      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024be:	4ba2      	ldr	r3, [pc, #648]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80024c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0f1      	beq.n	80024ac <HAL_RCC_OscConfig+0x3d0>
 80024c8:	e018      	b.n	80024fc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b9f      	ldr	r3, [pc, #636]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80024cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ce:	4b9e      	ldr	r3, [pc, #632]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	438a      	bics	r2, r1
 80024d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe ff33 	bl	8001340 <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe ff2e 	bl	8001340 <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1ad      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024f2:	4b95      	ldr	r3, [pc, #596]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80024f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d1f1      	bne.n	80024e0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2204      	movs	r2, #4
 8002502:	4013      	ands	r3, r2
 8002504:	d100      	bne.n	8002508 <HAL_RCC_OscConfig+0x42c>
 8002506:	e0ae      	b.n	8002666 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002508:	2027      	movs	r0, #39	; 0x27
 800250a:	183b      	adds	r3, r7, r0
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002510:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	055b      	lsls	r3, r3, #21
 8002518:	4013      	ands	r3, r2
 800251a:	d109      	bne.n	8002530 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800251e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002520:	4b89      	ldr	r3, [pc, #548]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0549      	lsls	r1, r1, #21
 8002526:	430a      	orrs	r2, r1
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800252a:	183b      	adds	r3, r7, r0
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b87      	ldr	r3, [pc, #540]	; (8002750 <HAL_RCC_OscConfig+0x674>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d11a      	bne.n	8002572 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253c:	4b84      	ldr	r3, [pc, #528]	; (8002750 <HAL_RCC_OscConfig+0x674>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b83      	ldr	r3, [pc, #524]	; (8002750 <HAL_RCC_OscConfig+0x674>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0049      	lsls	r1, r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fef9 	bl	8001340 <HAL_GetTick>
 800254e:	0003      	movs	r3, r0
 8002550:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7fe fef4 	bl	8001340 <HAL_GetTick>
 8002558:	0002      	movs	r2, r0
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e173      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x674>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	429a      	cmp	r2, r3
 800257c:	d107      	bne.n	800258e <HAL_RCC_OscConfig+0x4b2>
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002582:	4b71      	ldr	r3, [pc, #452]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	0049      	lsls	r1, r1, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	651a      	str	r2, [r3, #80]	; 0x50
 800258c:	e031      	b.n	80025f2 <HAL_RCC_OscConfig+0x516>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4d4>
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800259c:	496b      	ldr	r1, [pc, #428]	; (800274c <HAL_RCC_OscConfig+0x670>)
 800259e:	400a      	ands	r2, r1
 80025a0:	651a      	str	r2, [r3, #80]	; 0x50
 80025a2:	4b69      	ldr	r3, [pc, #420]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a6:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025a8:	496a      	ldr	r1, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x678>)
 80025aa:	400a      	ands	r2, r1
 80025ac:	651a      	str	r2, [r3, #80]	; 0x50
 80025ae:	e020      	b.n	80025f2 <HAL_RCC_OscConfig+0x516>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	23a0      	movs	r3, #160	; 0xa0
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d10e      	bne.n	80025da <HAL_RCC_OscConfig+0x4fe>
 80025bc:	4b62      	ldr	r3, [pc, #392]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c0:	4b61      	ldr	r3, [pc, #388]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	00c9      	lsls	r1, r1, #3
 80025c6:	430a      	orrs	r2, r1
 80025c8:	651a      	str	r2, [r3, #80]	; 0x50
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ce:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	651a      	str	r2, [r3, #80]	; 0x50
 80025d8:	e00b      	b.n	80025f2 <HAL_RCC_OscConfig+0x516>
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025de:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025e0:	495a      	ldr	r1, [pc, #360]	; (800274c <HAL_RCC_OscConfig+0x670>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	651a      	str	r2, [r3, #80]	; 0x50
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ea:	4b57      	ldr	r3, [pc, #348]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80025ec:	4959      	ldr	r1, [pc, #356]	; (8002754 <HAL_RCC_OscConfig+0x678>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fea1 	bl	8001340 <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002602:	e009      	b.n	8002618 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fe9c 	bl	8001340 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e11a      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800261a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d0ef      	beq.n	8002604 <HAL_RCC_OscConfig+0x528>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe fe8b 	bl	8001340 <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800262e:	e009      	b.n	8002644 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fe86 	bl	8001340 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e104      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002644:	4b40      	ldr	r3, [pc, #256]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d1ef      	bne.n	8002630 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002650:	2327      	movs	r3, #39	; 0x27
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800265c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002660:	493e      	ldr	r1, [pc, #248]	; (800275c <HAL_RCC_OscConfig+0x680>)
 8002662:	400a      	ands	r2, r1
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2220      	movs	r2, #32
 800266c:	4013      	ands	r3, r2
 800266e:	d049      	beq.n	8002704 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d026      	beq.n	80026c6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002678:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800267e:	2101      	movs	r1, #1
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 800268a:	2101      	movs	r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_RCC_OscConfig+0x684>)
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_RCC_OscConfig+0x684>)
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	0189      	lsls	r1, r1, #6
 800269a:	430a      	orrs	r2, r1
 800269c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fe4f 	bl	8001340 <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a8:	f7fe fe4a 	bl	8001340 <HAL_GetTick>
 80026ac:	0002      	movs	r2, r0
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0c9      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d0f1      	beq.n	80026a8 <HAL_RCC_OscConfig+0x5cc>
 80026c4:	e01e      	b.n	8002704 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	438a      	bics	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <HAL_RCC_OscConfig+0x684>)
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_OscConfig+0x684>)
 80026d8:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_OscConfig+0x688>)
 80026da:	400a      	ands	r2, r1
 80026dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fe2f 	bl	8001340 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e8:	f7fe fe2a 	bl	8001340 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0a9      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d1f1      	bne.n	80026e8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x632>
 800270c:	e09e      	b.n	800284c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x63a>
 8002714:	e077      	b.n	8002806 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b02      	cmp	r3, #2
 800271c:	d158      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x66c>)
 8002724:	4910      	ldr	r1, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x68c>)
 8002726:	400a      	ands	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe fe09 	bl	8001340 <HAL_GetTick>
 800272e:	0003      	movs	r3, r0
 8002730:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002732:	e01b      	b.n	800276c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fe04 	bl	8001340 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d914      	bls.n	800276c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e083      	b.n	800284e <HAL_RCC_OscConfig+0x772>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40021000 	.word	0x40021000
 800274c:	fffffeff 	.word	0xfffffeff
 8002750:	40007000 	.word	0x40007000
 8002754:	fffffbff 	.word	0xfffffbff
 8002758:	00001388 	.word	0x00001388
 800275c:	efffffff 	.word	0xefffffff
 8002760:	40010000 	.word	0x40010000
 8002764:	ffffdfff 	.word	0xffffdfff
 8002768:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	049b      	lsls	r3, r3, #18
 8002774:	4013      	ands	r3, r2
 8002776:	d1dd      	bne.n	8002734 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a37      	ldr	r2, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	431a      	orrs	r2, r3
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0449      	lsls	r1, r1, #17
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe fdcb 	bl	8001340 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fdc6 	bl	8001340 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e045      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	049b      	lsls	r3, r3, #18
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x6d4>
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027d6:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_RCC_OscConfig+0x784>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fdb0 	bl	8001340 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fdab 	bl	8001340 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e02a      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	049b      	lsls	r3, r3, #18
 8002800:	4013      	ands	r3, r2
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x70a>
 8002804:	e022      	b.n	800284c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e01d      	b.n	800284e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	025b      	lsls	r3, r3, #9
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	429a      	cmp	r2, r3
 8002826:	d10f      	bne.n	8002848 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	23f0      	movs	r3, #240	; 0xf0
 800282c:	039b      	lsls	r3, r3, #14
 800282e:	401a      	ands	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	23c0      	movs	r3, #192	; 0xc0
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	401a      	ands	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b00a      	add	sp, #40	; 0x28
 8002854:	bdb0      	pop	{r4, r5, r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	ff02ffff 	.word	0xff02ffff
 8002860:	feffffff 	.word	0xfeffffff

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b5b0      	push	{r4, r5, r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e128      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d91e      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b93      	ldr	r3, [pc, #588]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4393      	bics	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	4b90      	ldr	r3, [pc, #576]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002898:	f7fe fd52 	bl	8001340 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a2:	f7fe fd4d 	bl	8001340 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4a8a      	ldr	r2, [pc, #552]	; (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e109      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b87      	ldr	r3, [pc, #540]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1ee      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2202      	movs	r2, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ce:	4b83      	ldr	r3, [pc, #524]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	22f0      	movs	r2, #240	; 0xf0
 80028d4:	4393      	bics	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b7f      	ldr	r3, [pc, #508]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	4013      	ands	r3, r2
 80028ea:	d100      	bne.n	80028ee <HAL_RCC_ClockConfig+0x8a>
 80028ec:	e089      	b.n	8002a02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028f6:	4b79      	ldr	r3, [pc, #484]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	029b      	lsls	r3, r3, #10
 80028fe:	4013      	ands	r3, r2
 8002900:	d120      	bne.n	8002944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0e1      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800290e:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	049b      	lsls	r3, r3, #18
 8002916:	4013      	ands	r3, r2
 8002918:	d114      	bne.n	8002944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0d5      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002926:	4b6d      	ldr	r3, [pc, #436]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2204      	movs	r2, #4
 800292c:	4013      	ands	r3, r2
 800292e:	d109      	bne.n	8002944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0ca      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002934:	4b69      	ldr	r3, [pc, #420]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0c2      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002944:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2203      	movs	r2, #3
 800294a:	4393      	bics	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fe fcf2 	bl	8001340 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d111      	bne.n	800298c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002968:	e009      	b.n	800297e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296a:	f7fe fce9 	bl	8001340 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0a5      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	220c      	movs	r2, #12
 8002984:	4013      	ands	r3, r2
 8002986:	2b08      	cmp	r3, #8
 8002988:	d1ef      	bne.n	800296a <HAL_RCC_ClockConfig+0x106>
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d111      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	e009      	b.n	80029aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002996:	f7fe fcd3 	bl	8001340 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e08f      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029aa:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	220c      	movs	r2, #12
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d1ef      	bne.n	8002996 <HAL_RCC_ClockConfig+0x132>
 80029b6:	e024      	b.n	8002a02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d11b      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe fcbd 	bl	8001340 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	4a42      	ldr	r2, [pc, #264]	; (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e079      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	220c      	movs	r2, #12
 80029dc:	4013      	ands	r3, r2
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d1ef      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x15e>
 80029e2:	e00e      	b.n	8002a02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fcac 	bl	8001340 <HAL_GetTick>
 80029e8:	0002      	movs	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	4a3a      	ldr	r2, [pc, #232]	; (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e068      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	220c      	movs	r2, #12
 80029fe:	4013      	ands	r3, r2
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d21e      	bcs.n	8002a4e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2201      	movs	r2, #1
 8002a16:	4393      	bics	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a22:	f7fe fc8d 	bl	8001340 <HAL_GetTick>
 8002a26:	0003      	movs	r3, r0
 8002a28:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	e009      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe fc88 	bl	8001340 <HAL_GetTick>
 8002a30:	0002      	movs	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e044      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2201      	movs	r2, #1
 8002a46:	4013      	ands	r3, r2
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2204      	movs	r2, #4
 8002a54:	4013      	ands	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x27c>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a76:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_RCC_ClockConfig+0x280>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00da      	lsls	r2, r3, #3
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8c:	f000 f832 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002a90:	0001      	movs	r1, r0
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_ClockConfig+0x278>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	220f      	movs	r2, #15
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x284>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	40da      	lsrs	r2, r3
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_ClockConfig+0x288>)
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_ClockConfig+0x28c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	250b      	movs	r5, #11
 8002aae:	197c      	adds	r4, r7, r5
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fe fbff 	bl	80012b4 <HAL_InitTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002aba:	197b      	adds	r3, r7, r5
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002ac2:	197b      	adds	r3, r7, r5
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	00001388 	.word	0x00001388
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	fffff8ff 	.word	0xfffff8ff
 8002ae4:	ffffc7ff 	.word	0xffffc7ff
 8002ae8:	08005224 	.word	0x08005224
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002afa:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b02:	230c      	movs	r3, #12
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d014      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0a:	d900      	bls.n	8002b0e <HAL_RCC_GetSysClockFreq+0x1a>
 8002b0c:	e07b      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x112>
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x24>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b16:	e076      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b18:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b26:	e07c      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b28:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b2c:	e079      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b2e:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b32:	e076      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	0c9a      	lsrs	r2, r3, #18
 8002b38:	230f      	movs	r3, #15
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x148>)
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	0d9a      	lsrs	r2, r3, #22
 8002b46:	2303      	movs	r3, #3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	025b      	lsls	r3, r3, #9
 8002b56:	4013      	ands	r3, r2
 8002b58:	d01a      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b64:	2300      	movs	r3, #0
 8002b66:	69b8      	ldr	r0, [r7, #24]
 8002b68:	69f9      	ldr	r1, [r7, #28]
 8002b6a:	f7fd fc77 	bl	800045c <__aeabi_lmul>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	000b      	movs	r3, r1
 8002b72:	0010      	movs	r0, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f7fd fc4b 	bl	800041c <__aeabi_uldivmod>
 8002b86:	0002      	movs	r2, r0
 8002b88:	000b      	movs	r3, r1
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8e:	e037      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2210      	movs	r2, #16
 8002b96:	4013      	ands	r3, r2
 8002b98:	d01a      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	f7fd fc57 	bl	800045c <__aeabi_lmul>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	000b      	movs	r3, r1
 8002bb2:	0010      	movs	r0, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f7fd fc2b 	bl	800041c <__aeabi_uldivmod>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	000b      	movs	r3, r1
 8002bca:	0013      	movs	r3, r2
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bce:	e017      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x140>)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f7fd fc3e 	bl	800045c <__aeabi_lmul>
 8002be0:	0002      	movs	r2, r0
 8002be2:	000b      	movs	r3, r1
 8002be4:	0010      	movs	r0, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	001c      	movs	r4, r3
 8002bec:	2300      	movs	r3, #0
 8002bee:	001d      	movs	r5, r3
 8002bf0:	0022      	movs	r2, r4
 8002bf2:	002b      	movs	r3, r5
 8002bf4:	f7fd fc12 	bl	800041c <__aeabi_uldivmod>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	000b      	movs	r3, r1
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c04:	e00d      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0b5b      	lsrs	r3, r3, #13
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	4013      	ands	r3, r2
 8002c10:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	3301      	adds	r3, #1
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	0212      	lsls	r2, r2, #8
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c20:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b00e      	add	sp, #56	; 0x38
 8002c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	003d0900 	.word	0x003d0900
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	0800523c 	.word	0x0800523c

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff2 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c5c:	0001      	movs	r1, r0
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	2207      	movs	r2, #7
 8002c66:	4013      	ands	r3, r2
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	40d9      	lsrs	r1, r3
 8002c6e:	000b      	movs	r3, r1
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08005234 	.word	0x08005234

08002c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c84:	f7ff ffdc 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c88:	0001      	movs	r1, r0
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	0adb      	lsrs	r3, r3, #11
 8002c90:	2207      	movs	r2, #7
 8002c92:	4013      	ands	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	40d9      	lsrs	r1, r3
 8002c9a:	000b      	movs	r3, r1
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08005234 	.word	0x08005234

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002cb4:	2317      	movs	r3, #23
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d100      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002cd2:	e0d9      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd4:	4b9c      	ldr	r3, [pc, #624]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d10a      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b99      	ldr	r3, [pc, #612]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce4:	4b98      	ldr	r3, [pc, #608]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	0549      	lsls	r1, r1, #21
 8002cea:	430a      	orrs	r2, r1
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b95      	ldr	r3, [pc, #596]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b92      	ldr	r3, [pc, #584]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b91      	ldr	r3, [pc, #580]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0049      	lsls	r1, r1, #1
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d10:	f7fe fb16 	bl	8001340 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	e008      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1a:	f7fe fb11 	bl	8001340 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d901      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e108      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	4b87      	ldr	r3, [pc, #540]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	23c0      	movs	r3, #192	; 0xc0
 8002d3e:	039b      	lsls	r3, r3, #14
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	23c0      	movs	r3, #192	; 0xc0
 8002d4a:	039b      	lsls	r3, r3, #14
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d107      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	23c0      	movs	r3, #192	; 0xc0
 8002d5a:	039b      	lsls	r3, r3, #14
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d013      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	23c0      	movs	r3, #192	; 0xc0
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	23c0      	movs	r3, #192	; 0xc0
 8002d70:	029b      	lsls	r3, r3, #10
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d10a      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d76:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	029b      	lsls	r3, r3, #10
 8002d7e:	401a      	ands	r2, r3
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d101      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0d8      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d8c:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d90:	23c0      	movs	r3, #192	; 0xc0
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d049      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	23c0      	movs	r3, #192	; 0xc0
 8002da4:	029b      	lsls	r3, r3, #10
 8002da6:	4013      	ands	r3, r2
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d004      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2220      	movs	r2, #32
 8002db4:	4013      	ands	r3, r2
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	23c0      	movs	r3, #192	; 0xc0
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d034      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d02e      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002dd4:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dde:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	0309      	lsls	r1, r1, #12
 8002de8:	430a      	orrs	r2, r1
 8002dea:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df0:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002df2:	4958      	ldr	r1, [pc, #352]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4013      	ands	r3, r2
 8002e06:	d014      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fa9a 	bl	8001340 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e10:	e009      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe fa95 	bl	8001340 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e08b      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e26:	4b48      	ldr	r3, [pc, #288]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d0ef      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	23c0      	movs	r3, #192	; 0xc0
 8002e38:	029b      	lsls	r3, r3, #10
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	23c0      	movs	r3, #192	; 0xc0
 8002e3e:	029b      	lsls	r3, r3, #10
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	039b      	lsls	r3, r3, #14
 8002e56:	401a      	ands	r2, r3
 8002e58:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	23c0      	movs	r3, #192	; 0xc0
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e82:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	2203      	movs	r2, #3
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002efc:	430a      	orrs	r2, r1
 8002efe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2240      	movs	r2, #64	; 0x40
 8002f06:	4013      	ands	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	4013      	ands	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b006      	add	sp, #24
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	fffcffff 	.word	0xfffcffff
 8002f54:	fff7ffff 	.word	0xfff7ffff
 8002f58:	00001388 	.word	0x00001388
 8002f5c:	ffcfffff 	.word	0xffcfffff
 8002f60:	efffffff 	.word	0xefffffff
 8002f64:	fffff3ff 	.word	0xfffff3ff
 8002f68:	ffffcfff 	.word	0xffffcfff
 8002f6c:	fbffffff 	.word	0xfbffffff
 8002f70:	fff3ffff 	.word	0xfff3ffff

08002f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2239      	movs	r2, #57	; 0x39
 8002f80:	5c9b      	ldrb	r3, [r3, r2]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e036      	b.n	8002ffa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2239      	movs	r2, #57	; 0x39
 8002f90:	2102      	movs	r1, #2
 8002f92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	05db      	lsls	r3, r3, #23
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d009      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x50>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_TIM_Base_Start_IT+0x90>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x50>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <HAL_TIM_Base_Start_IT+0x94>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2207      	movs	r2, #7
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d010      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe6:	e007      	b.n	8002ff8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40010800 	.word	0x40010800
 8003008:	40011400 	.word	0x40011400

0800300c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e032      	b.n	8003084 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2239      	movs	r2, #57	; 0x39
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2238      	movs	r2, #56	; 0x38
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f7fe f809 	bl	800104c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2239      	movs	r2, #57	; 0x39
 800303e:	2102      	movs	r1, #2
 8003040:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	0019      	movs	r1, r3
 800304c:	0010      	movs	r0, r2
 800304e:	f000 f96f 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223e      	movs	r2, #62	; 0x3e
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223a      	movs	r2, #58	; 0x3a
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223b      	movs	r2, #59	; 0x3b
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	223c      	movs	r2, #60	; 0x3c
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	223d      	movs	r2, #61	; 0x3d
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2239      	movs	r2, #57	; 0x39
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d108      	bne.n	80030ae <HAL_TIM_PWM_Start+0x22>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	223a      	movs	r2, #58	; 0x3a
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	4193      	sbcs	r3, r2
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e01f      	b.n	80030ee <HAL_TIM_PWM_Start+0x62>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d108      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x3a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	223b      	movs	r2, #59	; 0x3b
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	4193      	sbcs	r3, r2
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e013      	b.n	80030ee <HAL_TIM_PWM_Start+0x62>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d108      	bne.n	80030de <HAL_TIM_PWM_Start+0x52>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	223c      	movs	r2, #60	; 0x3c
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	4193      	sbcs	r3, r2
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e007      	b.n	80030ee <HAL_TIM_PWM_Start+0x62>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	223d      	movs	r2, #61	; 0x3d
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	4193      	sbcs	r3, r2
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e04d      	b.n	8003192 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start+0x7a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	223a      	movs	r2, #58	; 0x3a
 8003100:	2102      	movs	r1, #2
 8003102:	5499      	strb	r1, [r3, r2]
 8003104:	e013      	b.n	800312e <HAL_TIM_PWM_Start+0xa2>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start+0x8a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	223b      	movs	r2, #59	; 0x3b
 8003110:	2102      	movs	r1, #2
 8003112:	5499      	strb	r1, [r3, r2]
 8003114:	e00b      	b.n	800312e <HAL_TIM_PWM_Start+0xa2>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start+0x9a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	223c      	movs	r2, #60	; 0x3c
 8003120:	2102      	movs	r1, #2
 8003122:	5499      	strb	r1, [r3, r2]
 8003124:	e003      	b.n	800312e <HAL_TIM_PWM_Start+0xa2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	223d      	movs	r2, #61	; 0x3d
 800312a:	2102      	movs	r1, #2
 800312c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	0018      	movs	r0, r3
 8003138:	f000 fa52 	bl	80035e0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	05db      	lsls	r3, r3, #23
 8003144:	429a      	cmp	r2, r3
 8003146:	d009      	beq.n	800315c <HAL_TIM_PWM_Start+0xd0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_TIM_PWM_Start+0x110>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_PWM_Start+0xd0>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <HAL_TIM_PWM_Start+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2207      	movs	r2, #7
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d010      	beq.n	8003190 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317e:	e007      	b.n	8003190 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	40010800 	.word	0x40010800
 80031a0:	40011400 	.word	0x40011400

080031a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2317      	movs	r3, #23
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2238      	movs	r2, #56	; 0x38
 80031bc:	5c9b      	ldrb	r3, [r3, r2]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0ad      	b.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2238      	movs	r2, #56	; 0x38
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d100      	bne.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80031d4:	e076      	b.n	80032c4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d900      	bls.n	80031de <HAL_TIM_PWM_ConfigChannel+0x3a>
 80031dc:	e095      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x166>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d04e      	beq.n	8003282 <HAL_TIM_PWM_ConfigChannel+0xde>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d900      	bls.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80031ea:	e08e      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x166>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x56>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d021      	beq.n	800323c <HAL_TIM_PWM_ConfigChannel+0x98>
 80031f8:	e087      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f8e8 	bl	80033d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2108      	movs	r1, #8
 8003214:	430a      	orrs	r2, r1
 8003216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2104      	movs	r1, #4
 8003224:	438a      	bics	r2, r1
 8003226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	619a      	str	r2, [r3, #24]
      break;
 800323a:	e06b      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f000 f903 	bl	8003450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0109      	lsls	r1, r1, #4
 8003258:	430a      	orrs	r2, r1
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4931      	ldr	r1, [pc, #196]	; (800332c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003268:	400a      	ands	r2, r1
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	619a      	str	r2, [r3, #24]
      break;
 8003280:	e048      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	0011      	movs	r1, r2
 800328a:	0018      	movs	r0, r3
 800328c:	f000 f922 	bl	80034d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2108      	movs	r1, #8
 800329c:	430a      	orrs	r2, r1
 800329e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2104      	movs	r1, #4
 80032ac:	438a      	bics	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69d9      	ldr	r1, [r3, #28]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	61da      	str	r2, [r3, #28]
      break;
 80032c2:	e027      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f941 	bl	8003554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	0109      	lsls	r1, r1, #4
 80032e0:	430a      	orrs	r2, r1
 80032e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	490f      	ldr	r1, [pc, #60]	; (800332c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69d9      	ldr	r1, [r3, #28]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	61da      	str	r2, [r3, #28]
      break;
 8003308:	e004      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800330a:	2317      	movs	r3, #23
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      break;
 8003312:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2238      	movs	r2, #56	; 0x38
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]

  return status;
 800331c:	2317      	movs	r3, #23
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b006      	add	sp, #24
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	fffffbff 	.word	0xfffffbff

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	05db      	lsls	r3, r3, #23
 8003346:	429a      	cmp	r2, r3
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0x2a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <TIM_Base_SetConfig+0x9c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0x2a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <TIM_Base_SetConfig+0xa0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2270      	movs	r2, #112	; 0x70
 800335e:	4393      	bics	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	429a      	cmp	r2, r3
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x56>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <TIM_Base_SetConfig+0x9c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x56>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <TIM_Base_SetConfig+0xa0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <TIM_Base_SetConfig+0xa4>)
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	4393      	bics	r3, r2
 800339e:	001a      	movs	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	615a      	str	r2, [r3, #20]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40010800 	.word	0x40010800
 80033d0:	40011400 	.word	0x40011400
 80033d4:	fffffcff 	.word	0xfffffcff

080033d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4393      	bics	r3, r2
 80033ea:	001a      	movs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2270      	movs	r2, #112	; 0x70
 8003406:	4393      	bics	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2203      	movs	r2, #3
 800340e:	4393      	bics	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2202      	movs	r2, #2
 8003420:	4393      	bics	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b006      	add	sp, #24
 800344e:	bd80      	pop	{r7, pc}

08003450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	2210      	movs	r2, #16
 8003460:	4393      	bics	r3, r2
 8003462:	001a      	movs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <TIM_OC2_SetConfig+0x7c>)
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <TIM_OC2_SetConfig+0x80>)
 8003486:	4013      	ands	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2220      	movs	r2, #32
 800349a:	4393      	bics	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	ffff8fff 	.word	0xffff8fff
 80034d0:	fffffcff 	.word	0xfffffcff

080034d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <TIM_OC3_SetConfig+0x78>)
 80034e4:	401a      	ands	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2270      	movs	r2, #112	; 0x70
 8003500:	4393      	bics	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2203      	movs	r2, #3
 8003508:	4393      	bics	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <TIM_OC3_SetConfig+0x7c>)
 800351a:	4013      	ands	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b006      	add	sp, #24
 800354a:	bd80      	pop	{r7, pc}
 800354c:	fffffeff 	.word	0xfffffeff
 8003550:	fffffdff 	.word	0xfffffdff

08003554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <TIM_OC4_SetConfig+0x7c>)
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <TIM_OC4_SetConfig+0x80>)
 8003580:	4013      	ands	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <TIM_OC4_SetConfig+0x84>)
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <TIM_OC4_SetConfig+0x88>)
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	031b      	lsls	r3, r3, #12
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b006      	add	sp, #24
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	ffffefff 	.word	0xffffefff
 80035d4:	ffff8fff 	.word	0xffff8fff
 80035d8:	fffffcff 	.word	0xfffffcff
 80035dc:	ffffdfff 	.word	0xffffdfff

080035e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	221f      	movs	r2, #31
 80035f0:	4013      	ands	r3, r2
 80035f2:	2201      	movs	r2, #1
 80035f4:	409a      	lsls	r2, r3
 80035f6:	0013      	movs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	43d2      	mvns	r2, r2
 8003602:	401a      	ands	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	211f      	movs	r1, #31
 8003610:	400b      	ands	r3, r1
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4099      	lsls	r1, r3
 8003616:	000b      	movs	r3, r1
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b006      	add	sp, #24
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2238      	movs	r2, #56	; 0x38
 8003636:	5c9b      	ldrb	r3, [r3, r2]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e042      	b.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2238      	movs	r2, #56	; 0x38
 8003644:	2101      	movs	r1, #1
 8003646:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2239      	movs	r2, #57	; 0x39
 800364c:	2102      	movs	r1, #2
 800364e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2270      	movs	r2, #112	; 0x70
 8003664:	4393      	bics	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	05db      	lsls	r3, r3, #23
 8003682:	429a      	cmp	r2, r3
 8003684:	d009      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10c      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	4393      	bics	r3, r2
 80036a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2239      	movs	r2, #57	; 0x39
 80036b8:	2101      	movs	r1, #1
 80036ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2238      	movs	r2, #56	; 0x38
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	40010800 	.word	0x40010800
 80036d4:	40011400 	.word	0x40011400

080036d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e044      	b.n	8003774 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2274      	movs	r2, #116	; 0x74
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd fd4b 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2224      	movs	r2, #36	; 0x24
 8003706:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2101      	movs	r1, #1
 8003714:	438a      	bics	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f000 f8d8 	bl	80038d0 <UART_SetConfig>
 8003720:	0003      	movs	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e024      	b.n	8003774 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 fb4f 	bl	8003dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	490d      	ldr	r1, [pc, #52]	; (800377c <HAL_UART_Init+0xa4>)
 8003746:	400a      	ands	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	212a      	movs	r1, #42	; 0x2a
 8003756:	438a      	bics	r2, r1
 8003758:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 fbe7 	bl	8003f40 <UART_CheckIdleState>
 8003772:	0003      	movs	r3, r0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}
 800377c:	ffffb7ff 	.word	0xffffb7ff

08003780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	1dbb      	adds	r3, r7, #6
 800378e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003794:	2b20      	cmp	r3, #32
 8003796:	d000      	beq.n	800379a <HAL_UART_Transmit+0x1a>
 8003798:	e095      	b.n	80038c6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_UART_Transmit+0x28>
 80037a0:	1dbb      	adds	r3, r7, #6
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e08d      	b.n	80038c8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	015b      	lsls	r3, r3, #5
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d109      	bne.n	80037cc <HAL_UART_Transmit+0x4c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	d001      	beq.n	80037cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e07d      	b.n	80038c8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2274      	movs	r2, #116	; 0x74
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Transmit+0x5a>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e076      	b.n	80038c8 <HAL_UART_Transmit+0x148>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2274      	movs	r2, #116	; 0x74
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	2100      	movs	r1, #0
 80037e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2221      	movs	r2, #33	; 0x21
 80037ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f0:	f7fd fda6 	bl	8001340 <HAL_GetTick>
 80037f4:	0003      	movs	r3, r0
 80037f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1dba      	adds	r2, r7, #6
 80037fc:	2150      	movs	r1, #80	; 0x50
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1dba      	adds	r2, r7, #6
 8003806:	2152      	movs	r1, #82	; 0x52
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	429a      	cmp	r2, r3
 8003816:	d108      	bne.n	800382a <HAL_UART_Transmit+0xaa>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e003      	b.n	8003832 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2274      	movs	r2, #116	; 0x74
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800383a:	e02c      	b.n	8003896 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	0013      	movs	r3, r2
 8003846:	2200      	movs	r2, #0
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	f000 fbc1 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 800384e:	1e03      	subs	r3, r0, #0
 8003850:	d001      	beq.n	8003856 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e038      	b.n	80038c8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	001a      	movs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	05d2      	lsls	r2, r2, #23
 8003868:	0dd2      	lsrs	r2, r2, #23
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3302      	adds	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e007      	b.n	8003884 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2252      	movs	r2, #82	; 0x52
 8003888:	5a9b      	ldrh	r3, [r3, r2]
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b299      	uxth	r1, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2252      	movs	r2, #82	; 0x52
 8003894:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2252      	movs	r2, #82	; 0x52
 800389a:	5a9b      	ldrh	r3, [r3, r2]
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1cc      	bne.n	800383c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	0013      	movs	r3, r2
 80038ac:	2200      	movs	r2, #0
 80038ae:	2140      	movs	r1, #64	; 0x40
 80038b0:	f000 fb8e 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 80038b4:	1e03      	subs	r3, r0, #0
 80038b6:	d001      	beq.n	80038bc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e005      	b.n	80038c8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b008      	add	sp, #32
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d8:	231a      	movs	r3, #26
 80038da:	2218      	movs	r2, #24
 80038dc:	189b      	adds	r3, r3, r2
 80038de:	19db      	adds	r3, r3, r7
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4ac6      	ldr	r2, [pc, #792]	; (8003c1c <UART_SetConfig+0x34c>)
 8003904:	4013      	ands	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4ac1      	ldr	r2, [pc, #772]	; (8003c20 <UART_SetConfig+0x350>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4abb      	ldr	r2, [pc, #748]	; (8003c24 <UART_SetConfig+0x354>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003940:	4313      	orrs	r3, r2
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4ab7      	ldr	r2, [pc, #732]	; (8003c28 <UART_SetConfig+0x358>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4ab3      	ldr	r2, [pc, #716]	; (8003c2c <UART_SetConfig+0x35c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d131      	bne.n	80039c8 <UART_SetConfig+0xf8>
 8003964:	4bb2      	ldr	r3, [pc, #712]	; (8003c30 <UART_SetConfig+0x360>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	2203      	movs	r2, #3
 800396a:	4013      	ands	r3, r2
 800396c:	2b03      	cmp	r3, #3
 800396e:	d01d      	beq.n	80039ac <UART_SetConfig+0xdc>
 8003970:	d823      	bhi.n	80039ba <UART_SetConfig+0xea>
 8003972:	2b02      	cmp	r3, #2
 8003974:	d00c      	beq.n	8003990 <UART_SetConfig+0xc0>
 8003976:	d820      	bhi.n	80039ba <UART_SetConfig+0xea>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <UART_SetConfig+0xb2>
 800397c:	2b01      	cmp	r3, #1
 800397e:	d00e      	beq.n	800399e <UART_SetConfig+0xce>
 8003980:	e01b      	b.n	80039ba <UART_SetConfig+0xea>
 8003982:	231b      	movs	r3, #27
 8003984:	2218      	movs	r2, #24
 8003986:	189b      	adds	r3, r3, r2
 8003988:	19db      	adds	r3, r3, r7
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e09c      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003990:	231b      	movs	r3, #27
 8003992:	2218      	movs	r2, #24
 8003994:	189b      	adds	r3, r3, r2
 8003996:	19db      	adds	r3, r3, r7
 8003998:	2202      	movs	r2, #2
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e095      	b.n	8003aca <UART_SetConfig+0x1fa>
 800399e:	231b      	movs	r3, #27
 80039a0:	2218      	movs	r2, #24
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	19db      	adds	r3, r3, r7
 80039a6:	2204      	movs	r2, #4
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e08e      	b.n	8003aca <UART_SetConfig+0x1fa>
 80039ac:	231b      	movs	r3, #27
 80039ae:	2218      	movs	r2, #24
 80039b0:	189b      	adds	r3, r3, r2
 80039b2:	19db      	adds	r3, r3, r7
 80039b4:	2208      	movs	r2, #8
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e087      	b.n	8003aca <UART_SetConfig+0x1fa>
 80039ba:	231b      	movs	r3, #27
 80039bc:	2218      	movs	r2, #24
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	19db      	adds	r3, r3, r7
 80039c2:	2210      	movs	r2, #16
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e080      	b.n	8003aca <UART_SetConfig+0x1fa>
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a99      	ldr	r2, [pc, #612]	; (8003c34 <UART_SetConfig+0x364>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d131      	bne.n	8003a36 <UART_SetConfig+0x166>
 80039d2:	4b97      	ldr	r3, [pc, #604]	; (8003c30 <UART_SetConfig+0x360>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	220c      	movs	r2, #12
 80039d8:	4013      	ands	r3, r2
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d01d      	beq.n	8003a1a <UART_SetConfig+0x14a>
 80039de:	d823      	bhi.n	8003a28 <UART_SetConfig+0x158>
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d00c      	beq.n	80039fe <UART_SetConfig+0x12e>
 80039e4:	d820      	bhi.n	8003a28 <UART_SetConfig+0x158>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <UART_SetConfig+0x120>
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d00e      	beq.n	8003a0c <UART_SetConfig+0x13c>
 80039ee:	e01b      	b.n	8003a28 <UART_SetConfig+0x158>
 80039f0:	231b      	movs	r3, #27
 80039f2:	2218      	movs	r2, #24
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	19db      	adds	r3, r3, r7
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	e065      	b.n	8003aca <UART_SetConfig+0x1fa>
 80039fe:	231b      	movs	r3, #27
 8003a00:	2218      	movs	r2, #24
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	19db      	adds	r3, r3, r7
 8003a06:	2202      	movs	r2, #2
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e05e      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003a0c:	231b      	movs	r3, #27
 8003a0e:	2218      	movs	r2, #24
 8003a10:	189b      	adds	r3, r3, r2
 8003a12:	19db      	adds	r3, r3, r7
 8003a14:	2204      	movs	r2, #4
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	e057      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003a1a:	231b      	movs	r3, #27
 8003a1c:	2218      	movs	r2, #24
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	19db      	adds	r3, r3, r7
 8003a22:	2208      	movs	r2, #8
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e050      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003a28:	231b      	movs	r3, #27
 8003a2a:	2218      	movs	r2, #24
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	19db      	adds	r3, r3, r7
 8003a30:	2210      	movs	r2, #16
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e049      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7a      	ldr	r2, [pc, #488]	; (8003c24 <UART_SetConfig+0x354>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d13e      	bne.n	8003abe <UART_SetConfig+0x1ee>
 8003a40:	4b7b      	ldr	r3, [pc, #492]	; (8003c30 <UART_SetConfig+0x360>)
 8003a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a44:	23c0      	movs	r3, #192	; 0xc0
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	22c0      	movs	r2, #192	; 0xc0
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d027      	beq.n	8003aa2 <UART_SetConfig+0x1d2>
 8003a52:	22c0      	movs	r2, #192	; 0xc0
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d82a      	bhi.n	8003ab0 <UART_SetConfig+0x1e0>
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d011      	beq.n	8003a86 <UART_SetConfig+0x1b6>
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d822      	bhi.n	8003ab0 <UART_SetConfig+0x1e0>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <UART_SetConfig+0x1a8>
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	00d2      	lsls	r2, r2, #3
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <UART_SetConfig+0x1c4>
 8003a76:	e01b      	b.n	8003ab0 <UART_SetConfig+0x1e0>
 8003a78:	231b      	movs	r3, #27
 8003a7a:	2218      	movs	r2, #24
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	19db      	adds	r3, r3, r7
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e021      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003a86:	231b      	movs	r3, #27
 8003a88:	2218      	movs	r2, #24
 8003a8a:	189b      	adds	r3, r3, r2
 8003a8c:	19db      	adds	r3, r3, r7
 8003a8e:	2202      	movs	r2, #2
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e01a      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003a94:	231b      	movs	r3, #27
 8003a96:	2218      	movs	r2, #24
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	19db      	adds	r3, r3, r7
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e013      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003aa2:	231b      	movs	r3, #27
 8003aa4:	2218      	movs	r2, #24
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	2208      	movs	r2, #8
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e00c      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003ab0:	231b      	movs	r3, #27
 8003ab2:	2218      	movs	r2, #24
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	2210      	movs	r2, #16
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x1fa>
 8003abe:	231b      	movs	r3, #27
 8003ac0:	2218      	movs	r2, #24
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	19db      	adds	r3, r3, r7
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a55      	ldr	r2, [pc, #340]	; (8003c24 <UART_SetConfig+0x354>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d000      	beq.n	8003ad6 <UART_SetConfig+0x206>
 8003ad4:	e084      	b.n	8003be0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ad6:	231b      	movs	r3, #27
 8003ad8:	2218      	movs	r2, #24
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	19db      	adds	r3, r3, r7
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d01d      	beq.n	8003b20 <UART_SetConfig+0x250>
 8003ae4:	dc20      	bgt.n	8003b28 <UART_SetConfig+0x258>
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d015      	beq.n	8003b16 <UART_SetConfig+0x246>
 8003aea:	dc1d      	bgt.n	8003b28 <UART_SetConfig+0x258>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <UART_SetConfig+0x226>
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d005      	beq.n	8003b00 <UART_SetConfig+0x230>
 8003af4:	e018      	b.n	8003b28 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af6:	f7ff f8ad 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003afa:	0003      	movs	r3, r0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003afe:	e01c      	b.n	8003b3a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b00:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <UART_SetConfig+0x360>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2210      	movs	r2, #16
 8003b06:	4013      	ands	r3, r2
 8003b08:	d002      	beq.n	8003b10 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b0a:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <UART_SetConfig+0x368>)
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b0e:	e014      	b.n	8003b3a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <UART_SetConfig+0x36c>)
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b14:	e011      	b.n	8003b3a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe ffed 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b1e:	e00c      	b.n	8003b3a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b26:	e008      	b.n	8003b3a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b2c:	231a      	movs	r3, #26
 8003b2e:	2218      	movs	r2, #24
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
        break;
 8003b38:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d100      	bne.n	8003b42 <UART_SetConfig+0x272>
 8003b40:	e133      	b.n	8003daa <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	0013      	movs	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d305      	bcc.n	8003b5e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d906      	bls.n	8003b6c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003b5e:	231a      	movs	r3, #26
 8003b60:	2218      	movs	r2, #24
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	19db      	adds	r3, r3, r7
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e11e      	b.n	8003daa <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	000b      	movs	r3, r1
 8003b7a:	0e1b      	lsrs	r3, r3, #24
 8003b7c:	0010      	movs	r0, r2
 8003b7e:	0205      	lsls	r5, r0, #8
 8003b80:	431d      	orrs	r5, r3
 8003b82:	000b      	movs	r3, r1
 8003b84:	021c      	lsls	r4, r3, #8
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68b8      	ldr	r0, [r7, #8]
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	1900      	adds	r0, r0, r4
 8003b98:	4169      	adcs	r1, r5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f7fc fc38 	bl	800041c <__aeabi_uldivmod>
 8003bac:	0002      	movs	r2, r0
 8003bae:	000b      	movs	r3, r1
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb6:	23c0      	movs	r3, #192	; 0xc0
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d309      	bcc.n	8003bd2 <UART_SetConfig+0x302>
 8003bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	035b      	lsls	r3, r3, #13
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d204      	bcs.n	8003bd2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	e0eb      	b.n	8003daa <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8003bd2:	231a      	movs	r3, #26
 8003bd4:	2218      	movs	r2, #24
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e0e4      	b.n	8003daa <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d000      	beq.n	8003bee <UART_SetConfig+0x31e>
 8003bec:	e086      	b.n	8003cfc <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8003bee:	231b      	movs	r3, #27
 8003bf0:	2218      	movs	r2, #24
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	19db      	adds	r3, r3, r7
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d837      	bhi.n	8003c6c <UART_SetConfig+0x39c>
 8003bfc:	009a      	lsls	r2, r3, #2
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <UART_SetConfig+0x370>)
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c06:	f7ff f825 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c0e:	e036      	b.n	8003c7e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7ff f836 	bl	8002c80 <HAL_RCC_GetPCLK2Freq>
 8003c14:	0003      	movs	r3, r0
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c18:	e031      	b.n	8003c7e <UART_SetConfig+0x3ae>
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	efff69f3 	.word	0xefff69f3
 8003c20:	ffffcfff 	.word	0xffffcfff
 8003c24:	40004800 	.word	0x40004800
 8003c28:	fffff4ff 	.word	0xfffff4ff
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	003d0900 	.word	0x003d0900
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	08005248 	.word	0x08005248
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c44:	4b60      	ldr	r3, [pc, #384]	; (8003dc8 <UART_SetConfig+0x4f8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d002      	beq.n	8003c54 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <UART_SetConfig+0x4fc>)
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c52:	e014      	b.n	8003c7e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <UART_SetConfig+0x500>)
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c58:	e011      	b.n	8003c7e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe ff4b 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c62:	e00c      	b.n	8003c7e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c6a:	e008      	b.n	8003c7e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c70:	231a      	movs	r3, #26
 8003c72:	2218      	movs	r2, #24
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
        break;
 8003c7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d100      	bne.n	8003c86 <UART_SetConfig+0x3b6>
 8003c84:	e091      	b.n	8003daa <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	005a      	lsls	r2, r3, #1
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	18d2      	adds	r2, r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0019      	movs	r1, r3
 8003c98:	0010      	movs	r0, r2
 8003c9a:	f7fc fa49 	bl	8000130 <__udivsi3>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d921      	bls.n	8003cee <UART_SetConfig+0x41e>
 8003caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d21c      	bcs.n	8003cee <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	200e      	movs	r0, #14
 8003cba:	2418      	movs	r4, #24
 8003cbc:	1903      	adds	r3, r0, r4
 8003cbe:	19db      	adds	r3, r3, r7
 8003cc0:	210f      	movs	r1, #15
 8003cc2:	438a      	bics	r2, r1
 8003cc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2207      	movs	r2, #7
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b299      	uxth	r1, r3
 8003cd2:	1903      	adds	r3, r0, r4
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	1902      	adds	r2, r0, r4
 8003cd8:	19d2      	adds	r2, r2, r7
 8003cda:	8812      	ldrh	r2, [r2, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1902      	adds	r2, r0, r4
 8003ce6:	19d2      	adds	r2, r2, r7
 8003ce8:	8812      	ldrh	r2, [r2, #0]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e05d      	b.n	8003daa <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003cee:	231a      	movs	r3, #26
 8003cf0:	2218      	movs	r2, #24
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	19db      	adds	r3, r3, r7
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e056      	b.n	8003daa <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cfc:	231b      	movs	r3, #27
 8003cfe:	2218      	movs	r2, #24
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	19db      	adds	r3, r3, r7
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d822      	bhi.n	8003d50 <UART_SetConfig+0x480>
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <UART_SetConfig+0x504>)
 8003d0e:	18d3      	adds	r3, r2, r3
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe ff9e 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d1c:	e021      	b.n	8003d62 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1e:	f7fe ffaf 	bl	8002c80 <HAL_RCC_GetPCLK2Freq>
 8003d22:	0003      	movs	r3, r0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d26:	e01c      	b.n	8003d62 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d28:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <UART_SetConfig+0x4f8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d002      	beq.n	8003d38 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <UART_SetConfig+0x4fc>)
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d36:	e014      	b.n	8003d62 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <UART_SetConfig+0x500>)
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d3c:	e011      	b.n	8003d62 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe fed9 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003d42:	0003      	movs	r3, r0
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d46:	e00c      	b.n	8003d62 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d4e:	e008      	b.n	8003d62 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d54:	231a      	movs	r3, #26
 8003d56:	2218      	movs	r2, #24
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
        break;
 8003d60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	085a      	lsrs	r2, r3, #1
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	18d2      	adds	r2, r2, r3
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	0019      	movs	r1, r3
 8003d78:	0010      	movs	r0, r2
 8003d7a:	f7fc f9d9 	bl	8000130 <__udivsi3>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	d909      	bls.n	8003d9e <UART_SetConfig+0x4ce>
 8003d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	025b      	lsls	r3, r3, #9
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d204      	bcs.n	8003d9e <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9e:	231a      	movs	r3, #26
 8003da0:	2218      	movs	r2, #24
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	19db      	adds	r3, r3, r7
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2200      	movs	r2, #0
 8003dae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2200      	movs	r2, #0
 8003db4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003db6:	231a      	movs	r3, #26
 8003db8:	2218      	movs	r2, #24
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	19db      	adds	r3, r3, r7
 8003dbe:	781b      	ldrb	r3, [r3, #0]
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b00e      	add	sp, #56	; 0x38
 8003dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	003d0900 	.word	0x003d0900
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	0800526c 	.word	0x0800526c

08003dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <UART_AdvFeatureConfig+0x144>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2202      	movs	r2, #2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a43      	ldr	r2, [pc, #268]	; (8003f20 <UART_AdvFeatureConfig+0x148>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2204      	movs	r2, #4
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a3b      	ldr	r2, [pc, #236]	; (8003f24 <UART_AdvFeatureConfig+0x14c>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a34      	ldr	r2, [pc, #208]	; (8003f28 <UART_AdvFeatureConfig+0x150>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <UART_AdvFeatureConfig+0x154>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2220      	movs	r2, #32
 8003e90:	4013      	ands	r3, r2
 8003e92:	d00b      	beq.n	8003eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <UART_AdvFeatureConfig+0x158>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2240      	movs	r2, #64	; 0x40
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d01d      	beq.n	8003ef2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <UART_AdvFeatureConfig+0x15c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	035b      	lsls	r3, r3, #13
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d10b      	bne.n	8003ef2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <UART_AdvFeatureConfig+0x160>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	2280      	movs	r2, #128	; 0x80
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <UART_AdvFeatureConfig+0x164>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
  }
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	fffdffff 	.word	0xfffdffff
 8003f20:	fffeffff 	.word	0xfffeffff
 8003f24:	fffbffff 	.word	0xfffbffff
 8003f28:	ffff7fff 	.word	0xffff7fff
 8003f2c:	ffffefff 	.word	0xffffefff
 8003f30:	ffffdfff 	.word	0xffffdfff
 8003f34:	ffefffff 	.word	0xffefffff
 8003f38:	ff9fffff 	.word	0xff9fffff
 8003f3c:	fff7ffff 	.word	0xfff7ffff

08003f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2280      	movs	r2, #128	; 0x80
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f50:	f7fd f9f6 	bl	8001340 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d10c      	bne.n	8003f80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	0391      	lsls	r1, r2, #14
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <UART_CheckIdleState+0x8c>)
 8003f70:	9200      	str	r2, [sp, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f000 f82c 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e021      	b.n	8003fc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2204      	movs	r2, #4
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d10c      	bne.n	8003fa8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	03d1      	lsls	r1, r2, #15
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <UART_CheckIdleState+0x8c>)
 8003f98:	9200      	str	r2, [sp, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f000 f818 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d001      	beq.n	8003fa8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00d      	b.n	8003fc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2274      	movs	r2, #116	; 0x74
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	01ffffff 	.word	0x01ffffff

08003fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b094      	sub	sp, #80	; 0x50
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	1dfb      	adds	r3, r7, #7
 8003fde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	e0a3      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	d100      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0x1a>
 8003fe8:	e09f      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fd f9a9 	bl	8001340 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d13d      	bne.n	800407c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004000:	f3ef 8310 	mrs	r3, PRIMASK
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
 800400a:	2301      	movs	r3, #1
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	494c      	ldr	r1, [pc, #304]	; (8004154 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004022:	400a      	ands	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	f383 8810 	msr	PRIMASK, r3
}
 8004030:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
 800403c:	2301      	movs	r3, #1
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2274      	movs	r2, #116	; 0x74
 8004074:	2100      	movs	r1, #0
 8004076:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e067      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2204      	movs	r2, #4
 8004084:	4013      	ands	r3, r2
 8004086:	d050      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	401a      	ands	r2, r3
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	429a      	cmp	r2, r3
 800409a:	d146      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a6:	f3ef 8310 	mrs	r3, PRIMASK
 80040aa:	613b      	str	r3, [r7, #16]
  return(result);
 80040ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b0:	2301      	movs	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f383 8810 	msr	PRIMASK, r3
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4923      	ldr	r1, [pc, #140]	; (8004154 <UART_WaitOnFlagUntilTimeout+0x184>)
 80040c8:	400a      	ands	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d8:	f3ef 8310 	mrs	r3, PRIMASK
 80040dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80040de:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e2:	2301      	movs	r3, #1
 80040e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f383 8810 	msr	PRIMASK, r3
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	438a      	bics	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
 80040fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	2120      	movs	r1, #32
 800411c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2274      	movs	r2, #116	; 0x74
 8004122:	2100      	movs	r1, #0
 8004124:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e010      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	425a      	negs	r2, r3
 800413a:	4153      	adcs	r3, r2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	001a      	movs	r2, r3
 8004140:	1dfb      	adds	r3, r7, #7
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d100      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004148:	e74b      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b014      	add	sp, #80	; 0x50
 8004152:	bd80      	pop	{r7, pc}
 8004154:	fffffe5f 	.word	0xfffffe5f

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	2000000c 	.word	0x2000000c

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	2600      	movs	r6, #0
 8004168:	4d0c      	ldr	r5, [pc, #48]	; (800419c <__libc_init_array+0x38>)
 800416a:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	42a6      	cmp	r6, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	2600      	movs	r6, #0
 8004176:	f000 fff9 	bl	800516c <_init>
 800417a:	4d0a      	ldr	r5, [pc, #40]	; (80041a4 <__libc_init_array+0x40>)
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <__libc_init_array+0x44>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	42a6      	cmp	r6, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	00b3      	lsls	r3, r6, #2
 800418a:	58eb      	ldr	r3, [r5, r3]
 800418c:	4798      	blx	r3
 800418e:	3601      	adds	r6, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	00b3      	lsls	r3, r6, #2
 8004194:	58eb      	ldr	r3, [r5, r3]
 8004196:	4798      	blx	r3
 8004198:	3601      	adds	r6, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	08005330 	.word	0x08005330
 80041a0:	08005330 	.word	0x08005330
 80041a4:	08005330 	.word	0x08005330
 80041a8:	08005334 	.word	0x08005334

080041ac <memset>:
 80041ac:	0003      	movs	r3, r0
 80041ae:	1882      	adds	r2, r0, r2
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	7019      	strb	r1, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <iprintf>:
 80041bc:	b40f      	push	{r0, r1, r2, r3}
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <iprintf+0x30>)
 80041c0:	b513      	push	{r0, r1, r4, lr}
 80041c2:	681c      	ldr	r4, [r3, #0]
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	d005      	beq.n	80041d4 <iprintf+0x18>
 80041c8:	69a3      	ldr	r3, [r4, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <iprintf+0x18>
 80041ce:	0020      	movs	r0, r4
 80041d0:	f000 f870 	bl	80042b4 <__sinit>
 80041d4:	ab05      	add	r3, sp, #20
 80041d6:	0020      	movs	r0, r4
 80041d8:	9a04      	ldr	r2, [sp, #16]
 80041da:	68a1      	ldr	r1, [r4, #8]
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	f000 f9cd 	bl	800457c <_vfiprintf_r>
 80041e2:	bc16      	pop	{r1, r2, r4}
 80041e4:	bc08      	pop	{r3}
 80041e6:	b004      	add	sp, #16
 80041e8:	4718      	bx	r3
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	2000000c 	.word	0x2000000c

080041f0 <std>:
 80041f0:	2300      	movs	r3, #0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	0004      	movs	r4, r0
 80041f6:	6003      	str	r3, [r0, #0]
 80041f8:	6043      	str	r3, [r0, #4]
 80041fa:	6083      	str	r3, [r0, #8]
 80041fc:	8181      	strh	r1, [r0, #12]
 80041fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004200:	0019      	movs	r1, r3
 8004202:	81c2      	strh	r2, [r0, #14]
 8004204:	6103      	str	r3, [r0, #16]
 8004206:	6143      	str	r3, [r0, #20]
 8004208:	6183      	str	r3, [r0, #24]
 800420a:	2208      	movs	r2, #8
 800420c:	305c      	adds	r0, #92	; 0x5c
 800420e:	f7ff ffcd 	bl	80041ac <memset>
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <std+0x38>)
 8004214:	6224      	str	r4, [r4, #32]
 8004216:	6263      	str	r3, [r4, #36]	; 0x24
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <std+0x3c>)
 800421a:	62a3      	str	r3, [r4, #40]	; 0x28
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <std+0x40>)
 800421e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <std+0x44>)
 8004222:	6323      	str	r3, [r4, #48]	; 0x30
 8004224:	bd10      	pop	{r4, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	08004b19 	.word	0x08004b19
 800422c:	08004b41 	.word	0x08004b41
 8004230:	08004b79 	.word	0x08004b79
 8004234:	08004ba5 	.word	0x08004ba5

08004238 <_cleanup_r>:
 8004238:	b510      	push	{r4, lr}
 800423a:	4902      	ldr	r1, [pc, #8]	; (8004244 <_cleanup_r+0xc>)
 800423c:	f000 f8ba 	bl	80043b4 <_fwalk_reent>
 8004240:	bd10      	pop	{r4, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	08004eb1 	.word	0x08004eb1

08004248 <__sfmoreglue>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	2568      	movs	r5, #104	; 0x68
 800424c:	1e4a      	subs	r2, r1, #1
 800424e:	4355      	muls	r5, r2
 8004250:	000e      	movs	r6, r1
 8004252:	0029      	movs	r1, r5
 8004254:	3174      	adds	r1, #116	; 0x74
 8004256:	f000 f8f3 	bl	8004440 <_malloc_r>
 800425a:	1e04      	subs	r4, r0, #0
 800425c:	d008      	beq.n	8004270 <__sfmoreglue+0x28>
 800425e:	2100      	movs	r1, #0
 8004260:	002a      	movs	r2, r5
 8004262:	6001      	str	r1, [r0, #0]
 8004264:	6046      	str	r6, [r0, #4]
 8004266:	300c      	adds	r0, #12
 8004268:	60a0      	str	r0, [r4, #8]
 800426a:	3268      	adds	r2, #104	; 0x68
 800426c:	f7ff ff9e 	bl	80041ac <memset>
 8004270:	0020      	movs	r0, r4
 8004272:	bd70      	pop	{r4, r5, r6, pc}

08004274 <__sfp_lock_acquire>:
 8004274:	b510      	push	{r4, lr}
 8004276:	4802      	ldr	r0, [pc, #8]	; (8004280 <__sfp_lock_acquire+0xc>)
 8004278:	f000 f8bd 	bl	80043f6 <__retarget_lock_acquire_recursive>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	200001b9 	.word	0x200001b9

08004284 <__sfp_lock_release>:
 8004284:	b510      	push	{r4, lr}
 8004286:	4802      	ldr	r0, [pc, #8]	; (8004290 <__sfp_lock_release+0xc>)
 8004288:	f000 f8b6 	bl	80043f8 <__retarget_lock_release_recursive>
 800428c:	bd10      	pop	{r4, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	200001b9 	.word	0x200001b9

08004294 <__sinit_lock_acquire>:
 8004294:	b510      	push	{r4, lr}
 8004296:	4802      	ldr	r0, [pc, #8]	; (80042a0 <__sinit_lock_acquire+0xc>)
 8004298:	f000 f8ad 	bl	80043f6 <__retarget_lock_acquire_recursive>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	200001ba 	.word	0x200001ba

080042a4 <__sinit_lock_release>:
 80042a4:	b510      	push	{r4, lr}
 80042a6:	4802      	ldr	r0, [pc, #8]	; (80042b0 <__sinit_lock_release+0xc>)
 80042a8:	f000 f8a6 	bl	80043f8 <__retarget_lock_release_recursive>
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	200001ba 	.word	0x200001ba

080042b4 <__sinit>:
 80042b4:	b513      	push	{r0, r1, r4, lr}
 80042b6:	0004      	movs	r4, r0
 80042b8:	f7ff ffec 	bl	8004294 <__sinit_lock_acquire>
 80042bc:	69a3      	ldr	r3, [r4, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <__sinit+0x14>
 80042c2:	f7ff ffef 	bl	80042a4 <__sinit_lock_release>
 80042c6:	bd13      	pop	{r0, r1, r4, pc}
 80042c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80042ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 80042cc:	6523      	str	r3, [r4, #80]	; 0x50
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <__sinit+0x68>)
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <__sinit+0x6c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d101      	bne.n	80042e0 <__sinit+0x2c>
 80042dc:	2301      	movs	r3, #1
 80042de:	61a3      	str	r3, [r4, #24]
 80042e0:	0020      	movs	r0, r4
 80042e2:	f000 f81f 	bl	8004324 <__sfp>
 80042e6:	6060      	str	r0, [r4, #4]
 80042e8:	0020      	movs	r0, r4
 80042ea:	f000 f81b 	bl	8004324 <__sfp>
 80042ee:	60a0      	str	r0, [r4, #8]
 80042f0:	0020      	movs	r0, r4
 80042f2:	f000 f817 	bl	8004324 <__sfp>
 80042f6:	2200      	movs	r2, #0
 80042f8:	2104      	movs	r1, #4
 80042fa:	60e0      	str	r0, [r4, #12]
 80042fc:	6860      	ldr	r0, [r4, #4]
 80042fe:	f7ff ff77 	bl	80041f0 <std>
 8004302:	2201      	movs	r2, #1
 8004304:	2109      	movs	r1, #9
 8004306:	68a0      	ldr	r0, [r4, #8]
 8004308:	f7ff ff72 	bl	80041f0 <std>
 800430c:	2202      	movs	r2, #2
 800430e:	2112      	movs	r1, #18
 8004310:	68e0      	ldr	r0, [r4, #12]
 8004312:	f7ff ff6d 	bl	80041f0 <std>
 8004316:	2301      	movs	r3, #1
 8004318:	61a3      	str	r3, [r4, #24]
 800431a:	e7d2      	b.n	80042c2 <__sinit+0xe>
 800431c:	08005290 	.word	0x08005290
 8004320:	08004239 	.word	0x08004239

08004324 <__sfp>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	0007      	movs	r7, r0
 8004328:	f7ff ffa4 	bl	8004274 <__sfp_lock_acquire>
 800432c:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <__sfp+0x88>)
 800432e:	681e      	ldr	r6, [r3, #0]
 8004330:	69b3      	ldr	r3, [r6, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <__sfp+0x18>
 8004336:	0030      	movs	r0, r6
 8004338:	f7ff ffbc 	bl	80042b4 <__sinit>
 800433c:	3648      	adds	r6, #72	; 0x48
 800433e:	68b4      	ldr	r4, [r6, #8]
 8004340:	6873      	ldr	r3, [r6, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	d504      	bpl.n	8004350 <__sfp+0x2c>
 8004346:	6833      	ldr	r3, [r6, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d022      	beq.n	8004392 <__sfp+0x6e>
 800434c:	6836      	ldr	r6, [r6, #0]
 800434e:	e7f6      	b.n	800433e <__sfp+0x1a>
 8004350:	220c      	movs	r2, #12
 8004352:	5ea5      	ldrsh	r5, [r4, r2]
 8004354:	2d00      	cmp	r5, #0
 8004356:	d11a      	bne.n	800438e <__sfp+0x6a>
 8004358:	0020      	movs	r0, r4
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <__sfp+0x8c>)
 800435c:	3058      	adds	r0, #88	; 0x58
 800435e:	60e3      	str	r3, [r4, #12]
 8004360:	6665      	str	r5, [r4, #100]	; 0x64
 8004362:	f000 f847 	bl	80043f4 <__retarget_lock_init_recursive>
 8004366:	f7ff ff8d 	bl	8004284 <__sfp_lock_release>
 800436a:	0020      	movs	r0, r4
 800436c:	2208      	movs	r2, #8
 800436e:	0029      	movs	r1, r5
 8004370:	6025      	str	r5, [r4, #0]
 8004372:	60a5      	str	r5, [r4, #8]
 8004374:	6065      	str	r5, [r4, #4]
 8004376:	6125      	str	r5, [r4, #16]
 8004378:	6165      	str	r5, [r4, #20]
 800437a:	61a5      	str	r5, [r4, #24]
 800437c:	305c      	adds	r0, #92	; 0x5c
 800437e:	f7ff ff15 	bl	80041ac <memset>
 8004382:	6365      	str	r5, [r4, #52]	; 0x34
 8004384:	63a5      	str	r5, [r4, #56]	; 0x38
 8004386:	64a5      	str	r5, [r4, #72]	; 0x48
 8004388:	64e5      	str	r5, [r4, #76]	; 0x4c
 800438a:	0020      	movs	r0, r4
 800438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438e:	3468      	adds	r4, #104	; 0x68
 8004390:	e7d7      	b.n	8004342 <__sfp+0x1e>
 8004392:	2104      	movs	r1, #4
 8004394:	0038      	movs	r0, r7
 8004396:	f7ff ff57 	bl	8004248 <__sfmoreglue>
 800439a:	1e04      	subs	r4, r0, #0
 800439c:	6030      	str	r0, [r6, #0]
 800439e:	d1d5      	bne.n	800434c <__sfp+0x28>
 80043a0:	f7ff ff70 	bl	8004284 <__sfp_lock_release>
 80043a4:	230c      	movs	r3, #12
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	e7ef      	b.n	800438a <__sfp+0x66>
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	08005290 	.word	0x08005290
 80043b0:	ffff0001 	.word	0xffff0001

080043b4 <_fwalk_reent>:
 80043b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b6:	0004      	movs	r4, r0
 80043b8:	0006      	movs	r6, r0
 80043ba:	2700      	movs	r7, #0
 80043bc:	9101      	str	r1, [sp, #4]
 80043be:	3448      	adds	r4, #72	; 0x48
 80043c0:	6863      	ldr	r3, [r4, #4]
 80043c2:	68a5      	ldr	r5, [r4, #8]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	9b00      	ldr	r3, [sp, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	d504      	bpl.n	80043d8 <_fwalk_reent+0x24>
 80043ce:	6824      	ldr	r4, [r4, #0]
 80043d0:	2c00      	cmp	r4, #0
 80043d2:	d1f5      	bne.n	80043c0 <_fwalk_reent+0xc>
 80043d4:	0038      	movs	r0, r7
 80043d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043d8:	89ab      	ldrh	r3, [r5, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d908      	bls.n	80043f0 <_fwalk_reent+0x3c>
 80043de:	220e      	movs	r2, #14
 80043e0:	5eab      	ldrsh	r3, [r5, r2]
 80043e2:	3301      	adds	r3, #1
 80043e4:	d004      	beq.n	80043f0 <_fwalk_reent+0x3c>
 80043e6:	0029      	movs	r1, r5
 80043e8:	0030      	movs	r0, r6
 80043ea:	9b01      	ldr	r3, [sp, #4]
 80043ec:	4798      	blx	r3
 80043ee:	4307      	orrs	r7, r0
 80043f0:	3568      	adds	r5, #104	; 0x68
 80043f2:	e7e8      	b.n	80043c6 <_fwalk_reent+0x12>

080043f4 <__retarget_lock_init_recursive>:
 80043f4:	4770      	bx	lr

080043f6 <__retarget_lock_acquire_recursive>:
 80043f6:	4770      	bx	lr

080043f8 <__retarget_lock_release_recursive>:
 80043f8:	4770      	bx	lr
	...

080043fc <sbrk_aligned>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4e0f      	ldr	r6, [pc, #60]	; (800443c <sbrk_aligned+0x40>)
 8004400:	000d      	movs	r5, r1
 8004402:	6831      	ldr	r1, [r6, #0]
 8004404:	0004      	movs	r4, r0
 8004406:	2900      	cmp	r1, #0
 8004408:	d102      	bne.n	8004410 <sbrk_aligned+0x14>
 800440a:	f000 fb73 	bl	8004af4 <_sbrk_r>
 800440e:	6030      	str	r0, [r6, #0]
 8004410:	0029      	movs	r1, r5
 8004412:	0020      	movs	r0, r4
 8004414:	f000 fb6e 	bl	8004af4 <_sbrk_r>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d00a      	beq.n	8004432 <sbrk_aligned+0x36>
 800441c:	2303      	movs	r3, #3
 800441e:	1cc5      	adds	r5, r0, #3
 8004420:	439d      	bics	r5, r3
 8004422:	42a8      	cmp	r0, r5
 8004424:	d007      	beq.n	8004436 <sbrk_aligned+0x3a>
 8004426:	1a29      	subs	r1, r5, r0
 8004428:	0020      	movs	r0, r4
 800442a:	f000 fb63 	bl	8004af4 <_sbrk_r>
 800442e:	1c43      	adds	r3, r0, #1
 8004430:	d101      	bne.n	8004436 <sbrk_aligned+0x3a>
 8004432:	2501      	movs	r5, #1
 8004434:	426d      	negs	r5, r5
 8004436:	0028      	movs	r0, r5
 8004438:	bd70      	pop	{r4, r5, r6, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	200001c0 	.word	0x200001c0

08004440 <_malloc_r>:
 8004440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004442:	2203      	movs	r2, #3
 8004444:	1ccb      	adds	r3, r1, #3
 8004446:	4393      	bics	r3, r2
 8004448:	3308      	adds	r3, #8
 800444a:	0006      	movs	r6, r0
 800444c:	001f      	movs	r7, r3
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d232      	bcs.n	80044b8 <_malloc_r+0x78>
 8004452:	270c      	movs	r7, #12
 8004454:	42b9      	cmp	r1, r7
 8004456:	d831      	bhi.n	80044bc <_malloc_r+0x7c>
 8004458:	0030      	movs	r0, r6
 800445a:	f000 fdf5 	bl	8005048 <__malloc_lock>
 800445e:	4d32      	ldr	r5, [pc, #200]	; (8004528 <_malloc_r+0xe8>)
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	001c      	movs	r4, r3
 8004464:	2c00      	cmp	r4, #0
 8004466:	d12e      	bne.n	80044c6 <_malloc_r+0x86>
 8004468:	0039      	movs	r1, r7
 800446a:	0030      	movs	r0, r6
 800446c:	f7ff ffc6 	bl	80043fc <sbrk_aligned>
 8004470:	0004      	movs	r4, r0
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	d11e      	bne.n	80044b4 <_malloc_r+0x74>
 8004476:	682c      	ldr	r4, [r5, #0]
 8004478:	0025      	movs	r5, r4
 800447a:	2d00      	cmp	r5, #0
 800447c:	d14a      	bne.n	8004514 <_malloc_r+0xd4>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	0029      	movs	r1, r5
 8004482:	18e3      	adds	r3, r4, r3
 8004484:	0030      	movs	r0, r6
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	f000 fb34 	bl	8004af4 <_sbrk_r>
 800448c:	9b01      	ldr	r3, [sp, #4]
 800448e:	4283      	cmp	r3, r0
 8004490:	d143      	bne.n	800451a <_malloc_r+0xda>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	3703      	adds	r7, #3
 8004496:	1aff      	subs	r7, r7, r3
 8004498:	2303      	movs	r3, #3
 800449a:	439f      	bics	r7, r3
 800449c:	3708      	adds	r7, #8
 800449e:	2f0c      	cmp	r7, #12
 80044a0:	d200      	bcs.n	80044a4 <_malloc_r+0x64>
 80044a2:	270c      	movs	r7, #12
 80044a4:	0039      	movs	r1, r7
 80044a6:	0030      	movs	r0, r6
 80044a8:	f7ff ffa8 	bl	80043fc <sbrk_aligned>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d034      	beq.n	800451a <_malloc_r+0xda>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	19df      	adds	r7, r3, r7
 80044b4:	6027      	str	r7, [r4, #0]
 80044b6:	e013      	b.n	80044e0 <_malloc_r+0xa0>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	dacb      	bge.n	8004454 <_malloc_r+0x14>
 80044bc:	230c      	movs	r3, #12
 80044be:	2500      	movs	r5, #0
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	0028      	movs	r0, r5
 80044c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	1bd1      	subs	r1, r2, r7
 80044ca:	d420      	bmi.n	800450e <_malloc_r+0xce>
 80044cc:	290b      	cmp	r1, #11
 80044ce:	d917      	bls.n	8004500 <_malloc_r+0xc0>
 80044d0:	19e2      	adds	r2, r4, r7
 80044d2:	6027      	str	r7, [r4, #0]
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d111      	bne.n	80044fc <_malloc_r+0xbc>
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	6053      	str	r3, [r2, #4]
 80044e0:	0030      	movs	r0, r6
 80044e2:	0025      	movs	r5, r4
 80044e4:	f000 fdb8 	bl	8005058 <__malloc_unlock>
 80044e8:	2207      	movs	r2, #7
 80044ea:	350b      	adds	r5, #11
 80044ec:	1d23      	adds	r3, r4, #4
 80044ee:	4395      	bics	r5, r2
 80044f0:	1aea      	subs	r2, r5, r3
 80044f2:	429d      	cmp	r5, r3
 80044f4:	d0e5      	beq.n	80044c2 <_malloc_r+0x82>
 80044f6:	1b5b      	subs	r3, r3, r5
 80044f8:	50a3      	str	r3, [r4, r2]
 80044fa:	e7e2      	b.n	80044c2 <_malloc_r+0x82>
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	e7ec      	b.n	80044da <_malloc_r+0x9a>
 8004500:	6862      	ldr	r2, [r4, #4]
 8004502:	42a3      	cmp	r3, r4
 8004504:	d101      	bne.n	800450a <_malloc_r+0xca>
 8004506:	602a      	str	r2, [r5, #0]
 8004508:	e7ea      	b.n	80044e0 <_malloc_r+0xa0>
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	e7e8      	b.n	80044e0 <_malloc_r+0xa0>
 800450e:	0023      	movs	r3, r4
 8004510:	6864      	ldr	r4, [r4, #4]
 8004512:	e7a7      	b.n	8004464 <_malloc_r+0x24>
 8004514:	002c      	movs	r4, r5
 8004516:	686d      	ldr	r5, [r5, #4]
 8004518:	e7af      	b.n	800447a <_malloc_r+0x3a>
 800451a:	230c      	movs	r3, #12
 800451c:	0030      	movs	r0, r6
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f000 fd9a 	bl	8005058 <__malloc_unlock>
 8004524:	e7cd      	b.n	80044c2 <_malloc_r+0x82>
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	200001bc 	.word	0x200001bc

0800452c <__sfputc_r>:
 800452c:	6893      	ldr	r3, [r2, #8]
 800452e:	b510      	push	{r4, lr}
 8004530:	3b01      	subs	r3, #1
 8004532:	6093      	str	r3, [r2, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	da04      	bge.n	8004542 <__sfputc_r+0x16>
 8004538:	6994      	ldr	r4, [r2, #24]
 800453a:	42a3      	cmp	r3, r4
 800453c:	db07      	blt.n	800454e <__sfputc_r+0x22>
 800453e:	290a      	cmp	r1, #10
 8004540:	d005      	beq.n	800454e <__sfputc_r+0x22>
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	1c58      	adds	r0, r3, #1
 8004546:	6010      	str	r0, [r2, #0]
 8004548:	7019      	strb	r1, [r3, #0]
 800454a:	0008      	movs	r0, r1
 800454c:	bd10      	pop	{r4, pc}
 800454e:	f000 fb2f 	bl	8004bb0 <__swbuf_r>
 8004552:	0001      	movs	r1, r0
 8004554:	e7f9      	b.n	800454a <__sfputc_r+0x1e>

08004556 <__sfputs_r>:
 8004556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004558:	0006      	movs	r6, r0
 800455a:	000f      	movs	r7, r1
 800455c:	0014      	movs	r4, r2
 800455e:	18d5      	adds	r5, r2, r3
 8004560:	42ac      	cmp	r4, r5
 8004562:	d101      	bne.n	8004568 <__sfputs_r+0x12>
 8004564:	2000      	movs	r0, #0
 8004566:	e007      	b.n	8004578 <__sfputs_r+0x22>
 8004568:	7821      	ldrb	r1, [r4, #0]
 800456a:	003a      	movs	r2, r7
 800456c:	0030      	movs	r0, r6
 800456e:	f7ff ffdd 	bl	800452c <__sfputc_r>
 8004572:	3401      	adds	r4, #1
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d1f3      	bne.n	8004560 <__sfputs_r+0xa>
 8004578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800457c <_vfiprintf_r>:
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	b0a1      	sub	sp, #132	; 0x84
 8004580:	0006      	movs	r6, r0
 8004582:	000c      	movs	r4, r1
 8004584:	001f      	movs	r7, r3
 8004586:	9203      	str	r2, [sp, #12]
 8004588:	2800      	cmp	r0, #0
 800458a:	d004      	beq.n	8004596 <_vfiprintf_r+0x1a>
 800458c:	6983      	ldr	r3, [r0, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <_vfiprintf_r+0x1a>
 8004592:	f7ff fe8f 	bl	80042b4 <__sinit>
 8004596:	4b8e      	ldr	r3, [pc, #568]	; (80047d0 <_vfiprintf_r+0x254>)
 8004598:	429c      	cmp	r4, r3
 800459a:	d11c      	bne.n	80045d6 <_vfiprintf_r+0x5a>
 800459c:	6874      	ldr	r4, [r6, #4]
 800459e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045a0:	07db      	lsls	r3, r3, #31
 80045a2:	d405      	bmi.n	80045b0 <_vfiprintf_r+0x34>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	059b      	lsls	r3, r3, #22
 80045a8:	d402      	bmi.n	80045b0 <_vfiprintf_r+0x34>
 80045aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ac:	f7ff ff23 	bl	80043f6 <__retarget_lock_acquire_recursive>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	071b      	lsls	r3, r3, #28
 80045b4:	d502      	bpl.n	80045bc <_vfiprintf_r+0x40>
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <_vfiprintf_r+0x7c>
 80045bc:	0021      	movs	r1, r4
 80045be:	0030      	movs	r0, r6
 80045c0:	f000 fb60 	bl	8004c84 <__swsetup_r>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d017      	beq.n	80045f8 <_vfiprintf_r+0x7c>
 80045c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ca:	07db      	lsls	r3, r3, #31
 80045cc:	d50d      	bpl.n	80045ea <_vfiprintf_r+0x6e>
 80045ce:	2001      	movs	r0, #1
 80045d0:	4240      	negs	r0, r0
 80045d2:	b021      	add	sp, #132	; 0x84
 80045d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d6:	4b7f      	ldr	r3, [pc, #508]	; (80047d4 <_vfiprintf_r+0x258>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	d101      	bne.n	80045e0 <_vfiprintf_r+0x64>
 80045dc:	68b4      	ldr	r4, [r6, #8]
 80045de:	e7de      	b.n	800459e <_vfiprintf_r+0x22>
 80045e0:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <_vfiprintf_r+0x25c>)
 80045e2:	429c      	cmp	r4, r3
 80045e4:	d1db      	bne.n	800459e <_vfiprintf_r+0x22>
 80045e6:	68f4      	ldr	r4, [r6, #12]
 80045e8:	e7d9      	b.n	800459e <_vfiprintf_r+0x22>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	059b      	lsls	r3, r3, #22
 80045ee:	d4ee      	bmi.n	80045ce <_vfiprintf_r+0x52>
 80045f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045f2:	f7ff ff01 	bl	80043f8 <__retarget_lock_release_recursive>
 80045f6:	e7ea      	b.n	80045ce <_vfiprintf_r+0x52>
 80045f8:	2300      	movs	r3, #0
 80045fa:	ad08      	add	r5, sp, #32
 80045fc:	616b      	str	r3, [r5, #20]
 80045fe:	3320      	adds	r3, #32
 8004600:	766b      	strb	r3, [r5, #25]
 8004602:	3310      	adds	r3, #16
 8004604:	76ab      	strb	r3, [r5, #26]
 8004606:	9707      	str	r7, [sp, #28]
 8004608:	9f03      	ldr	r7, [sp, #12]
 800460a:	783b      	ldrb	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <_vfiprintf_r+0x98>
 8004610:	2b25      	cmp	r3, #37	; 0x25
 8004612:	d14e      	bne.n	80046b2 <_vfiprintf_r+0x136>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	1afb      	subs	r3, r7, r3
 8004618:	9305      	str	r3, [sp, #20]
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	429f      	cmp	r7, r3
 800461e:	d00d      	beq.n	800463c <_vfiprintf_r+0xc0>
 8004620:	9b05      	ldr	r3, [sp, #20]
 8004622:	0021      	movs	r1, r4
 8004624:	0030      	movs	r0, r6
 8004626:	9a03      	ldr	r2, [sp, #12]
 8004628:	f7ff ff95 	bl	8004556 <__sfputs_r>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d100      	bne.n	8004632 <_vfiprintf_r+0xb6>
 8004630:	e0b5      	b.n	800479e <_vfiprintf_r+0x222>
 8004632:	696a      	ldr	r2, [r5, #20]
 8004634:	9b05      	ldr	r3, [sp, #20]
 8004636:	4694      	mov	ip, r2
 8004638:	4463      	add	r3, ip
 800463a:	616b      	str	r3, [r5, #20]
 800463c:	783b      	ldrb	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d100      	bne.n	8004644 <_vfiprintf_r+0xc8>
 8004642:	e0ac      	b.n	800479e <_vfiprintf_r+0x222>
 8004644:	2201      	movs	r2, #1
 8004646:	1c7b      	adds	r3, r7, #1
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	2300      	movs	r3, #0
 800464c:	4252      	negs	r2, r2
 800464e:	606a      	str	r2, [r5, #4]
 8004650:	a904      	add	r1, sp, #16
 8004652:	3254      	adds	r2, #84	; 0x54
 8004654:	1852      	adds	r2, r2, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	60eb      	str	r3, [r5, #12]
 800465a:	60ab      	str	r3, [r5, #8]
 800465c:	7013      	strb	r3, [r2, #0]
 800465e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004660:	9b03      	ldr	r3, [sp, #12]
 8004662:	2205      	movs	r2, #5
 8004664:	7819      	ldrb	r1, [r3, #0]
 8004666:	485d      	ldr	r0, [pc, #372]	; (80047dc <_vfiprintf_r+0x260>)
 8004668:	f000 fce2 	bl	8005030 <memchr>
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	1c5f      	adds	r7, r3, #1
 8004670:	2800      	cmp	r0, #0
 8004672:	d120      	bne.n	80046b6 <_vfiprintf_r+0x13a>
 8004674:	682a      	ldr	r2, [r5, #0]
 8004676:	06d3      	lsls	r3, r2, #27
 8004678:	d504      	bpl.n	8004684 <_vfiprintf_r+0x108>
 800467a:	2353      	movs	r3, #83	; 0x53
 800467c:	a904      	add	r1, sp, #16
 800467e:	185b      	adds	r3, r3, r1
 8004680:	2120      	movs	r1, #32
 8004682:	7019      	strb	r1, [r3, #0]
 8004684:	0713      	lsls	r3, r2, #28
 8004686:	d504      	bpl.n	8004692 <_vfiprintf_r+0x116>
 8004688:	2353      	movs	r3, #83	; 0x53
 800468a:	a904      	add	r1, sp, #16
 800468c:	185b      	adds	r3, r3, r1
 800468e:	212b      	movs	r1, #43	; 0x2b
 8004690:	7019      	strb	r1, [r3, #0]
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b2a      	cmp	r3, #42	; 0x2a
 8004698:	d016      	beq.n	80046c8 <_vfiprintf_r+0x14c>
 800469a:	2100      	movs	r1, #0
 800469c:	68eb      	ldr	r3, [r5, #12]
 800469e:	9f03      	ldr	r7, [sp, #12]
 80046a0:	783a      	ldrb	r2, [r7, #0]
 80046a2:	1c78      	adds	r0, r7, #1
 80046a4:	3a30      	subs	r2, #48	; 0x30
 80046a6:	4684      	mov	ip, r0
 80046a8:	2a09      	cmp	r2, #9
 80046aa:	d94f      	bls.n	800474c <_vfiprintf_r+0x1d0>
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d111      	bne.n	80046d4 <_vfiprintf_r+0x158>
 80046b0:	e017      	b.n	80046e2 <_vfiprintf_r+0x166>
 80046b2:	3701      	adds	r7, #1
 80046b4:	e7a9      	b.n	800460a <_vfiprintf_r+0x8e>
 80046b6:	4b49      	ldr	r3, [pc, #292]	; (80047dc <_vfiprintf_r+0x260>)
 80046b8:	682a      	ldr	r2, [r5, #0]
 80046ba:	1ac0      	subs	r0, r0, r3
 80046bc:	2301      	movs	r3, #1
 80046be:	4083      	lsls	r3, r0
 80046c0:	4313      	orrs	r3, r2
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	9703      	str	r7, [sp, #12]
 80046c6:	e7cb      	b.n	8004660 <_vfiprintf_r+0xe4>
 80046c8:	9b07      	ldr	r3, [sp, #28]
 80046ca:	1d19      	adds	r1, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	9107      	str	r1, [sp, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db01      	blt.n	80046d8 <_vfiprintf_r+0x15c>
 80046d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d6:	e004      	b.n	80046e2 <_vfiprintf_r+0x166>
 80046d8:	425b      	negs	r3, r3
 80046da:	60eb      	str	r3, [r5, #12]
 80046dc:	2302      	movs	r3, #2
 80046de:	4313      	orrs	r3, r2
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	783b      	ldrb	r3, [r7, #0]
 80046e4:	2b2e      	cmp	r3, #46	; 0x2e
 80046e6:	d10a      	bne.n	80046fe <_vfiprintf_r+0x182>
 80046e8:	787b      	ldrb	r3, [r7, #1]
 80046ea:	2b2a      	cmp	r3, #42	; 0x2a
 80046ec:	d137      	bne.n	800475e <_vfiprintf_r+0x1e2>
 80046ee:	9b07      	ldr	r3, [sp, #28]
 80046f0:	3702      	adds	r7, #2
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	9207      	str	r2, [sp, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db2d      	blt.n	8004758 <_vfiprintf_r+0x1dc>
 80046fc:	9309      	str	r3, [sp, #36]	; 0x24
 80046fe:	2203      	movs	r2, #3
 8004700:	7839      	ldrb	r1, [r7, #0]
 8004702:	4837      	ldr	r0, [pc, #220]	; (80047e0 <_vfiprintf_r+0x264>)
 8004704:	f000 fc94 	bl	8005030 <memchr>
 8004708:	2800      	cmp	r0, #0
 800470a:	d007      	beq.n	800471c <_vfiprintf_r+0x1a0>
 800470c:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <_vfiprintf_r+0x264>)
 800470e:	682a      	ldr	r2, [r5, #0]
 8004710:	1ac0      	subs	r0, r0, r3
 8004712:	2340      	movs	r3, #64	; 0x40
 8004714:	4083      	lsls	r3, r0
 8004716:	4313      	orrs	r3, r2
 8004718:	3701      	adds	r7, #1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	7839      	ldrb	r1, [r7, #0]
 800471e:	1c7b      	adds	r3, r7, #1
 8004720:	2206      	movs	r2, #6
 8004722:	4830      	ldr	r0, [pc, #192]	; (80047e4 <_vfiprintf_r+0x268>)
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	7629      	strb	r1, [r5, #24]
 8004728:	f000 fc82 	bl	8005030 <memchr>
 800472c:	2800      	cmp	r0, #0
 800472e:	d045      	beq.n	80047bc <_vfiprintf_r+0x240>
 8004730:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <_vfiprintf_r+0x26c>)
 8004732:	2b00      	cmp	r3, #0
 8004734:	d127      	bne.n	8004786 <_vfiprintf_r+0x20a>
 8004736:	2207      	movs	r2, #7
 8004738:	9b07      	ldr	r3, [sp, #28]
 800473a:	3307      	adds	r3, #7
 800473c:	4393      	bics	r3, r2
 800473e:	3308      	adds	r3, #8
 8004740:	9307      	str	r3, [sp, #28]
 8004742:	696b      	ldr	r3, [r5, #20]
 8004744:	9a04      	ldr	r2, [sp, #16]
 8004746:	189b      	adds	r3, r3, r2
 8004748:	616b      	str	r3, [r5, #20]
 800474a:	e75d      	b.n	8004608 <_vfiprintf_r+0x8c>
 800474c:	210a      	movs	r1, #10
 800474e:	434b      	muls	r3, r1
 8004750:	4667      	mov	r7, ip
 8004752:	189b      	adds	r3, r3, r2
 8004754:	3909      	subs	r1, #9
 8004756:	e7a3      	b.n	80046a0 <_vfiprintf_r+0x124>
 8004758:	2301      	movs	r3, #1
 800475a:	425b      	negs	r3, r3
 800475c:	e7ce      	b.n	80046fc <_vfiprintf_r+0x180>
 800475e:	2300      	movs	r3, #0
 8004760:	001a      	movs	r2, r3
 8004762:	3701      	adds	r7, #1
 8004764:	606b      	str	r3, [r5, #4]
 8004766:	7839      	ldrb	r1, [r7, #0]
 8004768:	1c78      	adds	r0, r7, #1
 800476a:	3930      	subs	r1, #48	; 0x30
 800476c:	4684      	mov	ip, r0
 800476e:	2909      	cmp	r1, #9
 8004770:	d903      	bls.n	800477a <_vfiprintf_r+0x1fe>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0c3      	beq.n	80046fe <_vfiprintf_r+0x182>
 8004776:	9209      	str	r2, [sp, #36]	; 0x24
 8004778:	e7c1      	b.n	80046fe <_vfiprintf_r+0x182>
 800477a:	230a      	movs	r3, #10
 800477c:	435a      	muls	r2, r3
 800477e:	4667      	mov	r7, ip
 8004780:	1852      	adds	r2, r2, r1
 8004782:	3b09      	subs	r3, #9
 8004784:	e7ef      	b.n	8004766 <_vfiprintf_r+0x1ea>
 8004786:	ab07      	add	r3, sp, #28
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	0022      	movs	r2, r4
 800478c:	0029      	movs	r1, r5
 800478e:	0030      	movs	r0, r6
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <_vfiprintf_r+0x270>)
 8004792:	e000      	b.n	8004796 <_vfiprintf_r+0x21a>
 8004794:	bf00      	nop
 8004796:	9004      	str	r0, [sp, #16]
 8004798:	9b04      	ldr	r3, [sp, #16]
 800479a:	3301      	adds	r3, #1
 800479c:	d1d1      	bne.n	8004742 <_vfiprintf_r+0x1c6>
 800479e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a0:	07db      	lsls	r3, r3, #31
 80047a2:	d405      	bmi.n	80047b0 <_vfiprintf_r+0x234>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	059b      	lsls	r3, r3, #22
 80047a8:	d402      	bmi.n	80047b0 <_vfiprintf_r+0x234>
 80047aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ac:	f7ff fe24 	bl	80043f8 <__retarget_lock_release_recursive>
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	065b      	lsls	r3, r3, #25
 80047b4:	d500      	bpl.n	80047b8 <_vfiprintf_r+0x23c>
 80047b6:	e70a      	b.n	80045ce <_vfiprintf_r+0x52>
 80047b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80047ba:	e70a      	b.n	80045d2 <_vfiprintf_r+0x56>
 80047bc:	ab07      	add	r3, sp, #28
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	0022      	movs	r2, r4
 80047c2:	0029      	movs	r1, r5
 80047c4:	0030      	movs	r0, r6
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <_vfiprintf_r+0x270>)
 80047c8:	f000 f882 	bl	80048d0 <_printf_i>
 80047cc:	e7e3      	b.n	8004796 <_vfiprintf_r+0x21a>
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	080052b4 	.word	0x080052b4
 80047d4:	080052d4 	.word	0x080052d4
 80047d8:	08005294 	.word	0x08005294
 80047dc:	080052f4 	.word	0x080052f4
 80047e0:	080052fa 	.word	0x080052fa
 80047e4:	080052fe 	.word	0x080052fe
 80047e8:	00000000 	.word	0x00000000
 80047ec:	08004557 	.word	0x08004557

080047f0 <_printf_common>:
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	0015      	movs	r5, r2
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	688a      	ldr	r2, [r1, #8]
 80047f8:	690b      	ldr	r3, [r1, #16]
 80047fa:	000c      	movs	r4, r1
 80047fc:	9000      	str	r0, [sp, #0]
 80047fe:	4293      	cmp	r3, r2
 8004800:	da00      	bge.n	8004804 <_printf_common+0x14>
 8004802:	0013      	movs	r3, r2
 8004804:	0022      	movs	r2, r4
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	3243      	adds	r2, #67	; 0x43
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	2a00      	cmp	r2, #0
 800480e:	d001      	beq.n	8004814 <_printf_common+0x24>
 8004810:	3301      	adds	r3, #1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	069b      	lsls	r3, r3, #26
 8004818:	d502      	bpl.n	8004820 <_printf_common+0x30>
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	3302      	adds	r3, #2
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	2306      	movs	r3, #6
 8004824:	0017      	movs	r7, r2
 8004826:	401f      	ands	r7, r3
 8004828:	421a      	tst	r2, r3
 800482a:	d027      	beq.n	800487c <_printf_common+0x8c>
 800482c:	0023      	movs	r3, r4
 800482e:	3343      	adds	r3, #67	; 0x43
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	1e5a      	subs	r2, r3, #1
 8004834:	4193      	sbcs	r3, r2
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d430      	bmi.n	800489e <_printf_common+0xae>
 800483c:	0022      	movs	r2, r4
 800483e:	9901      	ldr	r1, [sp, #4]
 8004840:	9800      	ldr	r0, [sp, #0]
 8004842:	9e08      	ldr	r6, [sp, #32]
 8004844:	3243      	adds	r2, #67	; 0x43
 8004846:	47b0      	blx	r6
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d025      	beq.n	8004898 <_printf_common+0xa8>
 800484c:	2306      	movs	r3, #6
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	682a      	ldr	r2, [r5, #0]
 8004852:	68e1      	ldr	r1, [r4, #12]
 8004854:	2500      	movs	r5, #0
 8004856:	4003      	ands	r3, r0
 8004858:	2b04      	cmp	r3, #4
 800485a:	d103      	bne.n	8004864 <_printf_common+0x74>
 800485c:	1a8d      	subs	r5, r1, r2
 800485e:	43eb      	mvns	r3, r5
 8004860:	17db      	asrs	r3, r3, #31
 8004862:	401d      	ands	r5, r3
 8004864:	68a3      	ldr	r3, [r4, #8]
 8004866:	6922      	ldr	r2, [r4, #16]
 8004868:	4293      	cmp	r3, r2
 800486a:	dd01      	ble.n	8004870 <_printf_common+0x80>
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	18ed      	adds	r5, r5, r3
 8004870:	2700      	movs	r7, #0
 8004872:	42bd      	cmp	r5, r7
 8004874:	d120      	bne.n	80048b8 <_printf_common+0xc8>
 8004876:	2000      	movs	r0, #0
 8004878:	e010      	b.n	800489c <_printf_common+0xac>
 800487a:	3701      	adds	r7, #1
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	682a      	ldr	r2, [r5, #0]
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	42bb      	cmp	r3, r7
 8004884:	ddd2      	ble.n	800482c <_printf_common+0x3c>
 8004886:	0022      	movs	r2, r4
 8004888:	2301      	movs	r3, #1
 800488a:	9901      	ldr	r1, [sp, #4]
 800488c:	9800      	ldr	r0, [sp, #0]
 800488e:	9e08      	ldr	r6, [sp, #32]
 8004890:	3219      	adds	r2, #25
 8004892:	47b0      	blx	r6
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d1f0      	bne.n	800487a <_printf_common+0x8a>
 8004898:	2001      	movs	r0, #1
 800489a:	4240      	negs	r0, r0
 800489c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800489e:	2030      	movs	r0, #48	; 0x30
 80048a0:	18e1      	adds	r1, r4, r3
 80048a2:	3143      	adds	r1, #67	; 0x43
 80048a4:	7008      	strb	r0, [r1, #0]
 80048a6:	0021      	movs	r1, r4
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	3145      	adds	r1, #69	; 0x45
 80048ac:	7809      	ldrb	r1, [r1, #0]
 80048ae:	18a2      	adds	r2, r4, r2
 80048b0:	3243      	adds	r2, #67	; 0x43
 80048b2:	3302      	adds	r3, #2
 80048b4:	7011      	strb	r1, [r2, #0]
 80048b6:	e7c1      	b.n	800483c <_printf_common+0x4c>
 80048b8:	0022      	movs	r2, r4
 80048ba:	2301      	movs	r3, #1
 80048bc:	9901      	ldr	r1, [sp, #4]
 80048be:	9800      	ldr	r0, [sp, #0]
 80048c0:	9e08      	ldr	r6, [sp, #32]
 80048c2:	321a      	adds	r2, #26
 80048c4:	47b0      	blx	r6
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	d0e6      	beq.n	8004898 <_printf_common+0xa8>
 80048ca:	3701      	adds	r7, #1
 80048cc:	e7d1      	b.n	8004872 <_printf_common+0x82>
	...

080048d0 <_printf_i>:
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	b08b      	sub	sp, #44	; 0x2c
 80048d4:	9206      	str	r2, [sp, #24]
 80048d6:	000a      	movs	r2, r1
 80048d8:	3243      	adds	r2, #67	; 0x43
 80048da:	9307      	str	r3, [sp, #28]
 80048dc:	9005      	str	r0, [sp, #20]
 80048de:	9204      	str	r2, [sp, #16]
 80048e0:	7e0a      	ldrb	r2, [r1, #24]
 80048e2:	000c      	movs	r4, r1
 80048e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048e6:	2a78      	cmp	r2, #120	; 0x78
 80048e8:	d807      	bhi.n	80048fa <_printf_i+0x2a>
 80048ea:	2a62      	cmp	r2, #98	; 0x62
 80048ec:	d809      	bhi.n	8004902 <_printf_i+0x32>
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	d100      	bne.n	80048f4 <_printf_i+0x24>
 80048f2:	e0c1      	b.n	8004a78 <_printf_i+0x1a8>
 80048f4:	2a58      	cmp	r2, #88	; 0x58
 80048f6:	d100      	bne.n	80048fa <_printf_i+0x2a>
 80048f8:	e08c      	b.n	8004a14 <_printf_i+0x144>
 80048fa:	0026      	movs	r6, r4
 80048fc:	3642      	adds	r6, #66	; 0x42
 80048fe:	7032      	strb	r2, [r6, #0]
 8004900:	e022      	b.n	8004948 <_printf_i+0x78>
 8004902:	0010      	movs	r0, r2
 8004904:	3863      	subs	r0, #99	; 0x63
 8004906:	2815      	cmp	r0, #21
 8004908:	d8f7      	bhi.n	80048fa <_printf_i+0x2a>
 800490a:	f7fb fc07 	bl	800011c <__gnu_thumb1_case_shi>
 800490e:	0016      	.short	0x0016
 8004910:	fff6001f 	.word	0xfff6001f
 8004914:	fff6fff6 	.word	0xfff6fff6
 8004918:	001ffff6 	.word	0x001ffff6
 800491c:	fff6fff6 	.word	0xfff6fff6
 8004920:	fff6fff6 	.word	0xfff6fff6
 8004924:	003600a8 	.word	0x003600a8
 8004928:	fff6009a 	.word	0xfff6009a
 800492c:	00b9fff6 	.word	0x00b9fff6
 8004930:	0036fff6 	.word	0x0036fff6
 8004934:	fff6fff6 	.word	0xfff6fff6
 8004938:	009e      	.short	0x009e
 800493a:	0026      	movs	r6, r4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	3642      	adds	r6, #66	; 0x42
 8004940:	1d11      	adds	r1, r2, #4
 8004942:	6019      	str	r1, [r3, #0]
 8004944:	6813      	ldr	r3, [r2, #0]
 8004946:	7033      	strb	r3, [r6, #0]
 8004948:	2301      	movs	r3, #1
 800494a:	e0a7      	b.n	8004a9c <_printf_i+0x1cc>
 800494c:	6808      	ldr	r0, [r1, #0]
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	1d0a      	adds	r2, r1, #4
 8004952:	0605      	lsls	r5, r0, #24
 8004954:	d50b      	bpl.n	800496e <_printf_i+0x9e>
 8004956:	680d      	ldr	r5, [r1, #0]
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	2d00      	cmp	r5, #0
 800495c:	da03      	bge.n	8004966 <_printf_i+0x96>
 800495e:	232d      	movs	r3, #45	; 0x2d
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	426d      	negs	r5, r5
 8004964:	7013      	strb	r3, [r2, #0]
 8004966:	4b61      	ldr	r3, [pc, #388]	; (8004aec <_printf_i+0x21c>)
 8004968:	270a      	movs	r7, #10
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	e01b      	b.n	80049a6 <_printf_i+0xd6>
 800496e:	680d      	ldr	r5, [r1, #0]
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	0641      	lsls	r1, r0, #25
 8004974:	d5f1      	bpl.n	800495a <_printf_i+0x8a>
 8004976:	b22d      	sxth	r5, r5
 8004978:	e7ef      	b.n	800495a <_printf_i+0x8a>
 800497a:	680d      	ldr	r5, [r1, #0]
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	1d08      	adds	r0, r1, #4
 8004980:	6018      	str	r0, [r3, #0]
 8004982:	062e      	lsls	r6, r5, #24
 8004984:	d501      	bpl.n	800498a <_printf_i+0xba>
 8004986:	680d      	ldr	r5, [r1, #0]
 8004988:	e003      	b.n	8004992 <_printf_i+0xc2>
 800498a:	066d      	lsls	r5, r5, #25
 800498c:	d5fb      	bpl.n	8004986 <_printf_i+0xb6>
 800498e:	680d      	ldr	r5, [r1, #0]
 8004990:	b2ad      	uxth	r5, r5
 8004992:	4b56      	ldr	r3, [pc, #344]	; (8004aec <_printf_i+0x21c>)
 8004994:	2708      	movs	r7, #8
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	2a6f      	cmp	r2, #111	; 0x6f
 800499a:	d000      	beq.n	800499e <_printf_i+0xce>
 800499c:	3702      	adds	r7, #2
 800499e:	0023      	movs	r3, r4
 80049a0:	2200      	movs	r2, #0
 80049a2:	3343      	adds	r3, #67	; 0x43
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	60a3      	str	r3, [r4, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db03      	blt.n	80049b6 <_printf_i+0xe6>
 80049ae:	2204      	movs	r2, #4
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	4391      	bics	r1, r2
 80049b4:	6021      	str	r1, [r4, #0]
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	d102      	bne.n	80049c0 <_printf_i+0xf0>
 80049ba:	9e04      	ldr	r6, [sp, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <_printf_i+0x10a>
 80049c0:	9e04      	ldr	r6, [sp, #16]
 80049c2:	0028      	movs	r0, r5
 80049c4:	0039      	movs	r1, r7
 80049c6:	f7fb fc39 	bl	800023c <__aeabi_uidivmod>
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	3e01      	subs	r6, #1
 80049ce:	5c5b      	ldrb	r3, [r3, r1]
 80049d0:	7033      	strb	r3, [r6, #0]
 80049d2:	002b      	movs	r3, r5
 80049d4:	0005      	movs	r5, r0
 80049d6:	429f      	cmp	r7, r3
 80049d8:	d9f3      	bls.n	80049c2 <_printf_i+0xf2>
 80049da:	2f08      	cmp	r7, #8
 80049dc:	d109      	bne.n	80049f2 <_printf_i+0x122>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07db      	lsls	r3, r3, #31
 80049e2:	d506      	bpl.n	80049f2 <_printf_i+0x122>
 80049e4:	6863      	ldr	r3, [r4, #4]
 80049e6:	6922      	ldr	r2, [r4, #16]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	dc02      	bgt.n	80049f2 <_printf_i+0x122>
 80049ec:	2330      	movs	r3, #48	; 0x30
 80049ee:	3e01      	subs	r6, #1
 80049f0:	7033      	strb	r3, [r6, #0]
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	1b9b      	subs	r3, r3, r6
 80049f6:	6123      	str	r3, [r4, #16]
 80049f8:	9b07      	ldr	r3, [sp, #28]
 80049fa:	0021      	movs	r1, r4
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	9805      	ldr	r0, [sp, #20]
 8004a00:	9b06      	ldr	r3, [sp, #24]
 8004a02:	aa09      	add	r2, sp, #36	; 0x24
 8004a04:	f7ff fef4 	bl	80047f0 <_printf_common>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d14c      	bne.n	8004aa6 <_printf_i+0x1d6>
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	4240      	negs	r0, r0
 8004a10:	b00b      	add	sp, #44	; 0x2c
 8004a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a14:	3145      	adds	r1, #69	; 0x45
 8004a16:	700a      	strb	r2, [r1, #0]
 8004a18:	4a34      	ldr	r2, [pc, #208]	; (8004aec <_printf_i+0x21c>)
 8004a1a:	9203      	str	r2, [sp, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	6821      	ldr	r1, [r4, #0]
 8004a20:	ca20      	ldmia	r2!, {r5}
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	0608      	lsls	r0, r1, #24
 8004a26:	d516      	bpl.n	8004a56 <_printf_i+0x186>
 8004a28:	07cb      	lsls	r3, r1, #31
 8004a2a:	d502      	bpl.n	8004a32 <_printf_i+0x162>
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	4319      	orrs	r1, r3
 8004a30:	6021      	str	r1, [r4, #0]
 8004a32:	2710      	movs	r7, #16
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	d1b2      	bne.n	800499e <_printf_i+0xce>
 8004a38:	2320      	movs	r3, #32
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	439a      	bics	r2, r3
 8004a3e:	6022      	str	r2, [r4, #0]
 8004a40:	e7ad      	b.n	800499e <_printf_i+0xce>
 8004a42:	2220      	movs	r2, #32
 8004a44:	6809      	ldr	r1, [r1, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	6022      	str	r2, [r4, #0]
 8004a4a:	0022      	movs	r2, r4
 8004a4c:	2178      	movs	r1, #120	; 0x78
 8004a4e:	3245      	adds	r2, #69	; 0x45
 8004a50:	7011      	strb	r1, [r2, #0]
 8004a52:	4a27      	ldr	r2, [pc, #156]	; (8004af0 <_printf_i+0x220>)
 8004a54:	e7e1      	b.n	8004a1a <_printf_i+0x14a>
 8004a56:	0648      	lsls	r0, r1, #25
 8004a58:	d5e6      	bpl.n	8004a28 <_printf_i+0x158>
 8004a5a:	b2ad      	uxth	r5, r5
 8004a5c:	e7e4      	b.n	8004a28 <_printf_i+0x158>
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	680d      	ldr	r5, [r1, #0]
 8004a62:	1d10      	adds	r0, r2, #4
 8004a64:	6949      	ldr	r1, [r1, #20]
 8004a66:	6018      	str	r0, [r3, #0]
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	062e      	lsls	r6, r5, #24
 8004a6c:	d501      	bpl.n	8004a72 <_printf_i+0x1a2>
 8004a6e:	6019      	str	r1, [r3, #0]
 8004a70:	e002      	b.n	8004a78 <_printf_i+0x1a8>
 8004a72:	066d      	lsls	r5, r5, #25
 8004a74:	d5fb      	bpl.n	8004a6e <_printf_i+0x19e>
 8004a76:	8019      	strh	r1, [r3, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9e04      	ldr	r6, [sp, #16]
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	e7bb      	b.n	80049f8 <_printf_i+0x128>
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	1d11      	adds	r1, r2, #4
 8004a84:	6019      	str	r1, [r3, #0]
 8004a86:	6816      	ldr	r6, [r2, #0]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	0030      	movs	r0, r6
 8004a8c:	6862      	ldr	r2, [r4, #4]
 8004a8e:	f000 facf 	bl	8005030 <memchr>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d001      	beq.n	8004a9a <_printf_i+0x1ca>
 8004a96:	1b80      	subs	r0, r0, r6
 8004a98:	6060      	str	r0, [r4, #4]
 8004a9a:	6863      	ldr	r3, [r4, #4]
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9a04      	ldr	r2, [sp, #16]
 8004aa2:	7013      	strb	r3, [r2, #0]
 8004aa4:	e7a8      	b.n	80049f8 <_printf_i+0x128>
 8004aa6:	6923      	ldr	r3, [r4, #16]
 8004aa8:	0032      	movs	r2, r6
 8004aaa:	9906      	ldr	r1, [sp, #24]
 8004aac:	9805      	ldr	r0, [sp, #20]
 8004aae:	9d07      	ldr	r5, [sp, #28]
 8004ab0:	47a8      	blx	r5
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	d0aa      	beq.n	8004a0c <_printf_i+0x13c>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	079b      	lsls	r3, r3, #30
 8004aba:	d415      	bmi.n	8004ae8 <_printf_i+0x218>
 8004abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004abe:	68e0      	ldr	r0, [r4, #12]
 8004ac0:	4298      	cmp	r0, r3
 8004ac2:	daa5      	bge.n	8004a10 <_printf_i+0x140>
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	e7a3      	b.n	8004a10 <_printf_i+0x140>
 8004ac8:	0022      	movs	r2, r4
 8004aca:	2301      	movs	r3, #1
 8004acc:	9906      	ldr	r1, [sp, #24]
 8004ace:	9805      	ldr	r0, [sp, #20]
 8004ad0:	9e07      	ldr	r6, [sp, #28]
 8004ad2:	3219      	adds	r2, #25
 8004ad4:	47b0      	blx	r6
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	d098      	beq.n	8004a0c <_printf_i+0x13c>
 8004ada:	3501      	adds	r5, #1
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	dcf0      	bgt.n	8004ac8 <_printf_i+0x1f8>
 8004ae6:	e7e9      	b.n	8004abc <_printf_i+0x1ec>
 8004ae8:	2500      	movs	r5, #0
 8004aea:	e7f7      	b.n	8004adc <_printf_i+0x20c>
 8004aec:	08005305 	.word	0x08005305
 8004af0:	08005316 	.word	0x08005316

08004af4 <_sbrk_r>:
 8004af4:	2300      	movs	r3, #0
 8004af6:	b570      	push	{r4, r5, r6, lr}
 8004af8:	4d06      	ldr	r5, [pc, #24]	; (8004b14 <_sbrk_r+0x20>)
 8004afa:	0004      	movs	r4, r0
 8004afc:	0008      	movs	r0, r1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fc fa00 	bl	8000f04 <_sbrk>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d103      	bne.n	8004b10 <_sbrk_r+0x1c>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d000      	beq.n	8004b10 <_sbrk_r+0x1c>
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	200001c4 	.word	0x200001c4

08004b18 <__sread>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	000c      	movs	r4, r1
 8004b1c:	250e      	movs	r5, #14
 8004b1e:	5f49      	ldrsh	r1, [r1, r5]
 8004b20:	f000 faec 	bl	80050fc <_read_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	db03      	blt.n	8004b30 <__sread+0x18>
 8004b28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b2a:	181b      	adds	r3, r3, r0
 8004b2c:	6563      	str	r3, [r4, #84]	; 0x54
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	4a02      	ldr	r2, [pc, #8]	; (8004b3c <__sread+0x24>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	e7f9      	b.n	8004b2e <__sread+0x16>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	ffffefff 	.word	0xffffefff

08004b40 <__swrite>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	001f      	movs	r7, r3
 8004b44:	898b      	ldrh	r3, [r1, #12]
 8004b46:	0005      	movs	r5, r0
 8004b48:	000c      	movs	r4, r1
 8004b4a:	0016      	movs	r6, r2
 8004b4c:	05db      	lsls	r3, r3, #23
 8004b4e:	d505      	bpl.n	8004b5c <__swrite+0x1c>
 8004b50:	230e      	movs	r3, #14
 8004b52:	5ec9      	ldrsh	r1, [r1, r3]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2302      	movs	r3, #2
 8004b58:	f000 f9ea 	bl	8004f30 <_lseek_r>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <__swrite+0x34>)
 8004b60:	0028      	movs	r0, r5
 8004b62:	4013      	ands	r3, r2
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	0032      	movs	r2, r6
 8004b68:	230e      	movs	r3, #14
 8004b6a:	5ee1      	ldrsh	r1, [r4, r3]
 8004b6c:	003b      	movs	r3, r7
 8004b6e:	f000 f875 	bl	8004c5c <_write_r>
 8004b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b74:	ffffefff 	.word	0xffffefff

08004b78 <__sseek>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	000c      	movs	r4, r1
 8004b7c:	250e      	movs	r5, #14
 8004b7e:	5f49      	ldrsh	r1, [r1, r5]
 8004b80:	f000 f9d6 	bl	8004f30 <_lseek_r>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	1c42      	adds	r2, r0, #1
 8004b88:	d103      	bne.n	8004b92 <__sseek+0x1a>
 8004b8a:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <__sseek+0x28>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	0152      	lsls	r2, r2, #5
 8004b96:	4313      	orrs	r3, r2
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8004b9c:	e7f8      	b.n	8004b90 <__sseek+0x18>
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	ffffefff 	.word	0xffffefff

08004ba4 <__sclose>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	230e      	movs	r3, #14
 8004ba8:	5ec9      	ldrsh	r1, [r1, r3]
 8004baa:	f000 f8e3 	bl	8004d74 <_close_r>
 8004bae:	bd10      	pop	{r4, pc}

08004bb0 <__swbuf_r>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	0005      	movs	r5, r0
 8004bb4:	000e      	movs	r6, r1
 8004bb6:	0014      	movs	r4, r2
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d004      	beq.n	8004bc6 <__swbuf_r+0x16>
 8004bbc:	6983      	ldr	r3, [r0, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <__swbuf_r+0x16>
 8004bc2:	f7ff fb77 	bl	80042b4 <__sinit>
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <__swbuf_r+0xa0>)
 8004bc8:	429c      	cmp	r4, r3
 8004bca:	d12e      	bne.n	8004c2a <__swbuf_r+0x7a>
 8004bcc:	686c      	ldr	r4, [r5, #4]
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	60a3      	str	r3, [r4, #8]
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	071b      	lsls	r3, r3, #28
 8004bd6:	d532      	bpl.n	8004c3e <__swbuf_r+0x8e>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02f      	beq.n	8004c3e <__swbuf_r+0x8e>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	b2f7      	uxtb	r7, r6
 8004be4:	1a98      	subs	r0, r3, r2
 8004be6:	6963      	ldr	r3, [r4, #20]
 8004be8:	b2f6      	uxtb	r6, r6
 8004bea:	4283      	cmp	r3, r0
 8004bec:	dc05      	bgt.n	8004bfa <__swbuf_r+0x4a>
 8004bee:	0021      	movs	r1, r4
 8004bf0:	0028      	movs	r0, r5
 8004bf2:	f000 f95d 	bl	8004eb0 <_fflush_r>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d127      	bne.n	8004c4a <__swbuf_r+0x9a>
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	60a3      	str	r3, [r4, #8]
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	6022      	str	r2, [r4, #0]
 8004c08:	701f      	strb	r7, [r3, #0]
 8004c0a:	6963      	ldr	r3, [r4, #20]
 8004c0c:	4283      	cmp	r3, r0
 8004c0e:	d004      	beq.n	8004c1a <__swbuf_r+0x6a>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	07db      	lsls	r3, r3, #31
 8004c14:	d507      	bpl.n	8004c26 <__swbuf_r+0x76>
 8004c16:	2e0a      	cmp	r6, #10
 8004c18:	d105      	bne.n	8004c26 <__swbuf_r+0x76>
 8004c1a:	0021      	movs	r1, r4
 8004c1c:	0028      	movs	r0, r5
 8004c1e:	f000 f947 	bl	8004eb0 <_fflush_r>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d111      	bne.n	8004c4a <__swbuf_r+0x9a>
 8004c26:	0030      	movs	r0, r6
 8004c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <__swbuf_r+0xa4>)
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d101      	bne.n	8004c34 <__swbuf_r+0x84>
 8004c30:	68ac      	ldr	r4, [r5, #8]
 8004c32:	e7cc      	b.n	8004bce <__swbuf_r+0x1e>
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <__swbuf_r+0xa8>)
 8004c36:	429c      	cmp	r4, r3
 8004c38:	d1c9      	bne.n	8004bce <__swbuf_r+0x1e>
 8004c3a:	68ec      	ldr	r4, [r5, #12]
 8004c3c:	e7c7      	b.n	8004bce <__swbuf_r+0x1e>
 8004c3e:	0021      	movs	r1, r4
 8004c40:	0028      	movs	r0, r5
 8004c42:	f000 f81f 	bl	8004c84 <__swsetup_r>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d0c9      	beq.n	8004bde <__swbuf_r+0x2e>
 8004c4a:	2601      	movs	r6, #1
 8004c4c:	4276      	negs	r6, r6
 8004c4e:	e7ea      	b.n	8004c26 <__swbuf_r+0x76>
 8004c50:	080052b4 	.word	0x080052b4
 8004c54:	080052d4 	.word	0x080052d4
 8004c58:	08005294 	.word	0x08005294

08004c5c <_write_r>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	0004      	movs	r4, r0
 8004c60:	0008      	movs	r0, r1
 8004c62:	0011      	movs	r1, r2
 8004c64:	001a      	movs	r2, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	4d05      	ldr	r5, [pc, #20]	; (8004c80 <_write_r+0x24>)
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fc f902 	bl	8000e74 <_write>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d103      	bne.n	8004c7c <_write_r+0x20>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d000      	beq.n	8004c7c <_write_r+0x20>
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	200001c4 	.word	0x200001c4

08004c84 <__swsetup_r>:
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <__swsetup_r+0xe0>)
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	681d      	ldr	r5, [r3, #0]
 8004c8a:	0006      	movs	r6, r0
 8004c8c:	000c      	movs	r4, r1
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	d005      	beq.n	8004c9e <__swsetup_r+0x1a>
 8004c92:	69ab      	ldr	r3, [r5, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <__swsetup_r+0x1a>
 8004c98:	0028      	movs	r0, r5
 8004c9a:	f7ff fb0b 	bl	80042b4 <__sinit>
 8004c9e:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <__swsetup_r+0xe4>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d10f      	bne.n	8004cc4 <__swsetup_r+0x40>
 8004ca4:	686c      	ldr	r4, [r5, #4]
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	5ee2      	ldrsh	r2, [r4, r3]
 8004caa:	b293      	uxth	r3, r2
 8004cac:	0711      	lsls	r1, r2, #28
 8004cae:	d42d      	bmi.n	8004d0c <__swsetup_r+0x88>
 8004cb0:	06d9      	lsls	r1, r3, #27
 8004cb2:	d411      	bmi.n	8004cd8 <__swsetup_r+0x54>
 8004cb4:	2309      	movs	r3, #9
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	3337      	adds	r3, #55	; 0x37
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	4240      	negs	r0, r0
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <__swsetup_r+0xe8>)
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d101      	bne.n	8004cce <__swsetup_r+0x4a>
 8004cca:	68ac      	ldr	r4, [r5, #8]
 8004ccc:	e7eb      	b.n	8004ca6 <__swsetup_r+0x22>
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <__swsetup_r+0xec>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d1e8      	bne.n	8004ca6 <__swsetup_r+0x22>
 8004cd4:	68ec      	ldr	r4, [r5, #12]
 8004cd6:	e7e6      	b.n	8004ca6 <__swsetup_r+0x22>
 8004cd8:	075b      	lsls	r3, r3, #29
 8004cda:	d513      	bpl.n	8004d04 <__swsetup_r+0x80>
 8004cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	d008      	beq.n	8004cf4 <__swsetup_r+0x70>
 8004ce2:	0023      	movs	r3, r4
 8004ce4:	3344      	adds	r3, #68	; 0x44
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	d002      	beq.n	8004cf0 <__swsetup_r+0x6c>
 8004cea:	0030      	movs	r0, r6
 8004cec:	f000 f9bc 	bl	8005068 <_free_r>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8004cf4:	2224      	movs	r2, #36	; 0x24
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	6923      	ldr	r3, [r4, #16]
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	2308      	movs	r3, #8
 8004d06:	89a2      	ldrh	r2, [r4, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <__swsetup_r+0xa6>
 8004d12:	21a0      	movs	r1, #160	; 0xa0
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	0089      	lsls	r1, r1, #2
 8004d1a:	0092      	lsls	r2, r2, #2
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <__swsetup_r+0xa6>
 8004d22:	0021      	movs	r1, r4
 8004d24:	0030      	movs	r0, r6
 8004d26:	f000 f93f 	bl	8004fa8 <__smakebuf_r>
 8004d2a:	220c      	movs	r2, #12
 8004d2c:	5ea3      	ldrsh	r3, [r4, r2]
 8004d2e:	2001      	movs	r0, #1
 8004d30:	001a      	movs	r2, r3
 8004d32:	b299      	uxth	r1, r3
 8004d34:	4002      	ands	r2, r0
 8004d36:	4203      	tst	r3, r0
 8004d38:	d00f      	beq.n	8004d5a <__swsetup_r+0xd6>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60a2      	str	r2, [r4, #8]
 8004d3e:	6962      	ldr	r2, [r4, #20]
 8004d40:	4252      	negs	r2, r2
 8004d42:	61a2      	str	r2, [r4, #24]
 8004d44:	2000      	movs	r0, #0
 8004d46:	6922      	ldr	r2, [r4, #16]
 8004d48:	4282      	cmp	r2, r0
 8004d4a:	d1ba      	bne.n	8004cc2 <__swsetup_r+0x3e>
 8004d4c:	060a      	lsls	r2, r1, #24
 8004d4e:	d5b8      	bpl.n	8004cc2 <__swsetup_r+0x3e>
 8004d50:	2240      	movs	r2, #64	; 0x40
 8004d52:	4313      	orrs	r3, r2
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	3801      	subs	r0, #1
 8004d58:	e7b3      	b.n	8004cc2 <__swsetup_r+0x3e>
 8004d5a:	0788      	lsls	r0, r1, #30
 8004d5c:	d400      	bmi.n	8004d60 <__swsetup_r+0xdc>
 8004d5e:	6962      	ldr	r2, [r4, #20]
 8004d60:	60a2      	str	r2, [r4, #8]
 8004d62:	e7ef      	b.n	8004d44 <__swsetup_r+0xc0>
 8004d64:	2000000c 	.word	0x2000000c
 8004d68:	080052b4 	.word	0x080052b4
 8004d6c:	080052d4 	.word	0x080052d4
 8004d70:	08005294 	.word	0x08005294

08004d74 <_close_r>:
 8004d74:	2300      	movs	r3, #0
 8004d76:	b570      	push	{r4, r5, r6, lr}
 8004d78:	4d06      	ldr	r5, [pc, #24]	; (8004d94 <_close_r+0x20>)
 8004d7a:	0004      	movs	r4, r0
 8004d7c:	0008      	movs	r0, r1
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	f7fc f894 	bl	8000eac <_close>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d103      	bne.n	8004d90 <_close_r+0x1c>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d000      	beq.n	8004d90 <_close_r+0x1c>
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	200001c4 	.word	0x200001c4

08004d98 <__sflush_r>:
 8004d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d9a:	898b      	ldrh	r3, [r1, #12]
 8004d9c:	0005      	movs	r5, r0
 8004d9e:	000c      	movs	r4, r1
 8004da0:	071a      	lsls	r2, r3, #28
 8004da2:	d45f      	bmi.n	8004e64 <__sflush_r+0xcc>
 8004da4:	684a      	ldr	r2, [r1, #4]
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	dc04      	bgt.n	8004db4 <__sflush_r+0x1c>
 8004daa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	dc01      	bgt.n	8004db4 <__sflush_r+0x1c>
 8004db0:	2000      	movs	r0, #0
 8004db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004db4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004db6:	2f00      	cmp	r7, #0
 8004db8:	d0fa      	beq.n	8004db0 <__sflush_r+0x18>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	682e      	ldr	r6, [r5, #0]
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	0149      	lsls	r1, r1, #5
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	420b      	tst	r3, r1
 8004dca:	d034      	beq.n	8004e36 <__sflush_r+0x9e>
 8004dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	075b      	lsls	r3, r3, #29
 8004dd2:	d506      	bpl.n	8004de2 <__sflush_r+0x4a>
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	1ac0      	subs	r0, r0, r3
 8004dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <__sflush_r+0x4a>
 8004dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de0:	1ac0      	subs	r0, r0, r3
 8004de2:	0002      	movs	r2, r0
 8004de4:	6a21      	ldr	r1, [r4, #32]
 8004de6:	2300      	movs	r3, #0
 8004de8:	0028      	movs	r0, r5
 8004dea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004dec:	47b8      	blx	r7
 8004dee:	89a1      	ldrh	r1, [r4, #12]
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d106      	bne.n	8004e02 <__sflush_r+0x6a>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	2b1d      	cmp	r3, #29
 8004df8:	d831      	bhi.n	8004e5e <__sflush_r+0xc6>
 8004dfa:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <__sflush_r+0x114>)
 8004dfc:	40da      	lsrs	r2, r3
 8004dfe:	07d3      	lsls	r3, r2, #31
 8004e00:	d52d      	bpl.n	8004e5e <__sflush_r+0xc6>
 8004e02:	2300      	movs	r3, #0
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	04cb      	lsls	r3, r1, #19
 8004e0c:	d505      	bpl.n	8004e1a <__sflush_r+0x82>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d102      	bne.n	8004e18 <__sflush_r+0x80>
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d100      	bne.n	8004e1a <__sflush_r+0x82>
 8004e18:	6560      	str	r0, [r4, #84]	; 0x54
 8004e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e1c:	602e      	str	r6, [r5, #0]
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d0c6      	beq.n	8004db0 <__sflush_r+0x18>
 8004e22:	0023      	movs	r3, r4
 8004e24:	3344      	adds	r3, #68	; 0x44
 8004e26:	4299      	cmp	r1, r3
 8004e28:	d002      	beq.n	8004e30 <__sflush_r+0x98>
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	f000 f91c 	bl	8005068 <_free_r>
 8004e30:	2000      	movs	r0, #0
 8004e32:	6360      	str	r0, [r4, #52]	; 0x34
 8004e34:	e7bd      	b.n	8004db2 <__sflush_r+0x1a>
 8004e36:	2301      	movs	r3, #1
 8004e38:	0028      	movs	r0, r5
 8004e3a:	6a21      	ldr	r1, [r4, #32]
 8004e3c:	47b8      	blx	r7
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d1c5      	bne.n	8004dce <__sflush_r+0x36>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0c2      	beq.n	8004dce <__sflush_r+0x36>
 8004e48:	2b1d      	cmp	r3, #29
 8004e4a:	d001      	beq.n	8004e50 <__sflush_r+0xb8>
 8004e4c:	2b16      	cmp	r3, #22
 8004e4e:	d101      	bne.n	8004e54 <__sflush_r+0xbc>
 8004e50:	602e      	str	r6, [r5, #0]
 8004e52:	e7ad      	b.n	8004db0 <__sflush_r+0x18>
 8004e54:	2340      	movs	r3, #64	; 0x40
 8004e56:	89a2      	ldrh	r2, [r4, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	e7a9      	b.n	8004db2 <__sflush_r+0x1a>
 8004e5e:	2340      	movs	r3, #64	; 0x40
 8004e60:	430b      	orrs	r3, r1
 8004e62:	e7fa      	b.n	8004e5a <__sflush_r+0xc2>
 8004e64:	690f      	ldr	r7, [r1, #16]
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	d0a2      	beq.n	8004db0 <__sflush_r+0x18>
 8004e6a:	680a      	ldr	r2, [r1, #0]
 8004e6c:	600f      	str	r7, [r1, #0]
 8004e6e:	1bd2      	subs	r2, r2, r7
 8004e70:	9201      	str	r2, [sp, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	079b      	lsls	r3, r3, #30
 8004e76:	d100      	bne.n	8004e7a <__sflush_r+0xe2>
 8004e78:	694a      	ldr	r2, [r1, #20]
 8004e7a:	60a2      	str	r2, [r4, #8]
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dc00      	bgt.n	8004e84 <__sflush_r+0xec>
 8004e82:	e795      	b.n	8004db0 <__sflush_r+0x18>
 8004e84:	003a      	movs	r2, r7
 8004e86:	0028      	movs	r0, r5
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	6a21      	ldr	r1, [r4, #32]
 8004e8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e8e:	47b0      	blx	r6
 8004e90:	2800      	cmp	r0, #0
 8004e92:	dc06      	bgt.n	8004ea2 <__sflush_r+0x10a>
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	2001      	movs	r0, #1
 8004e98:	89a2      	ldrh	r2, [r4, #12]
 8004e9a:	4240      	negs	r0, r0
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	e787      	b.n	8004db2 <__sflush_r+0x1a>
 8004ea2:	9b01      	ldr	r3, [sp, #4]
 8004ea4:	183f      	adds	r7, r7, r0
 8004ea6:	1a1b      	subs	r3, r3, r0
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	e7e7      	b.n	8004e7c <__sflush_r+0xe4>
 8004eac:	20400001 	.word	0x20400001

08004eb0 <_fflush_r>:
 8004eb0:	690b      	ldr	r3, [r1, #16]
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	0005      	movs	r5, r0
 8004eb6:	000c      	movs	r4, r1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <_fflush_r+0x12>
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	0028      	movs	r0, r5
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d004      	beq.n	8004ed0 <_fflush_r+0x20>
 8004ec6:	6983      	ldr	r3, [r0, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <_fflush_r+0x20>
 8004ecc:	f7ff f9f2 	bl	80042b4 <__sinit>
 8004ed0:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <_fflush_r+0x74>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d11b      	bne.n	8004f0e <_fflush_r+0x5e>
 8004ed6:	686c      	ldr	r4, [r5, #4]
 8004ed8:	220c      	movs	r2, #12
 8004eda:	5ea3      	ldrsh	r3, [r4, r2]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ed      	beq.n	8004ebc <_fflush_r+0xc>
 8004ee0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ee2:	07d2      	lsls	r2, r2, #31
 8004ee4:	d404      	bmi.n	8004ef0 <_fflush_r+0x40>
 8004ee6:	059b      	lsls	r3, r3, #22
 8004ee8:	d402      	bmi.n	8004ef0 <_fflush_r+0x40>
 8004eea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eec:	f7ff fa83 	bl	80043f6 <__retarget_lock_acquire_recursive>
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	0021      	movs	r1, r4
 8004ef4:	f7ff ff50 	bl	8004d98 <__sflush_r>
 8004ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004efa:	0005      	movs	r5, r0
 8004efc:	07db      	lsls	r3, r3, #31
 8004efe:	d4de      	bmi.n	8004ebe <_fflush_r+0xe>
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	059b      	lsls	r3, r3, #22
 8004f04:	d4db      	bmi.n	8004ebe <_fflush_r+0xe>
 8004f06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f08:	f7ff fa76 	bl	80043f8 <__retarget_lock_release_recursive>
 8004f0c:	e7d7      	b.n	8004ebe <_fflush_r+0xe>
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <_fflush_r+0x78>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d101      	bne.n	8004f18 <_fflush_r+0x68>
 8004f14:	68ac      	ldr	r4, [r5, #8]
 8004f16:	e7df      	b.n	8004ed8 <_fflush_r+0x28>
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <_fflush_r+0x7c>)
 8004f1a:	429c      	cmp	r4, r3
 8004f1c:	d1dc      	bne.n	8004ed8 <_fflush_r+0x28>
 8004f1e:	68ec      	ldr	r4, [r5, #12]
 8004f20:	e7da      	b.n	8004ed8 <_fflush_r+0x28>
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	080052b4 	.word	0x080052b4
 8004f28:	080052d4 	.word	0x080052d4
 8004f2c:	08005294 	.word	0x08005294

08004f30 <_lseek_r>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	0004      	movs	r4, r0
 8004f34:	0008      	movs	r0, r1
 8004f36:	0011      	movs	r1, r2
 8004f38:	001a      	movs	r2, r3
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4d05      	ldr	r5, [pc, #20]	; (8004f54 <_lseek_r+0x24>)
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	f7fb ffd5 	bl	8000eee <_lseek>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d103      	bne.n	8004f50 <_lseek_r+0x20>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d000      	beq.n	8004f50 <_lseek_r+0x20>
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	200001c4 	.word	0x200001c4

08004f58 <__swhatbuf_r>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	000e      	movs	r6, r1
 8004f5c:	001d      	movs	r5, r3
 8004f5e:	230e      	movs	r3, #14
 8004f60:	5ec9      	ldrsh	r1, [r1, r3]
 8004f62:	0014      	movs	r4, r2
 8004f64:	b096      	sub	sp, #88	; 0x58
 8004f66:	2900      	cmp	r1, #0
 8004f68:	da08      	bge.n	8004f7c <__swhatbuf_r+0x24>
 8004f6a:	220c      	movs	r2, #12
 8004f6c:	5eb3      	ldrsh	r3, [r6, r2]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	d411      	bmi.n	8004f9a <__swhatbuf_r+0x42>
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	e00f      	b.n	8004f9c <__swhatbuf_r+0x44>
 8004f7c:	466a      	mov	r2, sp
 8004f7e:	f000 f8d1 	bl	8005124 <_fstat_r>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	dbf1      	blt.n	8004f6a <__swhatbuf_r+0x12>
 8004f86:	23f0      	movs	r3, #240	; 0xf0
 8004f88:	9901      	ldr	r1, [sp, #4]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	4019      	ands	r1, r3
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <__swhatbuf_r+0x4c>)
 8004f90:	18c9      	adds	r1, r1, r3
 8004f92:	424b      	negs	r3, r1
 8004f94:	4159      	adcs	r1, r3
 8004f96:	6029      	str	r1, [r5, #0]
 8004f98:	e7ed      	b.n	8004f76 <__swhatbuf_r+0x1e>
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	b016      	add	sp, #88	; 0x58
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	ffffe000 	.word	0xffffe000

08004fa8 <__smakebuf_r>:
 8004fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004faa:	2602      	movs	r6, #2
 8004fac:	898b      	ldrh	r3, [r1, #12]
 8004fae:	0005      	movs	r5, r0
 8004fb0:	000c      	movs	r4, r1
 8004fb2:	4233      	tst	r3, r6
 8004fb4:	d006      	beq.n	8004fc4 <__smakebuf_r+0x1c>
 8004fb6:	0023      	movs	r3, r4
 8004fb8:	3347      	adds	r3, #71	; 0x47
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	6163      	str	r3, [r4, #20]
 8004fc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004fc4:	466a      	mov	r2, sp
 8004fc6:	ab01      	add	r3, sp, #4
 8004fc8:	f7ff ffc6 	bl	8004f58 <__swhatbuf_r>
 8004fcc:	9900      	ldr	r1, [sp, #0]
 8004fce:	0007      	movs	r7, r0
 8004fd0:	0028      	movs	r0, r5
 8004fd2:	f7ff fa35 	bl	8004440 <_malloc_r>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d108      	bne.n	8004fec <__smakebuf_r+0x44>
 8004fda:	220c      	movs	r2, #12
 8004fdc:	5ea3      	ldrsh	r3, [r4, r2]
 8004fde:	059a      	lsls	r2, r3, #22
 8004fe0:	d4ef      	bmi.n	8004fc2 <__smakebuf_r+0x1a>
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	4393      	bics	r3, r2
 8004fe6:	431e      	orrs	r6, r3
 8004fe8:	81a6      	strh	r6, [r4, #12]
 8004fea:	e7e4      	b.n	8004fb6 <__smakebuf_r+0xe>
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <__smakebuf_r+0x84>)
 8004fee:	62ab      	str	r3, [r5, #40]	; 0x28
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	89a2      	ldrh	r2, [r4, #12]
 8004ff4:	6020      	str	r0, [r4, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	9b00      	ldr	r3, [sp, #0]
 8004ffc:	6120      	str	r0, [r4, #16]
 8004ffe:	6163      	str	r3, [r4, #20]
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <__smakebuf_r+0x7a>
 8005006:	0028      	movs	r0, r5
 8005008:	230e      	movs	r3, #14
 800500a:	5ee1      	ldrsh	r1, [r4, r3]
 800500c:	f000 f89c 	bl	8005148 <_isatty_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	d006      	beq.n	8005022 <__smakebuf_r+0x7a>
 8005014:	2203      	movs	r2, #3
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	4393      	bics	r3, r2
 800501a:	001a      	movs	r2, r3
 800501c:	2301      	movs	r3, #1
 800501e:	4313      	orrs	r3, r2
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	89a0      	ldrh	r0, [r4, #12]
 8005024:	4307      	orrs	r7, r0
 8005026:	81a7      	strh	r7, [r4, #12]
 8005028:	e7cb      	b.n	8004fc2 <__smakebuf_r+0x1a>
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	08004239 	.word	0x08004239

08005030 <memchr>:
 8005030:	b2c9      	uxtb	r1, r1
 8005032:	1882      	adds	r2, r0, r2
 8005034:	4290      	cmp	r0, r2
 8005036:	d101      	bne.n	800503c <memchr+0xc>
 8005038:	2000      	movs	r0, #0
 800503a:	4770      	bx	lr
 800503c:	7803      	ldrb	r3, [r0, #0]
 800503e:	428b      	cmp	r3, r1
 8005040:	d0fb      	beq.n	800503a <memchr+0xa>
 8005042:	3001      	adds	r0, #1
 8005044:	e7f6      	b.n	8005034 <memchr+0x4>
	...

08005048 <__malloc_lock>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4802      	ldr	r0, [pc, #8]	; (8005054 <__malloc_lock+0xc>)
 800504c:	f7ff f9d3 	bl	80043f6 <__retarget_lock_acquire_recursive>
 8005050:	bd10      	pop	{r4, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	200001b8 	.word	0x200001b8

08005058 <__malloc_unlock>:
 8005058:	b510      	push	{r4, lr}
 800505a:	4802      	ldr	r0, [pc, #8]	; (8005064 <__malloc_unlock+0xc>)
 800505c:	f7ff f9cc 	bl	80043f8 <__retarget_lock_release_recursive>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	200001b8 	.word	0x200001b8

08005068 <_free_r>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	0005      	movs	r5, r0
 800506c:	2900      	cmp	r1, #0
 800506e:	d010      	beq.n	8005092 <_free_r+0x2a>
 8005070:	1f0c      	subs	r4, r1, #4
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	da00      	bge.n	800507a <_free_r+0x12>
 8005078:	18e4      	adds	r4, r4, r3
 800507a:	0028      	movs	r0, r5
 800507c:	f7ff ffe4 	bl	8005048 <__malloc_lock>
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <_free_r+0x90>)
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <_free_r+0x2c>
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	6014      	str	r4, [r2, #0]
 800508c:	0028      	movs	r0, r5
 800508e:	f7ff ffe3 	bl	8005058 <__malloc_unlock>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	42a3      	cmp	r3, r4
 8005096:	d908      	bls.n	80050aa <_free_r+0x42>
 8005098:	6821      	ldr	r1, [r4, #0]
 800509a:	1860      	adds	r0, r4, r1
 800509c:	4283      	cmp	r3, r0
 800509e:	d1f3      	bne.n	8005088 <_free_r+0x20>
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	1841      	adds	r1, r0, r1
 80050a6:	6021      	str	r1, [r4, #0]
 80050a8:	e7ee      	b.n	8005088 <_free_r+0x20>
 80050aa:	001a      	movs	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <_free_r+0x4e>
 80050b2:	42a3      	cmp	r3, r4
 80050b4:	d9f9      	bls.n	80050aa <_free_r+0x42>
 80050b6:	6811      	ldr	r1, [r2, #0]
 80050b8:	1850      	adds	r0, r2, r1
 80050ba:	42a0      	cmp	r0, r4
 80050bc:	d10b      	bne.n	80050d6 <_free_r+0x6e>
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	1809      	adds	r1, r1, r0
 80050c2:	1850      	adds	r0, r2, r1
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	4283      	cmp	r3, r0
 80050c8:	d1e0      	bne.n	800508c <_free_r+0x24>
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	1841      	adds	r1, r0, r1
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	6053      	str	r3, [r2, #4]
 80050d4:	e7da      	b.n	800508c <_free_r+0x24>
 80050d6:	42a0      	cmp	r0, r4
 80050d8:	d902      	bls.n	80050e0 <_free_r+0x78>
 80050da:	230c      	movs	r3, #12
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	e7d5      	b.n	800508c <_free_r+0x24>
 80050e0:	6821      	ldr	r1, [r4, #0]
 80050e2:	1860      	adds	r0, r4, r1
 80050e4:	4283      	cmp	r3, r0
 80050e6:	d103      	bne.n	80050f0 <_free_r+0x88>
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	1841      	adds	r1, r0, r1
 80050ee:	6021      	str	r1, [r4, #0]
 80050f0:	6063      	str	r3, [r4, #4]
 80050f2:	6054      	str	r4, [r2, #4]
 80050f4:	e7ca      	b.n	800508c <_free_r+0x24>
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	200001bc 	.word	0x200001bc

080050fc <_read_r>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	0004      	movs	r4, r0
 8005100:	0008      	movs	r0, r1
 8005102:	0011      	movs	r1, r2
 8005104:	001a      	movs	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	4d05      	ldr	r5, [pc, #20]	; (8005120 <_read_r+0x24>)
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fb fe95 	bl	8000e3a <_read>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d103      	bne.n	800511c <_read_r+0x20>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d000      	beq.n	800511c <_read_r+0x20>
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	200001c4 	.word	0x200001c4

08005124 <_fstat_r>:
 8005124:	2300      	movs	r3, #0
 8005126:	b570      	push	{r4, r5, r6, lr}
 8005128:	4d06      	ldr	r5, [pc, #24]	; (8005144 <_fstat_r+0x20>)
 800512a:	0004      	movs	r4, r0
 800512c:	0008      	movs	r0, r1
 800512e:	0011      	movs	r1, r2
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	f7fb fec5 	bl	8000ec0 <_fstat>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d103      	bne.n	8005142 <_fstat_r+0x1e>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d000      	beq.n	8005142 <_fstat_r+0x1e>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	200001c4 	.word	0x200001c4

08005148 <_isatty_r>:
 8005148:	2300      	movs	r3, #0
 800514a:	b570      	push	{r4, r5, r6, lr}
 800514c:	4d06      	ldr	r5, [pc, #24]	; (8005168 <_isatty_r+0x20>)
 800514e:	0004      	movs	r4, r0
 8005150:	0008      	movs	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb fec2 	bl	8000edc <_isatty>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d103      	bne.n	8005164 <_isatty_r+0x1c>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d000      	beq.n	8005164 <_isatty_r+0x1c>
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	200001c4 	.word	0x200001c4

0800516c <_init>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr

08005178 <_fini>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr
